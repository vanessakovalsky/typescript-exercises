{"version":3,"sources":["exercises/1/index.ts","exercises/1/index.solution.ts","exercises/1/test.ts","exercises/2/index.ts","exercises/2/index.solution.ts","exercises/2/test.ts","exercises/3/index.ts","exercises/3/index.solution.ts","exercises/3/test.ts","exercises/4/index.ts","exercises/4/index.solution.ts","exercises/4/test.ts","exercises/5/index.ts","exercises/5/index.solution.ts","exercises/5/test.ts","exercises/6/index.ts","exercises/6/index.solution.ts","exercises/6/test.ts","exercises/7/index.ts","exercises/7/index.solution.ts","exercises/7/test.ts","exercises/8/index.ts","exercises/8/index.solution.ts","exercises/8/test.ts","exercises/9/index.ts","exercises/9/index.solution.ts","exercises/9/test.ts","exercises/10/index.ts","exercises/10/index.solution.ts","exercises/10/test.ts","exercises/11/index.ts","exercises/11/test.ts","exercises/11/declarations/str-utils/index.d.ts","exercises/11/declarations/str-utils/index.solution.d.ts","exercises/12/index.ts","exercises/12/test.ts","exercises/12/declarations/stats/index.d.ts","exercises/12/declarations/stats/index.solution.d.ts","exercises/13/index.ts","exercises/13/test.ts","exercises/13/module-augmentations/date-wizard/index.ts","exercises/13/module-augmentations/date-wizard/index.solution.ts","exercises/14/index.ts","exercises/14/index.solution.ts","exercises/14/test.ts","exercises/15/index.ts","exercises/15/index.solution.ts","exercises/15/test.ts","exercises/16/index.ts","exercises/16/test.ts","operators/check-type-script-project/service.ts","components/loading-container/index.tsx","observables/ui.ts","components/collapsible-panel/index.tsx","components/file-title/index.tsx","components/file-tree-view/icons.tsx","components/file-tree-view/index.tsx","components/auto-resizer/index.tsx","components/dialog/index.tsx","components/monaco-diff-viewer/index.tsx","components/monaco-editor/diff-dialog.tsx","components/monaco-editor/revalidate-model.ts","components/monaco-editor/index.tsx","components/validation-errors/index.tsx","lib/exercise-structures.ts","lib/local-data.ts","observables/exercise.ts","observables/url-params.ts","observables/exercises-progress.ts","observables/migrations/2020-09-26.ts","operators/check-type-script-project/index.ts","containers/exercise/index.tsx","components/footer/index.tsx","components/header/ts-logo.tsx","components/header/index.tsx","containers/navigation/index.tsx","containers/page-layout/index.tsx","containers/app/fonts.ts","containers/app/index.tsx","serviceWorker.ts","index.tsx"],"names":["addMethods","methods","module","exports","w","Worker","name","Loading","color","LoadingContainer","observable","render","update","useState","setUpdate","useMemo","state","value","undefined","subscription","emitChanges","subscribe","newValue","useLayoutEffect","unsubscribe","useObservable","load","ui","subject","ReplaySubject","panels","exercise","collapsed","files","solutionFiles","updateState","newState","next","observable$","expandPanel","panelName","collapsePanel","Header","styled","div","orientation","HeaderLabel","Content","CollapseButton","button","Wrapper","CollapsiblePanel","id","header","children","collapse","expand","onClick","FileTitleWrapper","FileTitleLabel","span","FileTitle","filename","readOnly","replace","DirectoryIcon","version","xmlns","viewBox","width","height","d","fill","FileIcon","FileTreeViewWrapper","FileTreeBranchWrapper","FileTreeBranchLabelText","FileTreeBranchLabelActions","FileTreeBranchRevert","FileTreeBranchLabel","selectable","selected","FileTreeBranchContent","FileTreeViewBranch","branch","selectedFilename","onSelectFilename","modifiedFilenames","revertFile","useCallback","isDirectory","length","revert","map","subBranch","FileTreeView","fileTree","treeItems","result","items","Object","keys","bits","split","parentTreeItem","parentTreePath","bit","shift","push","parentPath","join","item","Boolean","buildTree","decorateWithAutoResize","Component","props","size","setSize","wrapperRef","useRef","useEffect","updateSize","debounce","current","newWidth","offsetWidth","newHeight","offsetHeight","window","addEventListener","passive","interval","setInterval","removeEventListener","clearInterval","ref","DialogBackground","DialogWrapper","CloseButton","stopEventPropagation","e","stopPropagation","Dialog","onClose","MonacoDiffViewer","instance","instanceDiv","assignRef","newRef","this","editor","createDiffEditor","options","renderValidationDecorations","setModels","original","modified","setModel","prevProps","layout","dispose","style","React","Panes","EditorArea","EditorAreaCaption","EditorAreaTitle","EditorAreaContent","noop","DiffDialog","filenames","onSelectFile","otherProps","reduce","content","createTreeFromFilenames","flattenDiagnosticMessageText","diag","newLine","indent","i","messageText","kid","model","a","isDisposed","languages","typescript","getTypeScriptWorker","getWorker","uri","worker","Promise","all","getSyntacticDiagnostics","toString","getSemanticDiagnostics","diagnostics","it","concat","markers","start","getPositionAt","end","severity","MarkerSeverity","Error","startLineNumber","lineNumber","startColumn","column","endLineNumber","endColumn","message","setModelMarkers","typescriptDefaults","setCompilerOptions","strict","target","ScriptTarget","ES2018","moduleResolution","ModuleResolutionKind","NodeJs","typeRoots","extensionsToLanguages","ts","json","MonacoEditor","models","solutionsModels","solutionsFilenames","viewStates","lastUpdates","setSelectedSolutionFilename","solutionsSelectedFilename","setState","solution","language","pop","createModel","Uri","file","namespace","onDidChangeContent","getValue","onChange","entries","values","create","initialized","newSelectedFilename","saveViewState","updateOptions","revalidateModel","viewState","restoreViewState","focus","position","setPosition","revealLine","setValue","selectedSolutionFilename","getSelectedSolutionFilename","showSolutions","onSolutionsClose","ValidationErrorsWrapper","ol","ValidationErrorsItem","li","ValidationErrors","memo","errors","error","index","typeAssertions","require","default","formatJson","JSON","stringify","exerciseStructures","localData","key","defaultValue","data","localStorage","getItem","parse","setItem","createModifiedFileTree","contents","tree","prototype","hasOwnProperty","call","exercisesCache","defaultUrlParams","urlParams","getCurrentRawParams","qs","String","location","hash","substr","getCurrentParams","assign","extend","params","initialState","completedExercises","switchToExercise","exerciseNumber","exercisesProgress","localStorageKey","oldValueRaw","oldValue","lastCompletedExerciseNumber","removeItem","migrate","exercisesCount","currentExerciseNumber","Number","completeExercise","Math","min","skipExercise","goToExercise","createService","fileTreeToFileContents","res","diffFiles","oldFiles","newFiles","lastExerciseNumber","ExerciseWrapper","EditorWrapper","ExercisePanelWrapper","MainAreaWrapper","CompletedExerciseWrapper","CompletedExerciseLabel","ButtonsWrapper","ExerciseButton","calculateModifiedFilenames","Exercise","exerciseOriginalFiles","saveToLocalStorage","code","createExercise","solutionsVisible","setSolutionsVisible","validationErrors$","pipe","parentObservable","service","Observable","subscriber","prevFiles","init","updateFiles","getErrors","add","terminate","setSelectedFilename","goToFile","onErrorClick","hideSolutions","theme","onNavigate","minimap","enabled","FooterWrapper","footer","currentYear","Date","getFullYear","Footer","href","TsLogo","clipRule","fillRule","HeaderWrapper","HeaderLogo","h1","HeaderSubLogo","NavBar","nav","NavBarLabel","NavBarItem","completed","Navigation","combineLatest","PageLayoutWrapper","PageLayoutMain","main","PageLayout","fonts","css","globalStyles","App","styles","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c0bc85d0.chunk.js","sourcesContent":["export default \"/*\\n\\nBienvenue:\\n\\n    ................................................................\\n    .                                                              .\\n    .     ####################    ####################      E      .\\n    .     ####################    ####################      X      .\\n    .             ####            ####                      E      .\\n    .             ####            ####                      R      .\\n    .             ####            ####################      C      .\\n    .             ####                            ####      I      .\\n    .             ####                            ####      S      .\\n    .             ####            ####################      E      .\\n    .             ####            ####################      S      .\\n    .                                                              .\\n    ................................................................\\n\\n    Objectif : permettre à tous de jour avec différentes fonctionalités de TypeScript\\n    et obtenir un aperçu des capacités de TypeScript et de ses principes.\\n\\n    Things to cover:\\n\\n        1. Basic typing.\\n        2. Refining types.\\n        3. Union types.\\n        4. Merged types.\\n        5. Generics.\\n        6. Type declarations.\\n        7. Module augmentation.\\n        8. Advanced type mapping.\\n\\n    Rules and principles:\\n\\n        1. Avoid using \\\"any\\\" type at all costs.\\n        2. Difficulty quickly grows one exercise after another.\\n        3. Feel free to send pull-requests if you've come up\\n           with improvements!\\n        4. Provide feedback to the creator of these exercises.\\n        5. Enjoy.\\n\\nBrief UI guide:\\n\\n    +--------------------------------------------------------------+\\n    | TypeScript exercises                                         |\\n    +--------------------------------------------------------------+\\n    | Exercises 1·2·3·4...   << Navigate through exercises >>      |\\n    +---------------+----------------------------------------------+\\n    | Files         | file.ts   << Filename and status >>          |\\n    +---------------+----------------------------------------------+\\n    | file.ts       | 1  import {x} from 'y';                      |\\n    | dir           | 2                                            |\\n    |   sub.ts      | 3                                            |\\n    |               |                                              |\\n    | << Current    |   << Currently selected file code editor >>  |\\n    | exercise file |                                              |\\n    | structure >>  +----------------------------------------------+\\n    |               |                                              |\\n    |               |   << Errors to fix in order to proceed >>    |\\n    |               |                                              |\\n    +---------------+----------------------------------------------+\\n\\nIntro:\\n\\n    We are starting a small community of users. For performance\\n    reasons we have decided to store all users right in the code.\\n    This way we can provide our developers with more\\n    user-interaction opportunities. With user-related data, at least.\\n    All the GDPR-related issues will be solved some other day.\\n    This would be the base for our future experiments during\\n    these exercises.\\n\\nExercise:\\n\\n    Given the data, define the interface \\\"User\\\" and use it accordingly.\\n\\n*/\\n\\nexport type User = unknown;\\n\\nexport const users: unknown[] = [\\n    {\\n        name: 'Max Mustermann',\\n        age: 25,\\n        occupation: 'Chimney sweep'\\n    },\\n    {\\n        name: 'Kate Müller',\\n        age: 23,\\n        occupation: 'Astronaut'\\n    }\\n];\\n\\nexport function logPerson(user: unknown) {\\n    console.log(` - ${user.name}, ${user.age}`);\\n}\\n\\nconsole.log('Users:');\\nusers.forEach(logPerson);\\n\\n\\n/* In case if you are stuck:\\n\\n// https://www.typescriptlang.org/docs/handbook/2/objects.html\\n*/\\n\";","export default \"/*\\n\\nWelcome to:\\n\\n    ................................................................\\n    .                                                              .\\n    .     ####################    ####################      E      .\\n    .     ####################    ####################      X      .\\n    .             ####            ####                      E      .\\n    .             ####            ####                      R      .\\n    .             ####            ####################      C      .\\n    .             ####                            ####      I      .\\n    .             ####                            ####      S      .\\n    .             ####            ####################      E      .\\n    .             ####            ####################      S      .\\n    .                                                              .\\n    ................................................................\\n\\n    The goal: Let everyone play with many different TypeScript features\\n    and get an overview of TypeScript capabilities and principles.\\n\\n    Things to cover:\\n\\n        1. Basic typing.\\n        2. Refining types.\\n        3. Union types.\\n        4. Merged types.\\n        5. Generics.\\n        6. Type declarations.\\n        7. Module augmentation.\\n        8. Advanced type mapping.\\n\\n    Rules and principles:\\n\\n        1. Avoid using \\\"any\\\" type at all costs.\\n        2. Difficulty quickly grows one exercise after another.\\n        3. Feel free to send pull-requests if you've came up\\n           with improvements!\\n        4. Provide feedback to the creator of these exercises.\\n        5. Enjoy.\\n\\nBrief UI guide:\\n\\n    +--------------------------------------------------------------+\\n    | TypeScript exercises                                         |\\n    +--------------------------------------------------------------+\\n    | Exercises 1·2·3·4...   << Navigate through exercises >>      |\\n    +---------------+----------------------------------------------+\\n    | Files         | file.ts   << Filename and status >>          |\\n    +---------------+----------------------------------------------+\\n    | file.ts       | 1  import {x} from 'y';                      |\\n    | dir           | 2                                            |\\n    |   sub.ts      | 3                                            |\\n    |               |                                              |\\n    | << Current    |   << Currently selected file code editor >>  |\\n    | exercise file |                                              |\\n    | structure >>  +----------------------------------------------+\\n    |               |                                              |\\n    |               |   << Errors to fix in order to proceed >>    |\\n    |               |                                              |\\n    +---------------+----------------------------------------------+\\n\\nIntro:\\n\\n    We are starting a small community of users. For performance\\n    reasons we have decided to store all users right in the code.\\n    This way we can provide our developers with more\\n    user-interaction opportunities. With user-related data, at least.\\n    All the GDPR-related issues we will solved some other day.\\n    This would be the base for our future experiments during\\n    these exercises.\\n\\nExercise:\\n\\n    Given the data, define the interface \\\"User\\\" and use it accordingly.\\n\\n*/\\n\\nexport interface User {\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\nexport const users: User[] = [\\n    {\\n        name: 'Max Mustermann',\\n        age: 25,\\n        occupation: 'Chimney sweep'\\n    },\\n    {\\n        name: 'Kate Müller',\\n        age: 23,\\n        occupation: 'Astronaut'\\n    }\\n];\\n\\nexport function logPerson(user: User) {\\n    console.log(` - ${user.name}, ${user.age}`);\\n}\\n\\nconsole.log('Users:');\\nusers.forEach(logPerson);\\n\\n\\n/* In case if you are stuck:\\n\\n// https://www.typescriptlang.org/docs/handbook/2/objects.html\\n*/\\n\";","export default \"import {IsTypeEqual, typeAssert} from 'type-assertions';\\nimport {User, logPerson, users} from './index';\\n\\ntypeAssert<IsTypeEqual<User, {name: string, age: number, occupation: string}>>();\\ntypeAssert<IsTypeEqual<typeof users, {name: string, age: number, occupation: string}[]>>();\\ntypeAssert<IsTypeEqual<typeof logPerson, (user: {name: string, age: number, occupation: string}) => void>>();\\n\";","export default \"/*\\n\\nIntro:\\n\\n    All 2 users liked the idea of the community. We should go\\n    forward and introduce some order. We are in Germany after all.\\n    Let's add a couple of admins.\\n\\n    Initially we only had users in the in-memory database. After\\n    introducing Admins, we need to fix the types so that\\n    everything works well together.\\n\\nExercise:\\n\\n    Type \\\"Person\\\" is missing, please define it and use\\n    it in persons array and logPerson function in order to fix\\n    all the TS errors.\\n\\n*/\\n\\ninterface User {\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\nexport type Person = unknown;\\n\\nexport const persons: User[] /* <- Person[] */ = [\\n    {\\n        name: 'Max Mustermann',\\n        age: 25,\\n        occupation: 'Chimney sweep'\\n    },\\n    {\\n        name: 'Jane Doe',\\n        age: 32,\\n        role: 'Administrator'\\n    },\\n    {\\n        name: 'Kate Müller',\\n        age: 23,\\n        occupation: 'Astronaut'\\n    },\\n    {\\n        name: 'Bruce Willis',\\n        age: 64,\\n        role: 'World saver'\\n    }\\n];\\n\\nexport function logPerson(user: User) {\\n    console.log(` - ${user.name}, ${user.age}`);\\n}\\n\\npersons.forEach(logPerson);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/2/types-from-types.html\\n\";","export default \"/*\\n\\nIntro:\\n\\n    All 2 users liked the idea of the community. We should go\\n    forward and introduce some order. We are in Germany after all.\\n    Let's add a couple of admins.\\n\\n    Initially we only had users in the in-memory database. After\\n    introducing Admins, we need to fix the types so that\\n    everything works well together.\\n\\nExercise:\\n\\n    Type \\\"Person\\\" is missing, please define it and use\\n    it in persons array and logPerson function in order to fix\\n    all the TS errors.\\n\\n*/\\n\\ninterface User {\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\nexport type Person = User | Admin;\\n\\nexport const persons: Person[] = [\\n    {\\n        name: 'Max Mustermann',\\n        age: 25,\\n        occupation: 'Chimney sweep'\\n    },\\n    {\\n        name: 'Jane Doe',\\n        age: 32,\\n        role: 'Administrator'\\n    },\\n    {\\n        name: 'Kate Müller',\\n        age: 23,\\n        occupation: 'Astronaut'\\n    },\\n    {\\n        name: 'Bruce Willis',\\n        age: 64,\\n        role: 'World saver'\\n    }\\n];\\n\\nexport function logPerson(user: Person) {\\n    console.log(` - ${user.name}, ${user.age}`);\\n}\\n\\npersons.forEach(logPerson);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/2/types-from-types.html\\n\";","export default \"import {IsTypeEqual, FirstArgument, typeAssert} from 'type-assertions';\\nimport {Person, logPerson, persons} from './index';\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        Person,\\n        {name: string; age: number} & ({occupation: string} | {role: string})\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof persons,\\n        ({name: string; age: number} & ({occupation: string} | {role: string}))[]\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        FirstArgument<typeof logPerson>,\\n        {name: string; age: number} & ({occupation: string} | {role: string})\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        ReturnType<typeof logPerson>,\\n        void\\n    >\\n>();\\n\";","export default \"/*\\n\\nIntro:\\n\\n    Since we already have some of the additional\\n    information about our users, it's a good idea\\n    to output it in a nice way.\\n\\nExercise:\\n\\n    Fix type errors in logPerson function.\\n\\n    logPerson function should accept both User and Admin\\n    and should output relevant information according to\\n    the input: occupation for User and role for Admin.\\n\\n*/\\n\\ninterface User {\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\nexport type Person = User | Admin;\\n\\nexport const persons: Person[] = [\\n    {\\n        name: 'Max Mustermann',\\n        age: 25,\\n        occupation: 'Chimney sweep'\\n    },\\n    {\\n        name: 'Jane Doe',\\n        age: 32,\\n        role: 'Administrator'\\n    },\\n    {\\n        name: 'Kate Müller',\\n        age: 23,\\n        occupation: 'Astronaut'\\n    },\\n    {\\n        name: 'Bruce Willis',\\n        age: 64,\\n        role: 'World saver'\\n    }\\n];\\n\\nexport function logPerson(person: Person) {\\n    let additionalInformation: string;\\n    if (person.role) {\\n        additionalInformation = person.role;\\n    } else {\\n        additionalInformation = person.occupation;\\n    }\\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\\n}\\n\\npersons.forEach(logPerson);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing\\n\";","export default \"/*\\n\\nIntro:\\n\\n    Since we already have some of the additional\\n    information about our users, it's a good idea\\n    to output it in a nice way.\\n\\nExercise:\\n\\n    Fix type errors in logPerson function.\\n\\n    logPerson function should accept both User and Admin\\n    and should output relevant information according to\\n    the input: occupation for User and role for Admin.\\n\\n*/\\n\\ninterface User {\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\nexport type Person = User | Admin;\\n\\nexport const persons: Person[] = [\\n    {\\n        name: 'Max Mustermann',\\n        age: 25,\\n        occupation: 'Chimney sweep'\\n    },\\n    {\\n        name: 'Jane Doe',\\n        age: 32,\\n        role: 'Administrator'\\n    },\\n    {\\n        name: 'Kate Müller',\\n        age: 23,\\n        occupation: 'Astronaut'\\n    },\\n    {\\n        name: 'Bruce Willis',\\n        age: 64,\\n        role: 'World saver'\\n    }\\n];\\n\\nexport function logPerson(person: Person) {\\n    let additionalInformation: string;\\n    if ('role' in person) {\\n        additionalInformation = person.role;\\n    } else {\\n        additionalInformation = person.occupation;\\n    }\\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\\n}\\n\\npersons.forEach(logPerson);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing\\n\";","export default \"import {FirstArgument, IsTypeEqual, typeAssert} from 'type-assertions';\\nimport {logPerson, Person, persons} from './index';\\n\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        Person,\\n        {name: string; age: number} & ({occupation: string} | {role: string})\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof persons,\\n        ({name: string; age: number} & ({occupation: string} | {role: string}))[]\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        FirstArgument<typeof logPerson>,\\n        {name: string; age: number} & ({occupation: string} | {role: string})\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        ReturnType<typeof logPerson>,\\n        void\\n    >\\n>();\\n\";","export default \"/*\\n\\nIntro:\\n\\n    As we introduced \\\"type\\\" to both User and Admin\\n    it's now easier to distinguish between them.\\n    Once object type checking logic was extracted\\n    into separate functions isUser and isAdmin -\\n    logPerson function got new type errors.\\n\\nExercise:\\n\\n    Figure out how to help TypeScript understand types in\\n    this situation and apply necessary fixes.\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\nexport type Person = User | Admin;\\n\\nexport const persons: Person[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\\n    { type: 'user', name: 'Kate Müller', age: 23, occupation: 'Astronaut' },\\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\\n];\\n\\nexport function isAdmin(person: Person) {\\n    return person.type === 'admin';\\n}\\n\\nexport function isUser(person: Person) {\\n    return person.type === 'user';\\n}\\n\\nexport function logPerson(person: Person) {\\n    let additionalInformation: string = '';\\n    if (isAdmin(person)) {\\n        additionalInformation = person.role;\\n    }\\n    if (isUser(person)) {\\n        additionalInformation = person.occupation;\\n    }\\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\\n}\\n\\nconsole.log('Admins:');\\npersons.filter(isAdmin).forEach(logPerson);\\n\\nconsole.log();\\n\\nconsole.log('Users:');\\npersons.filter(isUser).forEach(logPerson);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\\n\";","export default \"/*\\n\\nIntro:\\n\\n    As we introduced \\\"type\\\" to both User and Admin\\n    it's now easier to distinguish between them.\\n    Once object type checking logic was extracted\\n    into separate functions isUser and isAdmin -\\n    logPerson function got new type errors.\\n\\nExercise:\\n\\n    Figure out how to help TypeScript understand types in\\n    this situation and apply necessary fixes.\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\nexport type Person = User | Admin;\\n\\nexport const persons: Person[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\\n    { type: 'user', name: 'Kate Müller', age: 23, occupation: 'Astronaut' },\\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\\n];\\n\\nexport function isAdmin(person: Person): person is Admin {\\n    return person.type === 'admin';\\n}\\n\\nexport function isUser(person: Person): person is User {\\n    return person.type === 'user';\\n}\\n\\nexport function logPerson(person: Person) {\\n    let additionalInformation: string = '';\\n    if (isAdmin(person)) {\\n        additionalInformation = person.role;\\n    }\\n    if (isUser(person)) {\\n        additionalInformation = person.occupation;\\n    }\\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\\n}\\n\\nconsole.log('Admins:');\\npersons.filter(isAdmin).forEach(logPerson);\\n\\nconsole.log();\\n\\nconsole.log('Users:');\\npersons.filter(isUser).forEach(logPerson);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\\n\";","export default \"import {IsTypeEqual, FirstArgument, typeAssert} from 'type-assertions';\\nimport {logPerson, isUser, isAdmin, Person, persons} from './index';\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        Person,\\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof persons,\\n        ({name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string}))[]\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        FirstArgument<typeof logPerson>,\\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        ReturnType<typeof logPerson>,\\n        void\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        FirstArgument<typeof isUser>,\\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\\n    >\\n>();\\ntypeAssert<\\n    IsTypeEqual<\\n        ReturnType<typeof isUser>,\\n        boolean\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        FirstArgument<typeof isAdmin>,\\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\\n    >\\n>();\\ntypeAssert<\\n    IsTypeEqual<\\n        ReturnType<typeof isAdmin>,\\n        boolean\\n    >\\n>();\\n\";","export default \"/*\\n\\nIntro:\\n\\n    Time to filter the data! In order to be flexible\\n    we filter users using a number of criteria and\\n    return only those matching all of the criteria.\\n    We don't need Admins yet, we only filter Users.\\n\\nExercise:\\n\\n    Without duplicating type structures, modify\\n    filterUsers function definition so that we can\\n    pass only those criteria which are needed,\\n    and not the whole User information as it is\\n    required now according to typing.\\n\\nHigher difficulty bonus exercise:\\n\\n    Exclude \\\"type\\\" from filter criterias.\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\nexport type Person = User | Admin;\\n\\nexport const persons: Person[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\\n    {\\n        type: 'admin',\\n        name: 'Jane Doe',\\n        age: 32,\\n        role: 'Administrator'\\n    },\\n    {\\n        type: 'user',\\n        name: 'Kate Müller',\\n        age: 23,\\n        occupation: 'Astronaut'\\n    },\\n    {\\n        type: 'admin',\\n        name: 'Bruce Willis',\\n        age: 64,\\n        role: 'World saver'\\n    },\\n    {\\n        type: 'user',\\n        name: 'Wilson',\\n        age: 23,\\n        occupation: 'Ball'\\n    },\\n    {\\n        type: 'admin',\\n        name: 'Agent Smith',\\n        age: 23,\\n        role: 'Administrator'\\n    }\\n];\\n\\nexport const isAdmin = (person: Person): person is Admin => person.type === 'admin';\\nexport const isUser = (person: Person): person is User => person.type === 'user';\\n\\nexport function logPerson(person: Person) {\\n    let additionalInformation = '';\\n    if (isAdmin(person)) {\\n        additionalInformation = person.role;\\n    }\\n    if (isUser(person)) {\\n        additionalInformation = person.occupation;\\n    }\\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\\n}\\n\\nexport function filterUsers(persons: Person[], criteria: User): User[] {\\n    return persons.filter(isUser).filter((user) => {\\n        const criteriaKeys = Object.keys(criteria) as (keyof User)[];\\n        return criteriaKeys.every((fieldName) => {\\n            return user[fieldName] === criteria[fieldName];\\n        });\\n    });\\n}\\n\\nconsole.log('Users of age 23:');\\n\\nfilterUsers(\\n    persons,\\n    {\\n        age: 23\\n    }\\n).forEach(logPerson);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/utility-types.html\\n// https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#predefined-conditional-types\\n\";","export default \"/*\\n\\nIntro:\\n\\n    Time to filter the data! In order to be flexible\\n    we filter users using a number of criteria and\\n    return only those matching all of the criteria.\\n    We don't need Admins yet, we only filter Users.\\n\\nExercise:\\n\\n    Without duplicating type structures, modify\\n    filterUsers function definition so that we can\\n    pass only those criteria which are needed,\\n    and not the whole User information as it is\\n    required now according to typing.\\n\\nHigher difficulty bonus exercise:\\n\\n    Exclude \\\"type\\\" from filter criterias.\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\nexport type Person = User | Admin;\\n\\nexport const persons: Person[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\\n    {\\n        type: 'admin',\\n        name: 'Jane Doe',\\n        age: 32,\\n        role: 'Administrator'\\n    },\\n    {\\n        type: 'user',\\n        name: 'Kate Müller',\\n        age: 23,\\n        occupation: 'Astronaut'\\n    },\\n    {\\n        type: 'admin',\\n        name: 'Bruce Willis',\\n        age: 64,\\n        role: 'World saver'\\n    },\\n    {\\n        type: 'user',\\n        name: 'Wilson',\\n        age: 23,\\n        occupation: 'Ball'\\n    },\\n    {\\n        type: 'admin',\\n        name: 'Agent Smith',\\n        age: 23,\\n        role: 'Administrator'\\n    }\\n];\\n\\nexport const isAdmin = (person: Person): person is Admin => person.type === 'admin';\\nexport const isUser = (person: Person): person is User => person.type === 'user';\\n\\nexport function logPerson(person: Person) {\\n    let additionalInformation = '';\\n    if (isAdmin(person)) {\\n        additionalInformation = person.role;\\n    }\\n    if (isUser(person)) {\\n        additionalInformation = person.occupation;\\n    }\\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\\n}\\n\\nexport function filterUsers(persons: Person[], criteria: Partial<Omit<User, 'type'>>): User[] {\\n    return persons.filter(isUser).filter((user) => {\\n        const criteriaKeys = Object.keys(criteria) as (keyof Omit<User, 'type'>)[];\\n        return criteriaKeys.every((fieldName) => {\\n            return user[fieldName] === criteria[fieldName];\\n        });\\n    });\\n}\\n\\nconsole.log('Users of age 23:');\\n\\nfilterUsers(\\n    persons,\\n    {\\n        age: 23\\n    }\\n).forEach(logPerson);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/utility-types.html\\n// https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#predefined-conditional-types\\n\";","export default \"import {IsTypeEqual, IsTypeAssignable, Not, FirstArgument, SecondArgument, typeAssert} from 'type-assertions';\\nimport {logPerson, isUser, isAdmin, Person, persons, filterUsers} from './index';\\n\\ntypeAssert<\\n    IsTypeAssignable<\\n        SecondArgument<typeof filterUsers>,\\n        {name: string}\\n    >\\n>();\\ntypeAssert<\\n    IsTypeAssignable<\\n        SecondArgument<typeof filterUsers>,\\n        {age: number}\\n    >\\n>();\\ntypeAssert<\\n    IsTypeAssignable<\\n        SecondArgument<typeof filterUsers>,\\n        {name: string; age: number}\\n    >\\n>();\\ntypeAssert<\\n    IsTypeAssignable<\\n        SecondArgument<typeof filterUsers>,\\n        {occupation: string}\\n    >\\n>();\\ntypeAssert<\\n    IsTypeAssignable<\\n        SecondArgument<typeof filterUsers>,\\n        {name: string; age: number; occupation: string}\\n    >\\n>();\\ntypeAssert<\\n    Not<\\n        IsTypeAssignable<\\n            SecondArgument<typeof filterUsers>,\\n            {hello: 'world'}\\n        >\\n    >\\n>();\\ntypeAssert<\\n    IsTypeEqual<\\n        ReturnType<typeof filterUsers>,\\n        {type: 'user'; name: string; age: number; occupation: string}[]\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        Person,\\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof persons,\\n        ({name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string}))[]\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        FirstArgument<typeof logPerson>,\\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        ReturnType<typeof logPerson>,\\n        void\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        FirstArgument<typeof isUser>,\\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\\n    >\\n>();\\ntypeAssert<\\n    IsTypeEqual<\\n        ReturnType<typeof isUser>,\\n        boolean\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        FirstArgument<typeof isAdmin>,\\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\\n    >\\n>();\\ntypeAssert<\\n    IsTypeEqual<\\n        ReturnType<typeof isAdmin>,\\n        boolean\\n    >\\n>();\\n\";","export default \"/*\\n\\nIntro:\\n\\n    Filtering requirements have grown. We need to be\\n    able to filter any kind of Persons.\\n\\nExercise:\\n\\n    Fix typing for the filterPersons so that it can filter users\\n    and return User[] when personType='user' and return Admin[]\\n    when personType='admin'. Also filterPersons should accept\\n    partial User/Admin type according to the personType.\\n    `criteria` argument should behave according to the\\n    `personType` argument value. `type` field is not allowed in\\n    the `criteria` field.\\n\\nHigher difficulty bonus exercise:\\n\\n    Implement a function `getObjectKeys()` which returns more\\n    convenient result for any argument given, so that you don't\\n    need to cast it.\\n\\n    let criteriaKeys = Object.keys(criteria) as (keyof User)[];\\n    -->\\n    let criteriaKeys = getObjectKeys(criteria);\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\nexport type Person = User | Admin;\\n\\nexport const persons: Person[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\\n    { type: 'user', name: 'Kate Müller', age: 23, occupation: 'Astronaut' },\\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\\n    { type: 'user', name: 'Wilson', age: 23, occupation: 'Ball' },\\n    { type: 'admin', name: 'Agent Smith', age: 23, role: 'Anti-virus engineer' }\\n];\\n\\nexport function logPerson(person: Person) {\\n    console.log(\\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\\n    );\\n}\\n\\nexport function filterPersons(persons: Person[], personType: string, criteria: unknown): unknown[] {\\n    return persons\\n        .filter((person) => person.type === personType)\\n        .filter((person) => {\\n            let criteriaKeys = Object.keys(criteria) as (keyof Person)[];\\n            return criteriaKeys.every((fieldName) => {\\n                return person[fieldName] === criteria[fieldName];\\n            });\\n        });\\n}\\n\\nexport const usersOfAge23 = filterPersons(persons, 'user', { age: 23 });\\nexport const adminsOfAge23 = filterPersons(persons, 'admin', { age: 23 });\\n\\nconsole.log('Users of age 23:');\\nusersOfAge23.forEach(logPerson);\\n\\nconsole.log();\\n\\nconsole.log('Admins of age 23:');\\nadminsOfAge23.forEach(logPerson);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads\\n\";","export default \"/*\\n\\nIntro:\\n\\n    Filtering requirements have grown. We need to be\\n    able to filter any kind of Persons.\\n\\nExercise:\\n\\n    Fix typing for the filterPersons so that it can filter users\\n    and return User[] when personType='user' and return Admin[]\\n    when personType='admin'. Also filterPersons should accept\\n    partial User/Admin type according to the personType.\\n    `criteria` argument should behave according to the\\n    `personType` argument value. `type` field is not allowed in\\n    the `criteria` field.\\n\\nHigher difficulty bonus exercise:\\n\\n    Implement a function `getObjectKeys()` which returns more\\n    convenient result for any argument given, so that you don't\\n    need to cast it.\\n\\n    let criteriaKeys = Object.keys(criteria) as (keyof User)[];\\n    -->\\n    let criteriaKeys = getObjectKeys(criteria);\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\nexport type Person = User | Admin;\\n\\nexport const persons: Person[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\\n    { type: 'user', name: 'Kate Müller', age: 23, occupation: 'Astronaut' },\\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\\n    { type: 'user', name: 'Wilson', age: 23, occupation: 'Ball' },\\n    { type: 'admin', name: 'Agent Smith', age: 23, role: 'Anti-virus engineer' }\\n];\\n\\nexport function logPerson(person: Person) {\\n    console.log(\\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\\n    );\\n}\\n\\nconst getObjectKeys = <T>(obj: T) => Object.keys(obj) as (keyof T)[];\\n\\nexport function filterPersons(persons: Person[], personType: 'user', criteria: Partial<Omit<User, 'type'>>): User[];\\nexport function filterPersons(persons: Person[], personType: 'admin', criteria: Partial<Omit<Admin, 'type'>>): Admin[];\\nexport function filterPersons(persons: Person[], personType: string, criteria: Partial<Person>): Person[] {\\n    return persons\\n        .filter((person) => person.type === personType)\\n        .filter((person) => {\\n            let criteriaKeys = getObjectKeys(criteria);\\n            return criteriaKeys.every((fieldName) => {\\n                return person[fieldName] === criteria[fieldName];\\n            });\\n        });\\n}\\n\\nexport const usersOfAge23 = filterPersons(persons, 'user', { age: 23 });\\nexport const adminsOfAge23 = filterPersons(persons, 'admin', { age: 23 });\\n\\nconsole.log('Users of age 23:');\\nusersOfAge23.forEach(logPerson);\\n\\nconsole.log();\\n\\nconsole.log('Admins of age 23:');\\nadminsOfAge23.forEach(logPerson);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads\\n\";","export default \"import {IsTypeEqual, FirstArgument, typeAssert} from 'type-assertions';\\nimport {logPerson, Person, persons, filterPersons} from './index';\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        FirstArgument<typeof filterPersons>,\\n        ({name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string}))[]\\n    >\\n>();\\n\\nconst filtered1 = filterPersons(persons, 'user', {});\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof filtered1,\\n        {type: 'user'; name: string; age: number; occupation: string}[]\\n    >\\n>();\\n\\nconst filtered2 = filterPersons(persons, 'user', {name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep'});\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof filtered2,\\n        {type: 'user'; name: string; age: number; occupation: string}[]\\n    >\\n>();\\n\\nconst filtered3 = filterPersons(persons, 'admin', {});\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof filtered3,\\n        {type: 'admin'; name: string; age: number; role: string}[]\\n    >\\n>();\\n\\nconst filtered4 = filterPersons(persons, 'admin', {name: 'Jane Doe', age: 32, role: 'Administrator'});\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof filtered4,\\n        {type: 'admin'; name: string; age: number; role: string}[]\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        Person,\\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof persons,\\n        ({name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string}))[]\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        FirstArgument<typeof logPerson>,\\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        ReturnType<typeof logPerson>,\\n        void\\n    >\\n>();\\n\";","export default \"/*\\n\\nIntro:\\n\\n    Filtering was completely removed from the project.\\n    It turned out that this feature was just not needed\\n    for the end-user and we spent a lot of time just because\\n    our office manager told us to do so. Next time we should\\n    instead listen to the product management.\\n\\n    Anyway we have a new plan. CEO's friend Nick told us\\n    that if we randomly swap user names from time to time\\n    in the community, it would be very funny and the project\\n    would definitely succeed!\\n\\nExercise:\\n\\n    Implement swap which receives 2 persons and returns them in\\n    the reverse order. The function itself is already\\n    there, actually. We just need to provide it with proper types.\\n    Also this function shouldn't necessarily be limited to just\\n    Person types, lets type it so that it works with any two types\\n    specified.\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\nfunction logUser(user: User) {\\n    const pos = users.indexOf(user) + 1;\\n    console.log(` - #${pos} User: ${user.name}, ${user.age}, ${user.occupation}`);\\n}\\n\\nfunction logAdmin(admin: Admin) {\\n    const pos = admins.indexOf(admin) + 1;\\n    console.log(` - #${pos} Admin: ${admin.name}, ${admin.age}, ${admin.role}`);\\n}\\n\\nconst admins: Admin[] = [\\n    {\\n        type: 'admin',\\n        name: 'Will Bruces',\\n        age: 30,\\n        role: 'Overseer'\\n    },\\n    {\\n        type: 'admin',\\n        name: 'Steve',\\n        age: 40,\\n        role: 'Steve'\\n    }\\n];\\n\\nconst users: User[] = [\\n    {\\n        type: 'user',\\n        name: 'Moses',\\n        age: 70,\\n        occupation: 'Desert guide'\\n    },\\n    {\\n        type: 'user',\\n        name: 'Superman',\\n        age: 28,\\n        occupation: 'Ordinary person'\\n    }\\n];\\n\\nexport function swap(v1, v2) {\\n    return [v2, v1];\\n}\\n\\nfunction test1() {\\n    console.log('test1:');\\n    const [secondUser, firstAdmin] = swap(admins[0], users[1]);\\n    logUser(secondUser);\\n    logAdmin(firstAdmin);\\n}\\n\\nfunction test2() {\\n    console.log('test2:');\\n    const [secondAdmin, firstUser] = swap(users[0], admins[1]);\\n    logAdmin(secondAdmin);\\n    logUser(firstUser);\\n}\\n\\nfunction test3() {\\n    console.log('test3:');\\n    const [secondUser, firstUser] = swap(users[0], users[1]);\\n    logUser(secondUser);\\n    logUser(firstUser);\\n}\\n\\nfunction test4() {\\n    console.log('test4:');\\n    const [firstAdmin, secondAdmin] = swap(admins[1], admins[0]);\\n    logAdmin(firstAdmin);\\n    logAdmin(secondAdmin);\\n}\\n\\nfunction test5() {\\n    console.log('test5:');\\n    const [stringValue, numericValue] = swap(123, 'Hello World');\\n    console.log(` - String: ${stringValue}`);\\n    console.log(` - Numeric: ${numericValue}`);\\n}\\n\\n[test1, test2, test3, test4, test5].forEach((test) => test());\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/2/everyday-types.html\\n// https://www.typescriptlang.org/docs/handbook/2/generics.html\\n\";","export default \"/*\\n\\nIntro:\\n\\n    Filtering was completely removed from the project.\\n    It turned out that this feature was just not needed\\n    for the end-user and we spent a lot of time just because\\n    our office manager told us to do so. Next time we should\\n    instead listen to the product management.\\n\\n    Anyway we have a new plan. CEO's friend Nick told us\\n    that if we randomly swap user names from time to time\\n    in the community, it would be very funny and the project\\n    would definitely succeed!\\n\\nExercise:\\n\\n    Implement swap which receives 2 persons and returns them in\\n    the reverse order. The function itself is already\\n    there, actually. We just need to provide it with proper types.\\n    Also this function shouldn't necessarily be limited to just\\n    Person types, lets type it so that it works with any two types\\n    specified.\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\nfunction logUser(user: User) {\\n    const pos = users.indexOf(user) + 1;\\n    console.log(` - #${pos} User: ${user.name}, ${user.age}, ${user.occupation}`);\\n}\\n\\nfunction logAdmin(admin: Admin) {\\n    const pos = admins.indexOf(admin) + 1;\\n    console.log(` - #${pos} Admin: ${admin.name}, ${admin.age}, ${admin.role}`);\\n}\\n\\nconst admins: Admin[] = [\\n    {\\n        type: 'admin',\\n        name: 'Will Bruces',\\n        age: 30,\\n        role: 'Overseer'\\n    },\\n    {\\n        type: 'admin',\\n        name: 'Steve',\\n        age: 40,\\n        role: 'Steve'\\n    }\\n];\\n\\nconst users: User[] = [\\n    {\\n        type: 'user',\\n        name: 'Moses',\\n        age: 70,\\n        occupation: 'Desert guide'\\n    },\\n    {\\n        type: 'user',\\n        name: 'Superman',\\n        age: 28,\\n        occupation: 'Ordinary person'\\n    }\\n];\\n\\nexport function swap<T1, T2>(v1: T1, v2: T2): [T2, T1] {\\n    return [v2, v1];\\n}\\n\\nfunction test1() {\\n    console.log('test1:');\\n    const [secondUser, firstAdmin] = swap(admins[0], users[1]);\\n    logUser(secondUser);\\n    logAdmin(firstAdmin);\\n}\\n\\nfunction test2() {\\n    console.log('test2:');\\n    const [secondAdmin, firstUser] = swap(users[0], admins[1]);\\n    logAdmin(secondAdmin);\\n    logUser(firstUser);\\n}\\n\\nfunction test3() {\\n    console.log('test3:');\\n    const [secondUser, firstUser] = swap(users[0], users[1]);\\n    logUser(secondUser);\\n    logUser(firstUser);\\n}\\n\\nfunction test4() {\\n    console.log('test4:');\\n    const [firstAdmin, secondAdmin] = swap(admins[1], admins[0]);\\n    logAdmin(firstAdmin);\\n    logAdmin(secondAdmin);\\n}\\n\\nfunction test5() {\\n    console.log('test5:');\\n    const [stringValue, numericValue] = swap(123, 'Hello World');\\n    console.log(` - String: ${stringValue}`);\\n    console.log(` - Numeric: ${numericValue}`);\\n}\\n\\n[test1, test2, test3, test4, test5].forEach((test) => test());\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/2/everyday-types.html\\n// https://www.typescriptlang.org/docs/handbook/2/generics.html\\n\";","export default \"import {IsTypeEqual, typeAssert} from 'type-assertions';\\nimport {swap} from './index';\\n\\nconst pair1 = swap(123, 'hello');\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof pair1,\\n        [string, number]\\n    >\\n>();\\n\\nconst pair2 = swap(true as const, false as const);\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof pair2,\\n        [false, true]\\n    >\\n>();\\n\\nconst pair3 = swap(null, undefined);\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof pair3,\\n        [undefined, null]\\n    >\\n>();\\n\";","export default \"/*\\n\\nIntro:\\n\\n    Project grew and we ended up in a situation with\\n    some users starting to have more influence.\\n    Therefore, we decided to create a new person type\\n    called PowerUser which is supposed to combine\\n    everything User and Admin have.\\n\\nExercise:\\n\\n    Define type PowerUser which should have all fields\\n    from both User and Admin (except for type),\\n    and also have type 'powerUser' without duplicating\\n    all the fields in the code.\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\ntype PowerUser = unknown;\\n\\nexport type Person = User | Admin | PowerUser;\\n\\nexport const persons: Person[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\\n    { type: 'user', name: 'Kate Müller', age: 23, occupation: 'Astronaut' },\\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\\n    {\\n        type: 'powerUser',\\n        name: 'Nikki Stone',\\n        age: 45,\\n        role: 'Moderator',\\n        occupation: 'Cat groomer'\\n    }\\n];\\n\\nfunction isAdmin(person: Person): person is Admin {\\n    return person.type === 'admin';\\n}\\n\\nfunction isUser(person: Person): person is User {\\n    return person.type === 'user';\\n}\\n\\nfunction isPowerUser(person: Person): person is PowerUser {\\n    return person.type === 'powerUser';\\n}\\n\\nexport function logPerson(person: Person) {\\n    let additionalInformation: string = '';\\n    if (isAdmin(person)) {\\n        additionalInformation = person.role;\\n    }\\n    if (isUser(person)) {\\n        additionalInformation = person.occupation;\\n    }\\n    if (isPowerUser(person)) {\\n        additionalInformation = `${person.role}, ${person.occupation}`;\\n    }\\n    console.log(`${person.name}, ${person.age}, ${additionalInformation}`);\\n}\\n\\nconsole.log('Admins:');\\npersons.filter(isAdmin).forEach(logPerson);\\n\\nconsole.log();\\n\\nconsole.log('Users:');\\npersons.filter(isUser).forEach(logPerson);\\n\\nconsole.log();\\n\\nconsole.log('Power users:');\\npersons.filter(isPowerUser).forEach(logPerson);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/utility-types.html\\n\";","export default \"/*\\n\\nIntro:\\n\\n    Project grew and we ended up in a situation with\\n    some users starting to have more influence.\\n    Therefore, we decided to create a new person type\\n    called PowerUser which is supposed to combine\\n    everything User and Admin have.\\n\\nExercise:\\n\\n    Define type PowerUser which should have all fields\\n    from both User and Admin (except for type),\\n    and also have type 'powerUser' without duplicating\\n    all the fields in the code.\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\ntype PowerUser = Omit<User, 'type'> & Omit<Admin, 'type'> & {\\n    type: 'powerUser'\\n};\\n\\nexport type Person = User | Admin | PowerUser;\\n\\nexport const persons: Person[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\\n    { type: 'user', name: 'Kate Müller', age: 23, occupation: 'Astronaut' },\\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\\n    {\\n        type: 'powerUser',\\n        name: 'Nikki Stone',\\n        age: 45,\\n        role: 'Moderator',\\n        occupation: 'Cat groomer'\\n    }\\n];\\n\\nfunction isAdmin(person: Person): person is Admin {\\n    return person.type === 'admin';\\n}\\n\\nfunction isUser(person: Person): person is User {\\n    return person.type === 'user';\\n}\\n\\nfunction isPowerUser(person: Person): person is PowerUser {\\n    return person.type === 'powerUser';\\n}\\n\\nexport function logPerson(person: Person) {\\n    let additionalInformation: string = '';\\n    if (isAdmin(person)) {\\n        additionalInformation = person.role;\\n    }\\n    if (isUser(person)) {\\n        additionalInformation = person.occupation;\\n    }\\n    if (isPowerUser(person)) {\\n        additionalInformation = `${person.role}, ${person.occupation}`;\\n    }\\n    console.log(`${person.name}, ${person.age}, ${additionalInformation}`);\\n}\\n\\nconsole.log('Admins:');\\npersons.filter(isAdmin).forEach(logPerson);\\n\\nconsole.log();\\n\\nconsole.log('Users:');\\npersons.filter(isUser).forEach(logPerson);\\n\\nconsole.log();\\n\\nconsole.log('Power users:');\\npersons.filter(isPowerUser).forEach(logPerson);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/utility-types.html\\n\";","export default \"import {IsTypeEqual, FirstArgument, typeAssert} from 'type-assertions';\\nimport {logPerson, Person, persons} from './index';\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        Person,\\n        {name: string; age: number} & (\\n            | {type: 'user'; occupation: string}\\n            | {type: 'admin'; role: string}\\n            | {type: 'powerUser'; occupation: string; role: string}\\n        )\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof persons,\\n        ({name: string; age: number} & (\\n            | {type: 'user'; occupation: string}\\n            | {type: 'admin'; role: string}\\n            | {type: 'powerUser'; occupation: string; role: string}\\n        ))[]\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        FirstArgument<typeof logPerson>,\\n        {name: string; age: number} & (\\n            | {type: 'user'; occupation: string}\\n            | {type: 'admin'; role: string}\\n            | {type: 'powerUser'; occupation: string; role: string}\\n        )\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        ReturnType<typeof logPerson>,\\n        void\\n    >\\n>();\\n\";","export default \"/*\\n\\nIntro:\\n\\n    PowerUsers idea was bad. Once those users got\\n    extended permissions, they started bullying others\\n    and we lost a lot of great users.\\n    As a response we spent all the remaining money\\n    on the marketing and got even more users.\\n    We need to start preparing to move everything to a\\n    real database. For now we just do some mocks.\\n\\n    The server API format was decided to be the following:\\n\\n    In case of success: { status: 'success', data: RESPONSE_DATA }\\n    In case of error: { status: 'error', error: ERROR_MESSAGE }\\n\\n    The API engineer started creating types for this API and\\n    quickly figured out that the amount of types needed to be\\n    created is too big.\\n\\nExercise:\\n\\n    Remove UsersApiResponse and AdminsApiResponse types\\n    and use generic type ApiResponse in order to specify API\\n    response formats for each of the functions.\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\ntype Person = User | Admin;\\n\\nconst admins: Admin[] = [\\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\\n];\\n\\nconst users: User[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\\n    { type: 'user', name: 'Kate Müller', age: 23, occupation: 'Astronaut' }\\n];\\n\\nexport type ApiResponse<T> = unknown;\\n\\ntype AdminsApiResponse = (\\n    {\\n        status: 'success';\\n        data: Admin[];\\n    } |\\n    {\\n        status: 'error';\\n        error: string;\\n    }\\n);\\n\\nexport function requestAdmins(callback: (response: AdminsApiResponse) => void) {\\n    callback({\\n        status: 'success',\\n        data: admins\\n    });\\n}\\n\\ntype UsersApiResponse = (\\n    {\\n        status: 'success';\\n        data: User[];\\n    } |\\n    {\\n        status: 'error';\\n        error: string;\\n    }\\n);\\n\\nexport function requestUsers(callback: (response: UsersApiResponse) => void) {\\n    callback({\\n        status: 'success',\\n        data: users\\n    });\\n}\\n\\nexport function requestCurrentServerTime(callback: (response: unknown) => void) {\\n    callback({\\n        status: 'success',\\n        data: Date.now()\\n    });\\n}\\n\\nexport function requestCoffeeMachineQueueLength(callback: (response: unknown) => void) {\\n    callback({\\n        status: 'error',\\n        error: 'Numeric value has exceeded Number.MAX_SAFE_INTEGER.'\\n    });\\n}\\n\\nfunction logPerson(person: Person) {\\n    console.log(\\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\\n    );\\n}\\n\\nfunction startTheApp(callback: (error: Error | null) => void) {\\n    requestAdmins((adminsResponse) => {\\n        console.log('Admins:');\\n        if (adminsResponse.status === 'success') {\\n            adminsResponse.data.forEach(logPerson);\\n        } else {\\n            return callback(new Error(adminsResponse.error));\\n        }\\n\\n        console.log();\\n\\n        requestUsers((usersResponse) => {\\n            console.log('Users:');\\n            if (usersResponse.status === 'success') {\\n                usersResponse.data.forEach(logPerson);\\n            } else {\\n                return callback(new Error(usersResponse.error));\\n            }\\n\\n            console.log();\\n\\n            requestCurrentServerTime((serverTimeResponse) => {\\n                console.log('Server time:');\\n                if (serverTimeResponse.status === 'success') {\\n                    console.log(`   ${new Date(serverTimeResponse.data).toLocaleString()}`);\\n                } else {\\n                    return callback(new Error(serverTimeResponse.error));\\n                }\\n\\n                console.log();\\n\\n                requestCoffeeMachineQueueLength((coffeeMachineQueueLengthResponse) => {\\n                    console.log('Coffee machine queue length:');\\n                    if (coffeeMachineQueueLengthResponse.status === 'success') {\\n                        console.log(`   ${coffeeMachineQueueLengthResponse.data}`);\\n                    } else {\\n                        return callback(new Error(coffeeMachineQueueLengthResponse.error));\\n                    }\\n\\n                    callback(null);\\n                });\\n            });\\n        });\\n    });\\n}\\n\\nstartTheApp((e: Error | null) => {\\n    console.log();\\n    if (e) {\\n        console.log(`Error: \\\"${e.message}\\\", but it's fine, sometimes errors are inevitable.`)\\n    } else {\\n        console.log('Success!');\\n    }\\n});\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/2/generics.html\\n\";","export default \"/*\\n\\nIntro:\\n\\n    PowerUsers idea was bad. Once those users got\\n    extended permissions, they started bullying others\\n    and we lost a lot of great users.\\n    As a response we spent all the remaining money\\n    on the marketing and got even more users.\\n    We need to start preparing to move everything to a\\n    real database. For now we just do some mocks.\\n\\n    The server API format was decided to be the following:\\n\\n    In case of success: { status: 'success', data: RESPONSE_DATA }\\n    In case of error: { status: 'error', error: ERROR_MESSAGE }\\n\\n    The API engineer started creating types for this API and\\n    quickly figured out that the amount of types needed to be\\n    created is too big.\\n\\nExercise:\\n\\n    Remove UsersApiResponse and AdminsApiResponse types\\n    and use generic type ApiResponse in order to specify API\\n    response formats for each of the functions.\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\ntype Person = User | Admin;\\n\\nconst admins: Admin[] = [\\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\\n];\\n\\nconst users: User[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\\n    { type: 'user', name: 'Kate Müller', age: 23, occupation: 'Astronaut' }\\n];\\n\\nexport type ApiResponse<T> =\\n    | { status: 'success'; data: T; }\\n    | { status: 'error'; error: string; };\\n\\nexport function requestAdmins(callback: (response: ApiResponse<Admin[]>) => void) {\\n    callback({\\n        status: 'success',\\n        data: admins\\n    });\\n}\\n\\nexport function requestUsers(callback: (response: ApiResponse<User[]>) => void) {\\n    callback({\\n        status: 'success',\\n        data: users\\n    });\\n}\\n\\nexport function requestCurrentServerTime(callback: (response: ApiResponse<number>) => void) {\\n    callback({\\n        status: 'success',\\n        data: Date.now()\\n    });\\n}\\n\\nexport function requestCoffeeMachineQueueLength(callback: (response: ApiResponse<number>) => void) {\\n    callback({\\n        status: 'error',\\n        error: 'Numeric value has exceeded Number.MAX_SAFE_INTEGER.'\\n    });\\n}\\n\\nfunction logPerson(person: Person) {\\n    console.log(\\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\\n    );\\n}\\n\\nfunction startTheApp(callback: (error: Error | null) => void) {\\n    requestAdmins((adminsResponse) => {\\n        console.log('Admins:');\\n        if (adminsResponse.status === 'success') {\\n            adminsResponse.data.forEach(logPerson);\\n        } else {\\n            return callback(new Error(adminsResponse.error));\\n        }\\n\\n        console.log();\\n\\n        requestUsers((usersResponse) => {\\n            console.log('Users:');\\n            if (usersResponse.status === 'success') {\\n                usersResponse.data.forEach(logPerson);\\n            } else {\\n                return callback(new Error(usersResponse.error));\\n            }\\n\\n            console.log();\\n\\n            requestCurrentServerTime((serverTimeResponse) => {\\n                console.log('Server time:');\\n                if (serverTimeResponse.status === 'success') {\\n                    console.log(`   ${new Date(serverTimeResponse.data).toLocaleString()}`);\\n                } else {\\n                    return callback(new Error(serverTimeResponse.error));\\n                }\\n\\n                console.log();\\n\\n                requestCoffeeMachineQueueLength((coffeeMachineQueueLengthResponse) => {\\n                    console.log('Coffee machine queue length:');\\n                    if (coffeeMachineQueueLengthResponse.status === 'success') {\\n                        console.log(`   ${coffeeMachineQueueLengthResponse.data}`);\\n                    } else {\\n                        return callback(new Error(coffeeMachineQueueLengthResponse.error));\\n                    }\\n\\n                    callback(null);\\n                });\\n            });\\n        });\\n    });\\n}\\n\\nstartTheApp((e: Error | null) => {\\n    console.log();\\n    if (e) {\\n        console.log(`Error: \\\"${e.message}\\\", but it's fine, sometimes errors are inevitable.`)\\n    } else {\\n        console.log('Success!');\\n    }\\n});\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/2/generics.html\\n\";","export default \"import {IsTypeEqual, IsTypeAssignable, Not, typeAssert} from 'type-assertions';\\nimport {\\n    ApiResponse,\\n    requestAdmins,\\n    requestUsers,\\n    requestCoffeeMachineQueueLength,\\n    requestCurrentServerTime\\n} from './index';\\n\\ntypeAssert<\\n    IsTypeAssignable<\\n        ApiResponse<number>,\\n        {status: 'success'; data: number}\\n    >\\n>();\\ntypeAssert<\\n    IsTypeAssignable<\\n        ApiResponse<number>,\\n        {status: 'error'; error: string}\\n    >\\n>();\\ntypeAssert<\\n    IsTypeAssignable<\\n        ApiResponse<boolean>,\\n        {status: 'success'; data: boolean}\\n    >\\n>();\\ntypeAssert<\\n    IsTypeAssignable<\\n        ApiResponse<boolean>,\\n        {status: 'error'; error: string}\\n    >\\n>();\\ntypeAssert<\\n    Not<\\n        IsTypeEqual<\\n            ApiResponse<number>,\\n            unknown\\n        >\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof requestAdmins,\\n        (\\n            callback: (\\n                response: {\\n                    status: 'success';\\n                    data: {\\n                            type: 'admin';\\n                            name: string;\\n                            age: number;\\n                            role: string;\\n                    }[]\\n                } | {\\n                    status: 'error';\\n                    error: string;\\n                }\\n            ) => void\\n        ) => void\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof requestUsers,\\n        (\\n            callback: (\\n                response: {\\n                    status: 'success';\\n                    data: {\\n                            type: 'user';\\n                            name: string;\\n                            age: number;\\n                            occupation: string;\\n                    }[]\\n                } | {\\n                    status: 'error';\\n                    error: string;\\n                }\\n            ) => void\\n        ) => void\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof requestCurrentServerTime,\\n        (\\n            callback: (\\n                response: {\\n                    status: 'success';\\n                    data: number;\\n                } | {\\n                    status: 'error';\\n                    error: string;\\n                }\\n            ) => void\\n        ) => void\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof requestCoffeeMachineQueueLength,\\n        (\\n            callback: (\\n                response: {\\n                    status: 'success';\\n                    data: number;\\n                } | {\\n                    status: 'error';\\n                    error: string;\\n                }\\n            ) => void\\n        ) => void\\n    >\\n>();\\n\";","export default \"/*\\n\\nIntro:\\n\\n    We have asynchronous functions now, advanced technology.\\n    This makes us a tech startup officially now.\\n    But one of the consultants spoiled our dreams about\\n    inevitable future IT leadership.\\n    He said that callback-based asynchronicity is not\\n    popular anymore and everyone should use Promises.\\n    He promised that if we switch to Promises, this would\\n    bring promising results.\\n\\nExercise:\\n\\n    We don't want to reimplement all the data-requesting\\n    functions. Let's decorate the old callback-based\\n    functions with the new Promise-compatible result.\\n    The final function should return a Promise which\\n    would resolve with the final data directly\\n    (i.e. users or admins) or would reject with an error\\n    (or type Error).\\n\\n    The function should be named promisify.\\n\\nHigher difficulty bonus exercise:\\n\\n    Create a function promisifyAll which accepts an object\\n    with functions and returns a new object where each of\\n    the function is promisified.\\n\\n    Rewrite api creation accordingly:\\n\\n        const api = promisifyAll(oldApi);\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\ntype Person = User | Admin;\\n\\nconst admins: Admin[] = [\\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\\n];\\n\\nconst users: User[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\\n    { type: 'user', name: 'Kate Müller', age: 23, occupation: 'Astronaut' }\\n];\\n\\nexport type ApiResponse<T> = (\\n    {\\n        status: 'success';\\n        data: T;\\n    } |\\n    {\\n        status: 'error';\\n        error: string;\\n    }\\n);\\n\\nexport function promisify(arg: unknown): unknown {\\n    return null;\\n}\\n\\nconst oldApi = {\\n    requestAdmins(callback: (response: ApiResponse<Admin[]>) => void) {\\n        callback({\\n            status: 'success',\\n            data: admins\\n        });\\n    },\\n    requestUsers(callback: (response: ApiResponse<User[]>) => void) {\\n        callback({\\n            status: 'success',\\n            data: users\\n        });\\n    },\\n    requestCurrentServerTime(callback: (response: ApiResponse<number>) => void) {\\n        callback({\\n            status: 'success',\\n            data: Date.now()\\n        });\\n    },\\n    requestCoffeeMachineQueueLength(callback: (response: ApiResponse<number>) => void) {\\n        callback({\\n            status: 'error',\\n            error: 'Numeric value has exceeded Number.MAX_SAFE_INTEGER.'\\n        });\\n    }\\n};\\n\\nexport const api = {\\n    requestAdmins: promisify(oldApi.requestAdmins),\\n    requestUsers: promisify(oldApi.requestUsers),\\n    requestCurrentServerTime: promisify(oldApi.requestCurrentServerTime),\\n    requestCoffeeMachineQueueLength: promisify(oldApi.requestCoffeeMachineQueueLength)\\n};\\n\\nfunction logPerson(person: Person) {\\n    console.log(\\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\\n    );\\n}\\n\\nasync function startTheApp() {\\n    console.log('Admins:');\\n    (await api.requestAdmins()).forEach(logPerson);\\n    console.log();\\n\\n    console.log('Users:');\\n    (await api.requestUsers()).forEach(logPerson);\\n    console.log();\\n\\n    console.log('Server time:');\\n    console.log(`   ${new Date(await api.requestCurrentServerTime()).toLocaleString()}`);\\n    console.log();\\n\\n    console.log('Coffee machine queue length:');\\n    console.log(`   ${await api.requestCoffeeMachineQueueLength()}`);\\n}\\n\\nstartTheApp().then(\\n    () => {\\n        console.log('Success!');\\n    },\\n    (e: Error) => {\\n        console.log(`Error: \\\"${e.message}\\\", but it's fine, sometimes errors are inevitable.`);\\n    }\\n);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/2/generics.html\\n\";","export default \"/*\\n\\nIntro:\\n\\n    We have asynchronous functions now, advanced technology.\\n    This makes us a tech startup officially now.\\n    But one of the consultants spoiled our dreams about\\n    inevitable future IT leadership.\\n    He said that callback-based asynchronicity is not\\n    popular anymore and everyone should use Promises.\\n    He promised that if we switch to Promises, this would\\n    bring promising results.\\n\\nExercise:\\n\\n    We don't want to reimplement all the data-requesting\\n    functions. Let's decorate the old callback-based\\n    functions with the new Promise-compatible result.\\n    The final function should return a Promise which\\n    would resolve with the final data directly\\n    (i.e. users or admins) or would reject with an error\\n    (or type Error).\\n\\n    The function should be named promisify.\\n\\nHigher difficulty bonus exercise:\\n\\n    Create a function promisifyAll which accepts an object\\n    with functions and returns a new object where each of\\n    the function is promisified.\\n\\n    Rewrite api creation accordingly:\\n\\n        const api = promisifyAll(oldApi);\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\ntype Person = User | Admin;\\n\\nconst admins: Admin[] = [\\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\\n];\\n\\nconst users: User[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\\n    { type: 'user', name: 'Kate Müller', age: 23, occupation: 'Astronaut' }\\n];\\n\\nexport type ApiResponse<T> = (\\n    {\\n        status: 'success';\\n        data: T;\\n    } |\\n    {\\n        status: 'error';\\n        error: string;\\n    }\\n);\\n\\ntype CallbackBasedAsyncFunction<T> = (callback: (response: ApiResponse<T>) => void) => void;\\ntype PromiseBasedAsyncFunction<T> = () => Promise<T>;\\n\\nexport function promisify<T>(fn: CallbackBasedAsyncFunction<T>): PromiseBasedAsyncFunction<T> {\\n    return () => new Promise<T>((resolve, reject) => {\\n        fn((response) => {\\n            if (response.status === 'success') {\\n                resolve(response.data);\\n            } else {\\n                reject(new Error(response.error));\\n            }\\n        });\\n    });\\n}\\n\\ntype SourceObject<T> = {[K in keyof T]: CallbackBasedAsyncFunction<T[K]>};\\ntype PromisifiedObject<T> = {[K in keyof T]: PromiseBasedAsyncFunction<T[K]>};\\n\\nexport function promisifyAll<T extends {[key: string]: any}>(obj: SourceObject<T>): PromisifiedObject<T> {\\n    const result: Partial<PromisifiedObject<T>> = {};\\n    for (const key of Object.keys(obj) as (keyof T)[]) {\\n        result[key] = promisify(obj[key]);\\n    }\\n    return result as PromisifiedObject<T>;\\n}\\n\\nconst oldApi = {\\n    requestAdmins(callback: (response: ApiResponse<Admin[]>) => void) {\\n        callback({\\n            status: 'success',\\n            data: admins\\n        });\\n    },\\n    requestUsers(callback: (response: ApiResponse<User[]>) => void) {\\n        callback({\\n            status: 'success',\\n            data: users\\n        });\\n    },\\n    requestCurrentServerTime(callback: (response: ApiResponse<number>) => void) {\\n        callback({\\n            status: 'success',\\n            data: Date.now()\\n        });\\n    },\\n    requestCoffeeMachineQueueLength(callback: (response: ApiResponse<number>) => void) {\\n        callback({\\n            status: 'error',\\n            error: 'Numeric value has exceeded Number.MAX_SAFE_INTEGER.'\\n        });\\n    }\\n};\\n\\nexport const api = promisifyAll(oldApi);\\n\\nfunction logPerson(person: Person) {\\n    console.log(\\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\\n    );\\n}\\n\\nasync function startTheApp() {\\n    console.log('Admins:');\\n    (await api.requestAdmins()).forEach(logPerson);\\n    console.log();\\n\\n    console.log('Users:');\\n    (await api.requestUsers()).forEach(logPerson);\\n    console.log();\\n\\n    console.log('Server time:');\\n    console.log(`   ${new Date(await api.requestCurrentServerTime()).toLocaleString()}`);\\n    console.log();\\n\\n    console.log('Coffee machine queue length:');\\n    console.log(`   ${await api.requestCoffeeMachineQueueLength()}`);\\n}\\n\\nstartTheApp().then(\\n    () => {\\n        console.log('Success!');\\n    },\\n    (e: Error) => {\\n        console.log(`Error: \\\"${e.message}\\\", but it's fine, sometimes errors are inevitable.`);\\n    }\\n);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/2/generics.html\\n\";","export default \"import {IsTypeEqual, IsTypeAssignable, FirstArgument, typeAssert} from 'type-assertions';\\nimport {api, promisify, ApiResponse} from './index';\\n\\ntypeAssert<\\n    IsTypeAssignable<\\n        FirstArgument<typeof promisify>,\\n        (callback: (response: ApiResponse<number>) => void) => void\\n    >\\n>();\\ntypeAssert<\\n    IsTypeAssignable<\\n        FirstArgument<typeof promisify>,\\n        (callback: (response: ApiResponse<string>) => void) => void\\n    >\\n>();\\ntypeAssert<\\n    IsTypeAssignable<\\n        ReturnType<typeof promisify>,\\n        () => Promise<number>\\n    >\\n>();\\ntypeAssert<\\n    IsTypeAssignable<\\n        ReturnType<typeof promisify>,\\n        () => Promise<boolean>\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof api.requestAdmins,\\n        () => Promise<\\n            {\\n                type: 'admin';\\n                name: string;\\n                age: number;\\n                role: string;\\n            }[]\\n        >\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof api.requestUsers,\\n        () => Promise<\\n            {\\n                type: 'user';\\n                name: string;\\n                age: number;\\n                occupation: string;\\n            }[]\\n        >\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof api.requestCurrentServerTime,\\n        () => Promise<number>\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof api.requestCoffeeMachineQueueLength,\\n        () => Promise<number>\\n    >\\n>();\\n\\n\";","export default \"import {\\n    strReverse,\\n    strToLower,\\n    strToUpper,\\n    strRandomize,\\n    strInvertCase\\n} from 'str-utils';\\n\\n/*\\n\\nIntro:\\n\\n    In order to engage users in the communication with\\n    each other we have decided to decorate usernames\\n    in various ways. A brief search led us to a library\\n    called \\\"str-utils\\\". Bad thing is that it lacks\\n    TypeScript declarations.\\n\\nExercise:\\n\\n    Check str-utils module implementation at:\\n    node_modules/str-utils/index.js\\n    node_modules/str-utils/README.md\\n\\n    Provide type declaration for that module in:\\n    declarations/str-utils/index.d.ts\\n\\n    Try to avoid duplicates of type declarations,\\n    use type aliases.\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\ntype Person = User | Admin;\\n\\nconst admins: Admin[] = [\\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\\n    { type: 'admin', name: 'Steve', age: 40, role: 'Steve' },\\n    { type: 'admin', name: 'Will Bruces', age: 30, role: 'Overseer' },\\n    { type: 'admin', name: 'Superwoman', age: 28, role: 'Customer support' }\\n];\\n\\nconst users: User[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\\n    { type: 'user', name: 'Kate Müller', age: 23, occupation: 'Astronaut' },\\n    { type: 'user', name: 'Moses', age: 70, occupation: 'Desert guide' },\\n    { type: 'user', name: 'Superman', age: 28, occupation: 'Ordinary person' },\\n    { type: 'user', name: 'Inspector Gadget', age: 31, occupation: 'Undercover' }\\n];\\n\\nconst isAdmin = (person: Person): person is Admin => person.type === 'admin';\\nconst isUser = (person: Person): person is User => person.type === 'user';\\n\\nexport const nameDecorators = [\\n    strReverse,\\n    strToLower,\\n    strToUpper,\\n    strRandomize,\\n    strInvertCase\\n];\\n\\nfunction logPerson(person: Person) {\\n    let additionalInformation: string = '';\\n    if (isAdmin(person)) {\\n        additionalInformation = person.role;\\n    }\\n    if (isUser(person)) {\\n        additionalInformation = person.occupation;\\n    }\\n    const randomNameDecorator = nameDecorators[\\n        Math.round(Math.random() * (nameDecorators.length - 1))\\n    ];\\n    const name = randomNameDecorator(person.name);\\n    console.log(\\n        ` - ${name}, ${person.age}, ${additionalInformation}`\\n    );\\n}\\n\\n([] as Person[])\\n    .concat(users, admins)\\n    .forEach(logPerson);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/modules.html#ambient-modules\\n\";","export default \"import {IsTypeEqual, ArrayElement, typeAssert} from 'type-assertions';\\nimport {nameDecorators} from './index';\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        ArrayElement<typeof nameDecorators>,\\n        (input: string) => string\\n    >\\n>();\\n\";","export default \"declare module 'str-utils' {\\n    // export const ...\\n    // export function ...\\n}\\n\";","export default \"declare module 'str-utils' {\\n    type StrUtil = (input: string) => string;\\n\\n    export const strReverse: StrUtil;\\n    export const strToLower: StrUtil;\\n    export const strToUpper: StrUtil;\\n    export const strRandomize: StrUtil;\\n    export const strInvertCase: StrUtil;\\n}\\n\";","export default \"import {\\n    getMaxIndex,\\n    getMaxElement,\\n    getMinIndex,\\n    getMinElement,\\n    getMedianIndex,\\n    getMedianElement,\\n    getAverageValue\\n} from 'stats';\\n\\n/*\\n\\nIntro:\\n\\n    We have so many users and admins in the database!\\n    CEO's father Jeff says that we are a BigData\\n    startup now. We have no idea what it means, but\\n    Jeff says that we need to do some statistics and\\n    analytics.\\n\\n    We've ran a questionnaire within the team to\\n    figure out what do we know about statistics.\\n    The only person who filled it was our coffee\\n    machine maintainer. The answers were:\\n\\n     * Maximums\\n     * Minumums\\n     * Medians\\n     * Averages\\n\\n    We found a piece of code on stackoverflow and\\n    compiled it into a module `stats`. The bad\\n    thing is that it lacks type declarations.\\n\\nExercise:\\n\\n    Check stats module implementation at:\\n    node_modules/stats/index.js\\n    node_modules/stats/README.md\\n\\n    Provide type declaration for that module in:\\n    declarations/stats/index.d.ts\\n\\nHigher difficulty bonus exercise:\\n\\n    Avoid duplicates of type declarations.\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n}\\n\\nconst admins: Admin[] = [\\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\\n    { type: 'admin', name: 'Steve', age: 40, role: 'Steve' },\\n    { type: 'admin', name: 'Will Bruces', age: 30, role: 'Overseer' },\\n    { type: 'admin', name: 'Superwoman', age: 28, role: 'Customer support' }\\n];\\n\\nconst users: User[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\\n    { type: 'user', name: 'Kate Müller', age: 23, occupation: 'Astronaut' },\\n    { type: 'user', name: 'Moses', age: 70, occupation: 'Desert guide' },\\n    { type: 'user', name: 'Superman', age: 28, occupation: 'Ordinary person' },\\n    { type: 'user', name: 'Inspector Gadget', age: 31, occupation: 'Undercover' }\\n];\\n\\nfunction logUser(user: User | null) {\\n    if (!user) {\\n        console.log(' - none');\\n        return;\\n    }\\n    const pos = users.indexOf(user) + 1;\\n    console.log(` - #${pos} User: ${user.name}, ${user.age}, ${user.occupation}`);\\n}\\n\\nfunction logAdmin(admin: Admin | null) {\\n    if (!admin) {\\n        console.log(' - none');\\n        return;\\n    }\\n    const pos = admins.indexOf(admin) + 1;\\n    console.log(` - #${pos} Admin: ${admin.name}, ${admin.age}, ${admin.role}`);\\n}\\n\\nconst compareUsers = (a: User, b: User) => a.age - b.age;\\nconst compareAdmins = (a: Admin, b: Admin) => a.age - b.age;\\nconst colorizeIndex = (value: number) => String(value + 1);\\n\\nexport {\\n    getMaxIndex,\\n    getMaxElement,\\n    getMinIndex,\\n    getMinElement,\\n    getMedianIndex,\\n    getMedianElement,\\n    getAverageValue\\n};\\n\\nconsole.log('Youngest user:');\\nlogUser(getMinElement(users, compareUsers));\\nconsole.log(` - was ${colorizeIndex(getMinIndex(users, compareUsers))}th to register`);\\n\\nconsole.log();\\n\\nconsole.log('Median user:');\\nlogUser(getMedianElement(users, compareUsers));\\nconsole.log(` - was ${colorizeIndex(getMedianIndex(users, compareUsers))}th to register`);\\n\\nconsole.log();\\n\\nconsole.log('Oldest user:');\\nlogUser(getMaxElement(users, compareUsers));\\nconsole.log(` - was ${colorizeIndex(getMaxIndex(users, compareUsers))}th to register`);\\n\\nconsole.log();\\n\\nconsole.log('Average user age:');\\nconsole.log(` - ${String(getAverageValue(users, ({age}: User) => age))} years`);\\n\\nconsole.log();\\n\\nconsole.log('Youngest admin:');\\nlogAdmin(getMinElement(admins, compareAdmins));\\nconsole.log(` - was ${colorizeIndex(getMinIndex(users, compareUsers))}th to register`);\\n\\nconsole.log();\\n\\nconsole.log('Median admin:');\\nlogAdmin(getMedianElement(admins, compareAdmins));\\nconsole.log(` - was ${colorizeIndex(getMedianIndex(users, compareUsers))}th to register`);\\n\\nconsole.log();\\n\\nconsole.log('Oldest admin:');\\nlogAdmin(getMaxElement(admins, compareAdmins));\\nconsole.log(` - was ${colorizeIndex(getMaxIndex(users, compareUsers))}th to register`);\\n\\nconsole.log();\\n\\nconsole.log('Average admin age:');\\nconsole.log(` - ${String(getAverageValue(admins, ({age}: Admin) => age))} years`);\\n\";","export default \"import {IsTypeEqual, typeAssert} from 'type-assertions';\\nimport {\\n    getMaxIndex,\\n    getMaxElement,\\n    getMinIndex,\\n    getMinElement,\\n    getMedianIndex,\\n    getMedianElement,\\n    getAverageValue\\n} from './index';\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof getMaxIndex,\\n        <T>(input: T[], comparator: (a: T, b: T) => number) => number\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof getMinIndex,\\n        <T>(input: T[], comparator: (a: T, b: T) => number) => number\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof getMedianIndex,\\n        <T>(input: T[], comparator: (a: T, b: T) => number) => number\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof getMaxElement,\\n        <T>(input: T[], comparator: (a: T, b: T) => number) => T | null\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof getMinElement,\\n        <T>(input: T[], comparator: (a: T, b: T) => number) => T | null\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof getMedianElement,\\n        <T>(input: T[], comparator: (a: T, b: T) => number) => T | null\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof getAverageValue,\\n        <T>(input: T[], getValue: (item: T) => number) => number | null\\n    >\\n>();\\n\";","export default \"declare module 'stats' {\\n    export function getMaxIndex(input: unknown, comparator: unknown): unknown;\\n}\\n\";","export default \"declare module 'stats' {\\n    type Comparator<T> = (a: T, b: T) => number;\\n\\n    type GetIndex = <T>(input: T[], comparator: Comparator<T>) => number;\\n    export const getMaxIndex: GetIndex;\\n    export const getMinIndex: GetIndex;\\n    export const getMedianIndex: GetIndex;\\n\\n    type GetElement = <T>(input: T[], comparator: Comparator<T>) => T | null;\\n    export const getMaxElement: GetElement;\\n    export const getMinElement: GetElement;\\n    export const getMedianElement: GetElement;\\n\\n    export const getAverageValue: <T>(input: T[], getValue: (item: T) => number) => number | null;\\n}\\n\";","export default \"import * as dateWizard from 'date-wizard';\\nimport './module-augmentations/date-wizard';\\n\\n/*\\n\\nIntro:\\n\\n    The next logical step for us is to provide more\\n    precise registration date for our users and admins.\\n    We've approximately made up dates for each user and\\n    admin and used a library called \\\"date-wizard\\\" in\\n    order to pretty-format the dates.\\n\\n    Unfortunately, type declarations which came with\\n    \\\"date-wizard\\\" library were incomplete.\\n\\n    1. DateDetails interface is missing\\n       time related fields such as hours, minutes and\\n       seconds.\\n    2. Function \\\"pad\\\" is exported but not declared.\\n\\nExercise:\\n\\n    Check date-wizard module implementation at:\\n    node_modules/date-wizard/index.js\\n    node_modules/date-wizard/index.d.ts\\n\\n    Extend type declaration of that module in:\\n    module-augmentations/date-wizard/index.ts\\n\\n*/\\n\\ninterface User {\\n    type: 'user';\\n    name: string;\\n    age: number;\\n    occupation: string;\\n    registered: Date;\\n}\\n\\ninterface Admin {\\n    type: 'admin';\\n    name: string;\\n    age: number;\\n    role: string;\\n    registered: Date;\\n}\\n\\ntype Person = User | Admin;\\n\\nconst admins: Admin[] = [\\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator', registered: new Date('2016-06-01T16:23:13') },\\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver', registered: new Date('2017-02-11T12:12:11') },\\n    { type: 'admin', name: 'Steve', age: 40, role: 'Steve', registered: new Date('2018-01-05T11:02:30') },\\n    { type: 'admin', name: 'Will Bruces', age: 30, role: 'Overseer', registered: new Date('2018-08-12T10:01:24') },\\n    { type: 'admin', name: 'Superwoman', age: 28, role: 'Customer support', registered: new Date('2019-03-25T07:51:05') }\\n];\\n\\nconst users: User[] = [\\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep', registered: new Date('2016-02-15T09:25:13') },\\n    { type: 'user', name: 'Kate Müller', age: 23, occupation: 'Astronaut', registered: new Date('2016-03-23T12:47:03') },\\n    { type: 'user', name: 'Moses', age: 70, occupation: 'Desert guide', registered: new Date('2017-02-19T17:22:56') },\\n    { type: 'user', name: 'Superman', age: 28, occupation: 'Ordinary person', registered: new Date('2018-02-25T19:44:28') },\\n    { type: 'user', name: 'Inspector Gadget', age: 31, occupation: 'Undercover', registered: new Date('2019-03-25T09:29:12') }\\n];\\n\\nconst isAdmin = (person: Person): person is Admin => person.type === 'admin';\\nconst isUser = (person: Person): person is User => person.type === 'user';\\n\\nfunction logPerson(person: Person, index: number) {\\n    let additionalInformation: string = '';\\n    if (isAdmin(person)) {\\n        additionalInformation = person.role;\\n    }\\n    if (isUser(person)) {\\n        additionalInformation = person.occupation;\\n    }\\n    let registeredAt = dateWizard(person.registered, '{date}.{month}.{year} {hours}:{minutes}');\\n    let num = `#${dateWizard.pad(index + 1)}`;\\n    console.log(\\n        ` - ${num}: ${person.name}, ${person.age}, ${additionalInformation}, ${registeredAt}`\\n    );\\n}\\n\\nexport {\\n    dateWizard\\n};\\n\\nconsole.log('All users:');\\n\\n([] as Person[])\\n    .concat(users, admins)\\n    .forEach(logPerson);\\n\\nconsole.log();\\n\\nconsole.log('Early birds:');\\n\\n([] as Person[])\\n    .concat(users, admins)\\n    .filter((person) => dateWizard.dateDetails(person.registered).hours < 10)\\n    .forEach(logPerson);\\n\\n// In case if you are stuck:\\n// https://www.typescriptlang.org/docs/handbook/modules.html#ambient-modules\\n// https://www.typescriptlang.org/docs/handbook/declaration-merging.html\\n\";","export default \"import {IsTypeEqual, typeAssert} from 'type-assertions';\\nimport {dateWizard} from './index';\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        dateWizard.DateDetails,\\n        {\\n            year: number;\\n            month: number;\\n            date: number;\\n            hours: number;\\n            minutes: number;\\n            seconds: number;\\n        }\\n    >\\n>();\\n\\ntypeAssert<\\n    IsTypeEqual<\\n        typeof dateWizard.pad,\\n        (level: number) => string\\n    >\\n>();\\n\";","export default \"// This enables module augmentation mode.\\nimport 'date-wizard';\\n\\ndeclare module 'date-wizard' {\\n    // Add your module extensions here.\\n}\\n\";","export default \"import 'date-wizard';\\n\\ndeclare module 'date-wizard' {\\n    const pad: (ident: number) => string;\\n\\n    interface DateDetails {\\n        hours: number;\\n        minutes: number;\\n        seconds: number;\\n    }\\n}\\n\";","export default \"/*\\n\\nIntro:\\n\\n    For some unknown reason most of our developers left\\n    the company. We need to actively hire now.\\n    In the media we've read that companies that invent\\n    and publish new technologies attract more potential\\n    candidates. We need to use this opportunity and\\n    invent and publish some npm packages. Following the\\n    new trend of functional programming in JS we\\n    decided to develop a functional utility library.\\n    This will put us on the bleading edge since we are\\n    pretty much sure no one else did anything similar.\\n    We also provided some jsdoc along with the\\n    functions, but it might sometimes be inaccurate.\\n\\nExercise:\\n\\n    Provide proper typing for the specified functions.\\n\\nBonus:\\n\\n    Could you please also refactor the code to reduce\\n    code duplication?\\n    You might need some excessive type casting to make\\n    it really short.\\n\\n*/\\n\\n/**\\n * 2 arguments passed: returns a new array\\n * which is a result of input being mapped using\\n * the specified mapper.\\n *\\n * 1 argument passed: returns a function which accepts\\n * an input and returns a new array which is a result\\n * of input being mapped using original mapper.\\n *\\n * 0 arguments passed: returns itself.\\n *\\n * @param {Function} mapper\\n * @param {Array} input\\n * @return {Array | Function}\\n */\\nexport function map(mapper, input) {\\n    if (arguments.length === 0) {\\n        return map;\\n    }\\n    if (arguments.length === 1) {\\n        return function subFunction(subInput) {\\n            if (arguments.length === 0) {\\n                return subFunction;\\n            }\\n            return subInput.map(mapper);\\n        };\\n    }\\n    return input.map(mapper);\\n}\\n\\n/**\\n * 2 arguments passed: returns a new array\\n * which is a result of input being filtered using\\n * the specified filter function.\\n *\\n * 1 argument passed: returns a function which accepts\\n * an input and returns a new array which is a result\\n * of input being filtered using original filter\\n * function.\\n *\\n * 0 arguments passed: returns itself.\\n *\\n * @param {Function} filterer\\n * @param {Array} input\\n * @return {Array | Function}\\n */\\nexport function filter(filterer, input) {\\n    if (arguments.length === 0) {\\n        return filter;\\n    }\\n    if (arguments.length === 1) {\\n        return function subFunction(subInput) {\\n            if (arguments.length === 0) {\\n                return subFunction;\\n            }\\n            return subInput.filter(filterer);\\n        };\\n    }\\n    return input.filter(filterer);\\n}\\n\\n/**\\n * 3 arguments passed: reduces input array it using the\\n * specified reducer and initial value and returns\\n * the result.\\n *\\n * 2 arguments passed: returns a function which accepts\\n * input array and reduces it using previously specified\\n * reducer and initial value and returns the result.\\n *\\n * 1 argument passed: returns a function which:\\n *   * when 2 arguments is passed to the subfunction, it\\n *     reduces the input array using specified initial\\n *     value and previously specified reducer and returns\\n *     the result.\\n *   * when 1 argument is passed to the subfunction, it\\n *     returns a function which expects the input array\\n *     and reduces the specified input array using\\n *     previously specified reducer and inital value.\\n *   * when 0 argument is passed to the subfunction, it\\n *     returns itself.\\n *\\n * 0 arguments passed: returns itself.\\n *\\n * @param {Function} reducer\\n * @param {*} initialValue\\n * @param {Array} input\\n * @return {* | Function}\\n */\\nexport function reduce(reducer, initialValue, input) {\\n    if (arguments.length === 0) {\\n        return reduce;\\n    }\\n    if (arguments.length === 1) {\\n        return function subFunction(subInitialValue, subInput) {\\n            if (arguments.length === 0) {\\n                return subFunction;\\n            }\\n            if (arguments.length === 1) {\\n                return function subSubFunction(subSubInput) {\\n                    if (arguments.length === 0) {\\n                        return subSubFunction;\\n                    }\\n                    return subSubInput.reduce(reducer, subInitialValue);\\n                };\\n            }\\n            return subInput.reduce(reducer,subInitialValue);\\n        }\\n    }\\n    if (arguments.length === 2) {\\n        return function subFunction(subInput) {\\n            if (arguments.length === 0) {\\n                return subFunction;\\n            }\\n            return subInput.reduce(reducer, initialValue);\\n        };\\n    }\\n    return input.reduce(reducer, initialValue);\\n}\\n\\n/**\\n * 2 arguments passed: returns sum of a and b.\\n *\\n * 1 argument passed: returns a function which expects\\n * b and returns sum of a and b.\\n *\\n * 0 arguments passed: returns itself.\\n *\\n * @param {Number} a\\n * @param {Number} b\\n * @return {Number | Function}\\n */\\nexport function add(a, b) {\\n    if (arguments.length === 0) {\\n        return add;\\n    }\\n    if (arguments.length === 1) {\\n        return function subFunction(subB) {\\n            if (arguments.length === 0) {\\n                return subFunction;\\n            }\\n            return a + subB;\\n        };\\n    }\\n    return a + b;\\n}\\n\\n/**\\n * 2 arguments passed: subtracts b from a and\\n * returns the result.\\n *\\n * 1 argument passed: returns a function which expects\\n * b and subtracts b from a and returns the result.\\n *\\n * 0 arguments passed: returns itself.\\n *\\n * @param {Number} a\\n * @param {Number} b\\n * @return {Number | Function}\\n */\\nexport function subtract(a, b) {\\n    if (arguments.length === 0) {\\n        return subtract;\\n    }\\n    if (arguments.length === 1) {\\n        return function subFunction(subB) {\\n            if (arguments.length === 0) {\\n                return subFunction;\\n            }\\n            return a - subB;\\n        };\\n    }\\n    return a - b;\\n}\\n\\n/**\\n * 2 arguments passed: returns value of property\\n * propName of the specified object.\\n *\\n * 1 argument passed: returns a function which expects\\n * propName and returns value of property propName\\n * of the specified object.\\n *\\n * 0 arguments passed: returns itself.\\n *\\n * @param {Object} obj\\n * @param {String} propName\\n * @return {* | Function}\\n */\\nexport function prop(obj, propName) {\\n    if (arguments.length === 0) {\\n        return prop;\\n    }\\n    if (arguments.length === 1) {\\n        return function subFunction(subPropName) {\\n            if (arguments.length === 0) {\\n                return subFunction;\\n            }\\n            return obj[subPropName];\\n        };\\n    }\\n    return obj[propName];\\n}\\n\\n/**\\n * >0 arguments passed: expects each argument to be\\n * a function. Returns a function which accepts the\\n * same arguments as the first function. Passes these\\n * arguments to the first function, the result of\\n * the first function passes to the second function,\\n * the result of the second function to the third\\n * function... and so on. Returns the result of the\\n * last function execution.\\n *\\n * 0 arguments passed: returns itself.\\n *\\n * TODO TypeScript\\n *   * Should properly handle at least 5 arguments.\\n *   * Should also make sure argument of the next\\n *     function matches the return type of the previous\\n *     function.\\n *\\n * @param {Function[]} functions\\n * @return {*}\\n */\\nexport function pipe(...functions) {\\n    if (arguments.length === 0) {\\n        return pipe;\\n    }\\n    return function subFunction() {\\n        let nextArguments = Array.from(arguments);\\n        let result;\\n        for (const func of functions) {\\n            result = func(...nextArguments);\\n            nextArguments = [result];\\n        }\\n        return result;\\n    };\\n}\\n\";","export default \"/*\\n\\nIntro:\\n\\n    For some unknown reason most of our developers left\\n    the company. We need to actively hire now.\\n    In the media we've read that companies that invent\\n    and publish new technologies attract more potential\\n    candidates. We need to use this opportunity and\\n    invent and publish some npm packages. Following the\\n    new trend of functional programming in JS we\\n    decided to develop a functional utility library.\\n    This will put us on the bleading edge since we are\\n    pretty much sure no one else did anything similar.\\n    We also provided some jsdoc along with the\\n    functions, but it might sometimes be inaccurate.\\n\\nExercise:\\n\\n    Provide proper typing for the specified functions.\\n\\nBonus:\\n\\n    Could you please also refactor the code to reduce\\n    code duplication?\\n    You might need some excessive type casting to make\\n    it really short.\\n\\n*/\\n\\nfunction toFunctional<T extends Function>(func: T): Function {\\n    const fullArgCount = func.length;\\n    function createSubFunction(curriedArgs: unknown[]) {\\n        return function(this: unknown) {\\n            const newCurriedArguments = curriedArgs.concat(Array.from(arguments));\\n            if (newCurriedArguments.length > fullArgCount) {\\n                throw new Error('Too many arguments');\\n            }\\n            if (newCurriedArguments.length === fullArgCount) {\\n                return func.apply(this, newCurriedArguments);\\n            }\\n            return createSubFunction(newCurriedArguments);\\n        };\\n    }\\n    return createSubFunction([]);\\n}\\n\\ninterface MapperFunc<I, O> {\\n    (): MapperFunc<I, O>;\\n    (input: I[]): O[];\\n}\\n\\ninterface MapFunc {\\n    (): MapFunc;\\n    <I, O>(mapper: (item: I) => O): MapperFunc<I, O>;\\n    <I, O>(mapper: (item: I) => O, input: I[]): O[];\\n}\\n\\n/**\\n * 2 arguments passed: returns a new array\\n * which is a result of input being mapped using\\n * the specified mapper.\\n *\\n * 1 argument passed: returns a function which accepts\\n * an input and returns a new array which is a result\\n * of input being mapped using original mapper.\\n *\\n * 0 arguments passed: returns itself.\\n */\\nexport const map = toFunctional(<I, O>(fn: (arg: I) => O, input: I[]) => input.map(fn)) as MapFunc;\\n\\n\\ninterface FiltererFunc<I> {\\n    (): FiltererFunc<I>;\\n    (input: I[]): I[];\\n}\\n\\ninterface FilterFunc {\\n    (): FilterFunc;\\n    <I>(filterer: (item: I) => boolean): FiltererFunc<I>;\\n    <I>(filterer: (item: I) => boolean, input: I[]): I[];\\n}\\n\\n/**\\n * 2 arguments passed: returns a new array\\n * which is a result of input being filtered using\\n * the specified filter function.\\n *\\n * 1 argument passed: returns a function which accepts\\n * an input and returns a new array which is a result\\n * of input being filtered using original filter\\n * function.\\n *\\n * 0 arguments passed: returns itself.\\n */\\nexport const filter = toFunctional(<I>(fn: (item: I) => boolean, input: I[]) => input.filter(fn)) as FilterFunc;\\n\\ninterface ReducerInitialFunc<I, O> {\\n    (): ReducerInitialFunc<I, O>;\\n    (input: I[]): O;\\n}\\n\\ninterface ReducerFunc<I, O> {\\n    (): ReducerFunc<I, O>;\\n    (initialValue: O): ReducerInitialFunc<I, O>;\\n    (initialValue: O, input: I[]): O;\\n}\\n\\ninterface ReduceFunc {\\n    (): ReduceFunc;\\n    <I, O>(reducer: (acc: O, val: I) => O): ReducerFunc<I, O>;\\n    <I, O>(reducer: (acc: O, val: I) => O, initialValue: O): ReducerInitialFunc<I, O>;\\n    <I, O>(reducer: (acc: O, val: I) => O, initialValue: O, input: I[]): O;\\n}\\n\\n/**\\n * 3 arguments passed: reduces input array it using the\\n * specified reducer and initial value and returns\\n * the result.\\n *\\n * 2 arguments passed: returns a function which accepts\\n * input array and reduces it using previously specified\\n * reducer and initial value and returns the result.\\n *\\n * 1 argument passed: returns a function which:\\n *   * when 2 arguments is passed to the subfunction, it\\n *     reduces the input array using specified initial\\n *     value and previously specified reducer and returns\\n *     the result.\\n *   * when 1 argument is passed to the subfunction, it\\n *     returns a function which expects the input array\\n *     and reduces the specified input array using\\n *     previously specified reducer and inital value.\\n *   * when 0 argument is passed to the subfunction, it\\n *     returns itself.\\n *\\n * 0 arguments passed: returns itself.\\n */\\nexport const reduce = toFunctional(\\n    <I, O>(reducer: (acc: O, item: I) => O, initialValue: O, input: I[]) => input.reduce(reducer, initialValue)\\n) as ReduceFunc;\\n\\ninterface ArithmeticArgFunc {\\n    (): ArithmeticArgFunc;\\n    (b: number): number;\\n}\\n\\ninterface ArithmeticFunc {\\n    (): ArithmeticFunc;\\n    (a: number): ArithmeticArgFunc;\\n    (a: number, b: number): number;\\n}\\n\\n/**\\n * 2 arguments passed: returns sum of a and b.\\n *\\n * 1 argument passed: returns a function which expects\\n * b and returns sum of a and b.\\n *\\n * 0 arguments passed: returns itself.\\n */\\nexport const add = toFunctional((a: number, b: number) => a + b) as ArithmeticFunc;\\n\\n/**\\n * 2 arguments passed: subtracts b from a and\\n * returns the result.\\n *\\n * 1 argument passed: returns a function which expects\\n * b and subtracts b from a and returns the result.\\n *\\n * 0 arguments passed: returns itself.\\n */\\nexport const subtract = toFunctional((a: number, b: number) => a - b) as ArithmeticFunc;\\n\\ninterface PropNameFunc<K extends string> {\\n    (): PropNameFunc<K>;\\n    <O extends {[key in K]: O[K]}>(obj: O): O[K];\\n}\\n\\ninterface PropFunc {\\n    (): PropFunc;\\n    <K extends string>(propName: K): PropNameFunc<K>;\\n    <O, K extends keyof O>(propName: K, obj: O): O[K];\\n}\\n\\n/**\\n * 2 arguments passed: returns value of property\\n * propName of the specified object.\\n *\\n * 1 argument passed: returns a function which expects\\n * propName and returns value of property propName\\n * of the specified object.\\n *\\n * 0 arguments passed: returns itself.\\n */\\nexport const prop = toFunctional(<O, K extends keyof O>(obj: O, propName: K): O[K] => obj[propName]) as PropFunc;\\n\\ntype F<A extends unknown[], R> = (...args: A) => R;\\ntype TR<I, O> = (arg: I) => O;\\n\\ninterface PipeFunc {\\n    (): PipeFunc;\\n    <A1 extends unknown[], R1>(f: F<A1, R1>): (...args: A1) => R1;\\n    <A1 extends unknown[], R1, R2>(f: F<A1, R1>, tr1: TR<R1, R2>): (...args: A1) => R2;\\n    <A1 extends unknown[], R1, R2, R3>(f: F<A1, R1>, tr1: TR<R1, R2>, tr2: TR<R2, R3>): (...args: A1) => R3;\\n    <A1 extends unknown[], R1, R2, R3, R4>(\\n        f: F<A1, R1>, tr1: TR<R1, R2>, tr2: TR<R2, R3>, tr3: TR<R3, R4>\\n    ): (...args: A1) => R4;\\n    <A1 extends unknown[], R1, R2, R3, R4, R5>(\\n        f: F<A1, R1>, tr1: TR<R1, R2>, tr2: TR<R2, R3>, tr3: TR<R3, R4>, tr4: TR<R4, R5>\\n    ): (...args: A1) => R5;\\n}\\n\\n/**\\n * >0 arguments passed: expects each argument to be\\n * a function. Returns a function which accepts the\\n * same arguments as the first function. Passes these\\n * arguments to the first function, the result of\\n * the first function passes to the second function,\\n * the result of the second function to the third\\n * function... and so on. Returns the result of the\\n * last function execution.\\n *\\n * 0 arguments passed: returns itself.\\n */\\nexport const pipe: PipeFunc = function (...functions: Function[]) {\\n    if (arguments.length === 0) {\\n        return pipe;\\n    }\\n    return function subFunction() {\\n        let nextArguments = Array.from(arguments);\\n        let result;\\n        for (const func of functions) {\\n            result = func(...nextArguments);\\n            nextArguments = [result];\\n        }\\n        return result;\\n    };\\n};\\n\";","export default \"import {typeAssert, IsTypeEqual} from 'type-assertions/index';\\nimport {map, reduce, filter, add, subtract, prop, pipe} from './index';\\n\\nconst mapResult1 = map()(String)()([1, 2, 3]);\\ntypeAssert<IsTypeEqual<typeof mapResult1, string[]>>();\\n\\nconst mapResult2 = map(Boolean, [1, 0, 1]);\\ntypeAssert<IsTypeEqual<typeof mapResult2, boolean[]>>();\\n\\nconst reduceResult1 = reduce()((a: number, b: number) => a + b)()(0)()([1, 2, 3]);\\ntypeAssert<IsTypeEqual<typeof reduceResult1, number>>();\\n\\nconst reduceResult2 = reduce(add, 0, [1, 2, 3]);\\ntypeAssert<IsTypeEqual<typeof reduceResult2, number>>();\\n\\nconst reduceResult3 = reduce(subtract, 0, [1, 2, 3]);\\ntypeAssert<IsTypeEqual<typeof reduceResult3, number>>();\\n\\nconst reduceResult4 = reduce((a: string, b: string) => a + b, '', ['1', '2', '3']);\\ntypeAssert<IsTypeEqual<typeof reduceResult4, string>>();\\n\\nconst filterResult1 = filter()((n: number) => n !== 0)()([0, 1, 2]);\\ntypeAssert<IsTypeEqual<typeof filterResult1, number[]>>();\\n\\nconst filterResult2 = filter(Boolean, [0, 1, 2]);\\ntypeAssert<IsTypeEqual<typeof filterResult2, number[]>>();\\n\\nconst addResult1 = add()(1)()(2);\\ntypeAssert<IsTypeEqual<typeof addResult1, number>>();\\n\\nconst addResult2 = add(1, 2);\\ntypeAssert<IsTypeEqual<typeof addResult2, number>>();\\n\\nconst subtractResult1 = subtract()(2)()(1);\\ntypeAssert<IsTypeEqual<typeof subtractResult1, number>>();\\n\\nconst subtractResult2 = subtract(2, 1);\\ntypeAssert<IsTypeEqual<typeof subtractResult2, number>>();\\n\\nconst propResult1 = prop()('x')()({x: 1, y: 'Hello'});\\ntypeAssert<IsTypeEqual<typeof propResult1, number>>();\\n\\nconst propResult2 = prop('y', {x: 1, y: 'Hello'});\\ntypeAssert<IsTypeEqual<typeof propResult2, string>>();\\n\\nconst pipeResult1 = pipe(filter(Boolean), map(String), reduce((a: string, b: string) => a + b, ''))([0, 1, 2, 3]);\\ntypeAssert<IsTypeEqual<typeof pipeResult1, string>>();\\n\\nconst pipeResult2 = pipe()()(filter(Boolean), map(String))([0, 1, 2, 3]);\\ntypeAssert<IsTypeEqual<typeof pipeResult2, string[]>>();\\n\";","export default \"/*\\n\\nIntro:\\n\\n    Our attempt to Open Source didn't work quite as\\n    expected. It turned out there were already many\\n    existing functional JS libraries.\\n\\n    All the remaining developers left the company as\\n    well. It seems that they are joining a very\\n    ambitious startup which re-invented a juicer and\\n    raised millions of dollars.\\n    Too bad we cannot compete with this kind of\\n    financing even though we believe our idea is\\n    great.\\n\\n    It's time to shine for the last time and publish\\n    our new invention: object-constructor as our CTO\\n    named it. A small library which helps\\n    manipulating an object.\\n\\nExercise:\\n\\n    Here is a library which helps manipulating objects.\\n    We tried to write type annotations and we failed.\\n    Please help!\\n\\n*/\\n\\nexport class ObjectManipulator {\\n\\n    constructor(protected obj) {}\\n\\n    public set(key, value) {\\n        return new ObjectManipulator({...this.obj, [key]: value});\\n    }\\n\\n    public get(key) {\\n        return this.obj[key];\\n    }\\n\\n    public delete(key) {\\n        const newObj = {...this.obj};\\n        delete newObj[key];\\n        return new ObjectManipulator(newObj);\\n    }\\n\\n    public getObject() {\\n        return this.obj;\\n    }\\n}\\n\";","export default \"/*\\n\\nIntro:\\n\\n    Our attempt to Open Source didn't work quite as\\n    expected. It turned out there were already many\\n    existing functional JS libraries.\\n\\n    All the remaining developers left the company as\\n    well. It seems that they are joining a very\\n    ambitious startup which re-invented a juicer and\\n    raised millions of dollars.\\n    Too bad we cannot compete with this kind of\\n    financing even though we believe our idea is\\n    great.\\n\\n    It's time to shine for the last time and publish\\n    our new invention: object-constructor as our CTO\\n    named it. A small library which helps\\n    manipulating an object.\\n\\nExercise:\\n\\n    Here is a library which helps manipulating objects.\\n    We tried to write type annotations and we failed.\\n    Please help!\\n\\n*/\\n\\ntype ObjectWithNewProp<T, K extends string, V> = T & {[NK in K]: V};\\n\\nexport class ObjectManipulator<T> {\\n    constructor(protected obj: T) {}\\n\\n    public set<K extends string, V>(key: K, value: V): ObjectManipulator<ObjectWithNewProp<T, K, V>> {\\n        return new ObjectManipulator({...this.obj, [key]: value} as ObjectWithNewProp<T, K, V>);\\n    }\\n\\n    public get<K extends keyof T>(key: K): T[K] {\\n        return this.obj[key];\\n    }\\n\\n    public delete<K extends keyof T>(key: K): ObjectManipulator<Omit<T, K>> {\\n        const newObj = {...this.obj};\\n        delete newObj[key];\\n        return new ObjectManipulator(newObj);\\n    }\\n\\n    public getObject(): T {\\n        return this.obj;\\n    }\\n}\\n\";","export default \"import {typeAssert, IsTypeEqual} from 'type-assertions';\\nimport {ObjectManipulator} from './index';\\n\\nconst test1 = new ObjectManipulator({})\\n    .set('x', 123)\\n    .set('y', 'hello')\\n    .getObject();\\n\\ntypeAssert<IsTypeEqual<typeof test1, {x: number; y: string}>>();\\n\\nconst test2 = new ObjectManipulator({})\\n    .set('x', 123)\\n    .set('y', 'hello')\\n    .set('z', true)\\n    .delete('z')\\n    .delete('y')\\n    .getObject();\\n\\ntypeAssert<IsTypeEqual<typeof test2, {x: number}>>();\\n\\nconst test3 = new ObjectManipulator({})\\n    .set('x', 123)\\n    .set('y', 'hello')\\n    .delete('y')\\n    .get('x');\\n\\ntypeAssert<IsTypeEqual<typeof test3, number>>();\\n\\nconst test4 = new ObjectManipulator({x: true, y: 'hello'})\\n    .delete('y')\\n    .get('x');\\n\\ntypeAssert<IsTypeEqual<typeof test4, boolean>>();\\n\\n\";","export default \"/*\\n\\n                                             _\\n                                            | |\\n              ___ ___  _ __   __ _ _ __ __ _| |_ ___\\n             / __/ _ \\\\| '_ \\\\ / _` | '__/ _` | __/ __|\\n            | (_| (_) | | | | (_| | | | (_| | |_\\\\__ \\\\\\n             \\\\___\\\\___/|_| |_|\\\\__, |_|  \\\\__,_|\\\\__|___/\\n                              __/ |\\n                             |___/\\n\\n          You've successfully completed TypeScript exercises!\\n\\n    ................................................................\\n    .                                                              .\\n    .     ####################    ####################      E      .\\n    .     ####################    ####################      X      .\\n    .             ####            ####                      E      .\\n    .             ####            ####                      R      .\\n    .             ####            ####################      C      .\\n    .             ####                            ####      I      .\\n    .             ####                            ####      S      .\\n    .             ####            ####################      E      .\\n    .             ####            ####################      S      .\\n    .                                                              .\\n    ................................................................\\n\\n\\n    Want to improve your TypeScript skills further?\\n\\n        1. Go through the TS Handbook:\\n            https://www.typescriptlang.org/docs/handbook/intro.html\\n\\n        2. Most of the important updates are listed here:\\n            https://www.typescriptlang.org/docs/handbook/release-notes/overview.html\\n\\n        3. Check out Effective TypeScript book:\\n            https://effectivetypescript.com/\\n\\n    Credits:\\n\\n        Marat Dulin, https://mdevils.com\\n\\n        Support my new ideas on Patreon:\\n            https://www.patreon.com/mdevils\\n*/\\n\";","export default \"// Nothing to test here :)\\n\";","\n\t\t\t\tvar addMethods = require(\"../../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"init\",\"updateFiles\",\"getErrors\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"1421b23906f8e3dad7b0.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import React, {useLayoutEffect, useMemo, useState} from 'react';\nimport PulseLoader from 'react-spinners/PulseLoader';\nimport {Observable, Subscription} from 'rxjs';\n\nfunction Loading() {\n    return <PulseLoader color='gray' />;\n}\n\ntype RenderCallback<T> = (value: T) => React.ReactNode;\n\nfunction useObservable<T>(observable: Observable<T>): T | undefined {\n    const [, setUpdate] = useState(false);\n\n    const {subscription, value} = useMemo(() => {\n        const state = {\n            value: undefined as T | undefined,\n            subscription: undefined as Subscription | undefined\n        };\n        let emitChanges = false;\n        state.subscription = observable.subscribe((newValue) => {\n            state.value = newValue;\n            if (emitChanges) {\n                setUpdate((update) => !update);\n            }\n        });\n        emitChanges = true;\n        return state;\n    }, [observable, setUpdate]);\n\n    useLayoutEffect(() => () => subscription?.unsubscribe(), [subscription]);\n\n    return value;\n}\n\nfunction LoadingContainer<T>({observable, render}: {observable: Observable<T>; render: RenderCallback<T>}) {\n    const update = useObservable(observable);\n\n    if (update === undefined) {\n        return <Loading />;\n    }\n\n    return <>{render(update)}</>;\n}\n\nexport function load<T>(observable: Observable<T>, render: RenderCallback<T>) {\n    return <LoadingContainer observable={observable} render={render} />;\n}\n","import {ReplaySubject} from 'rxjs';\n\nexport const ui = (() => {\n    const initialState = {\n        panels: {\n            exercise: {\n                collapsed: false\n            },\n            files: {\n                collapsed: false\n            },\n            solutionFiles: {\n                collapsed: false\n            }\n        } as {[panel: string]: {collapsed: boolean}}\n    };\n\n    type State = typeof initialState;\n\n    const subject = new ReplaySubject<State>(1);\n\n    let state = initialState;\n\n    subject.next(state);\n\n    function updateState(newState: State) {\n        state = newState;\n        subject.next(newState);\n    }\n\n    return {\n        observable$: subject,\n        expandPanel: (panelName: string) =>\n            updateState({\n                ...state,\n                panels: {\n                    ...state.panels,\n                    [panelName]: {\n                        ...state.panels[panelName],\n                        collapsed: false\n                    }\n                }\n            }),\n        collapsePanel: (panelName: string) =>\n            updateState({\n                ...state,\n                panels: {\n                    ...state.panels,\n                    [panelName]: {\n                        ...state.panels[panelName],\n                        collapsed: true\n                    }\n                }\n            })\n    };\n})();\n","import styled from '@emotion/styled';\nimport React, {useMemo} from 'react';\nimport {load} from 'components/loading-container';\nimport {ui} from 'observables/ui';\n\nconst width = 200;\nconst height = 150;\n\ntype Orientation = 'vertical' | 'horizontal';\n\nconst Header = styled.div<{collapsed: boolean; orientation: Orientation}>`\n    position: absolute;\n    display: flex;\n    flex-direction: row;\n    flex-grow: 0;\n    flex-shrink: 0;\n    height: 30px;\n    min-width: 100%;\n    transform: rotate(0) translateX(0);\n    transform-origin: top left;\n    cursor: pointer;\n    background: #eee;\n    border-bottom: 1px #ddd solid;\n    ${({collapsed, orientation}) =>\n        collapsed && orientation === 'vertical'\n            ? `\n                transform: rotate(-90deg) translateX(-100%);\n                button {\n                    display: none;\n                }\n            `\n            : ''}\n`;\n\nconst HeaderLabel = styled.div`\n    flex: 1 1 auto;\n    font-weight: bold;\n    color: rgba(0, 0, 0, 0.75);\n    line-height: 30px;\n    padding: 0 10px;\n`;\n\nconst Content = styled.div<{collapsed: boolean; orientation: Orientation}>`\n    flex: 1 1 auto;\n    padding: 30px 0 0;\n    transform: scaleX(100%) scaleY(100%);\n    transform-origin: ${({orientation}) => (orientation === 'vertical' ? 'left center' : 'center bottom')};\n    opacity: 1;\n    transition: transform 0.2s linear, opacity 0.2s linear;\n    ${({collapsed, orientation}) =>\n        collapsed\n            ? `\n                position: absolute;\n                transform: ${orientation === 'vertical' ? 'scaleX' : 'scaleY'}(0);\n                opacity: 0;\n            `\n            : ''}\n`;\n\nconst CollapseButton = styled.button`\n    display: block;\n    float: right;\n    border: none;\n    padding: 5px 10px;\n    background: transparent;\n    font-weight: bold;\n    cursor: pointer;\n    &::before {\n        content: '_';\n    }\n`;\n\nconst Wrapper = styled.div<{collapsed: boolean; orientation: Orientation}>`\n    position: relative;\n    background-color: ${({collapsed}) => (collapsed ? '#eee' : `#f6f6f6`)};\n    display: flex;\n    flex-direction: column;\n    flex: 0 0 ${({collapsed, orientation}) => (collapsed ? '30px' : `${orientation === 'vertical' ? width : height}px`)};\n    ${({orientation}) => (orientation === 'vertical' ? 'border-right' : 'border-bottom')}: 1px #ddd solid;\n    &:last-of-type {\n        ${({orientation}) => (orientation === 'vertical' ? 'border-right' : 'border-bottom')}: none;\n        ${({orientation}) => (orientation === 'vertical' ? 'border-left' : 'border-top')}: 1px #ddd solid;\n    }\n    transition: flex-basis 0.2s linear, background-color 0.2s linear;\n`;\n\nexport function CollapsiblePanel({\n    id,\n    header,\n    orientation,\n    children\n}: {\n    id: string;\n    header: React.ReactNode | string;\n    orientation: Orientation;\n    children: React.ReactNode;\n}) {\n    const [collapse, expand] = useMemo(() => [() => ui.collapsePanel(id), () => ui.expandPanel(id)], [id]);\n\n    return load(ui.observable$, ({panels}) => (\n        <Wrapper collapsed={panels[id].collapsed} orientation={orientation}>\n            <Header\n                collapsed={panels[id].collapsed}\n                orientation={orientation}\n                onClick={panels[id].collapsed ? expand : collapse}>\n                <HeaderLabel>{header}</HeaderLabel>\n                <CollapseButton />\n            </Header>\n            <Content collapsed={panels[id].collapsed} orientation={orientation}>\n                {children}\n            </Content>\n        </Wrapper>\n    ));\n}\n","import styled from '@emotion/styled';\nimport React from 'react';\n\nconst FileTitleWrapper = styled.div`\n    flex: 0 0 auto;\n    padding: 0 10px;\n    height: 30px;\n    line-height: 30px;\n    border-bottom: 1px #ddd solid;\n    background: #eee;\n    font-size: 14px;\n    color: #0033aa;\n`;\n\nconst FileTitleLabel = styled.span`\n    margin-left: 20px;\n    font-size: 12px;\n    color: #339900;\n`;\n\nexport function FileTitle({filename, readOnly}: {filename: string; readOnly: boolean}) {\n    return (\n        <FileTitleWrapper>\n            {filename.replace(/^\\//, '')}\n            {readOnly && <FileTitleLabel>Read Only</FileTitleLabel>}\n        </FileTitleWrapper>\n    );\n}\n","import React from 'react';\n\nexport const DirectoryIcon = ({color}: {color: string}) => (\n    <svg version='1.1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' width='16' height='16'>\n        <path\n            d='M0 4C3.22 4 5.24 4 6.04 4C6.43 4 6.8 4.19 7.03 4.51C7.23 4.78 7.71 5.46 8.49 6.54L16 6.54L16 16L0 16L0 4Z'\n            fill={color}\n        />\n    </svg>\n);\n\nexport const FileIcon = ({color}: {color: string}) => (\n    <svg version='1.1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' width='16' height='16'>\n        <path d='M2 10L8 10L8 4L14 4L14 16L2 16' fill={color} />\n        <path d='M2 9L7 9L7 4' fill={color} />\n    </svg>\n);\n","import styled from '@emotion/styled';\nimport React, {useCallback, useMemo} from 'react';\nimport {FileTree} from 'lib/file-tree';\nimport {DirectoryIcon, FileIcon} from './icons';\n\ninterface FileTreeBranch {\n    name: string;\n    filename: string;\n    readOnly: boolean;\n    children: FileTreeBranch[];\n}\n\nfunction buildTree(fileTree: FileTree): FileTreeBranch[] {\n    const result: FileTreeBranch[] = [];\n    const items: {[key: string]: FileTreeBranch} = {};\n    for (const filename of Object.keys(fileTree)) {\n        const bits = filename.replace(/^\\//, '').split('/');\n        let parentTreeItem = null;\n        const parentTreePath = [];\n        while (bits.length > 1) {\n            const bit = bits.shift()!;\n            parentTreePath.push(bit);\n            const parentPath = parentTreePath.join('/');\n            if (!items[parentPath]) {\n                items[parentPath] = {\n                    name: bit,\n                    filename: parentPath,\n                    readOnly: true,\n                    children: []\n                };\n                if (parentTreeItem) {\n                    parentTreeItem.children.push(items[parentPath]);\n                } else {\n                    result.push(items[parentPath]);\n                }\n            }\n            parentTreeItem = items[parentPath];\n        }\n        const name = bits.shift()!;\n        const item: FileTreeBranch = {\n            name,\n            filename,\n            readOnly: Boolean(fileTree[filename].readOnly),\n            children: []\n        };\n        if (parentTreeItem) {\n            parentTreeItem.children.push(item);\n        } else {\n            result.push(item);\n        }\n    }\n    return result;\n}\n\nconst FileTreeViewWrapper = styled.div`\n    position: relative;\n    user-select: none;\n`;\n\nconst FileTreeBranchWrapper = styled.div`\n    margin-left: 15px;\n`;\n\nconst FileTreeBranchLabelText = styled.div`\n    position: relative;\n    z-index: 1;\n`;\n\nconst FileTreeBranchLabelActions = styled.div`\n    float: right;\n    margin-right: 15px;\n    color: gray;\n`;\n\nconst FileTreeBranchRevert = styled.button`\n    background: none;\n    color: white;\n    cursor: pointer;\n    border: none;\n    padding: 2px 5px;\n    margin-right: -6px;\n    &:hover {\n        text-decoration: underline;\n        text-decoration-style: dotted;\n    }\n`;\n\nconst FileTreeBranchLabel = styled.div<{selected: boolean; selectable: boolean; readOnly: boolean}>`\n    display: block;\n    cursor: ${({selectable}) => (selectable ? 'pointer' : 'default')};\n    pointer-events: ${({selectable}) => (selectable ? 'all' : 'none')};\n    color: ${({selected, readOnly}) => (selected ? 'white' : readOnly ? '#555' : 'black')};\n    height: 30px;\n    line-height: 30px;\n    font-size: 14px;\n    ${({selected}) =>\n        selected\n            ? `\n                &::before {\n                    z-index: 0;\n                    display: block;\n                    position: absolute;\n                    content: '';\n                    background: rgb(101,125,176);\n                    left: 0;\n                    right: 0;\n                    height: 30px;\n                }`\n            : ''}\n`;\n\nconst FileTreeBranchContent = styled.div``;\n\nfunction FileTreeViewBranch({\n    branch,\n    selectedFilename,\n    onSelectFilename,\n    modifiedFilenames,\n    revertFile\n}: {\n    branch: FileTreeBranch;\n    selectedFilename: string;\n    onSelectFilename: (filename: string) => void;\n    modifiedFilenames: Record<string, true>;\n    revertFile: (filename: string) => void;\n}) {\n    const onClick = useCallback(() => {\n        onSelectFilename(branch.filename);\n    }, [branch, onSelectFilename]);\n    const selected = selectedFilename === branch.filename;\n    const isDirectory = branch.children.length > 0;\n    const revert = useCallback(() => revertFile(branch.filename), [branch, revertFile]);\n    return (\n        <FileTreeBranchWrapper>\n            <FileTreeBranchLabel\n                onClick={onClick}\n                selectable={branch.children.length === 0}\n                selected={selected}\n                readOnly={branch.readOnly}>\n                <FileTreeBranchLabelText>\n                    {isDirectory ? (\n                        <DirectoryIcon color='gray' />\n                    ) : (\n                        <FileIcon color={selected ? 'rgba(255,255,255,0.75)' : 'gray'} />\n                    )}{' '}\n                    {branch.name}\n                    <FileTreeBranchLabelActions>\n                        {modifiedFilenames[branch.filename] &&\n                            (selected ? <FileTreeBranchRevert onClick={revert}>revert</FileTreeBranchRevert> : '*')}\n                    </FileTreeBranchLabelActions>\n                </FileTreeBranchLabelText>\n            </FileTreeBranchLabel>\n            {isDirectory && (\n                <FileTreeBranchContent>\n                    {branch.children.map((subBranch) => (\n                        <FileTreeViewBranch\n                            key={subBranch.filename}\n                            branch={subBranch}\n                            selectedFilename={selectedFilename}\n                            onSelectFilename={onSelectFilename}\n                            modifiedFilenames={modifiedFilenames}\n                            revertFile={revertFile}\n                        />\n                    ))}\n                </FileTreeBranchContent>\n            )}\n        </FileTreeBranchWrapper>\n    );\n}\n\nexport function FileTreeView({\n    fileTree,\n    selectedFilename,\n    onSelectFilename,\n    modifiedFilenames,\n    revertFile\n}: {\n    fileTree: FileTree;\n    selectedFilename: string;\n    onSelectFilename: (filename: string) => void;\n    modifiedFilenames: Record<string, true>;\n    revertFile: (filename: string) => void;\n}) {\n    const treeItems = useMemo(() => buildTree(fileTree), [fileTree]);\n    return (\n        <FileTreeViewWrapper>\n            {treeItems.map((branch) => (\n                <FileTreeViewBranch\n                    key={branch.filename}\n                    branch={branch}\n                    selectedFilename={selectedFilename}\n                    onSelectFilename={onSelectFilename}\n                    modifiedFilenames={modifiedFilenames}\n                    revertFile={revertFile}\n                />\n            ))}\n        </FileTreeViewWrapper>\n    );\n}\n","import styled from '@emotion/styled';\nimport debounce from 'debounce';\nimport React, {useEffect, useRef, useState} from 'react';\n\ntype PropsWithSize<T> = T & {\n    width?: string | number;\n    height?: string | number;\n};\n\nconst Wrapper = styled.div`\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    overflow: hidden;\n`;\n\nexport function decorateWithAutoResize<T>(\n    Component: React.ComponentType<PropsWithSize<T>>\n): React.ComponentType<PropsWithSize<T>> {\n    return (props: T) => {\n        const [size, setSize] = useState({width: '100%', height: '100%'});\n        const wrapperRef = useRef<HTMLDivElement>(null);\n        useEffect(() => {\n            const updateSize = debounce(() => {\n                setSize((size) => {\n                    if (!wrapperRef.current) {\n                        return size;\n                    }\n                    const newWidth = `${wrapperRef.current.offsetWidth}px`;\n                    const newHeight = `${wrapperRef.current.offsetHeight}px`;\n                    if (size.width === newWidth && size.height === newHeight) {\n                        return size;\n                    }\n                    return {\n                        width: newWidth,\n                        height: newHeight\n                    };\n                });\n            }, 100);\n            window.addEventListener('resize', updateSize, {passive: true});\n            const interval = setInterval(updateSize, 500);\n            return () => {\n                window.removeEventListener('resize', updateSize);\n                clearInterval(interval);\n            };\n        }, [wrapperRef]);\n        return (\n            <Wrapper ref={wrapperRef}>\n                <Component {...props} {...size} />\n            </Wrapper>\n        );\n    };\n}\n","import styled from '@emotion/styled';\nimport React from 'react';\n\nconst DialogBackground = styled.div`\n    display: block;\n    position: fixed;\n    background: rgba(0, 0, 0, 0.5);\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 1000;\n`;\n\nconst DialogWrapper = styled.div`\n    position: absolute;\n    top: 50px;\n    right: 50px;\n    bottom: 50px;\n    left: 50px;\n    padding: 40px 10px 10px;\n    background: white;\n`;\n\nconst CloseButton = styled.button`\n    position: absolute;\n    top: 10px;\n    right: 10px;\n`;\n\nconst stopEventPropagation = (e: React.UIEvent) => e.stopPropagation();\n\nexport function Dialog({children, onClose}: {children: React.ReactNode; onClose: () => void}) {\n    return (\n        <DialogBackground onClick={onClose}>\n            <DialogWrapper onClick={stopEventPropagation}>\n                <CloseButton onClick={onClose}>Close</CloseButton>\n                {children}\n            </DialogWrapper>\n        </DialogBackground>\n    );\n}\n","import {editor} from 'monaco-editor';\nimport React from 'react';\nimport {decorateWithAutoResize} from 'components/auto-resizer';\n\ninterface MonacoDiffViewerProps {\n    width?: string | number;\n    height?: string | number;\n    original: editor.IModel;\n    modified: editor.IModel;\n    options?: editor.IDiffEditorConstructionOptions;\n}\n\nexport const MonacoDiffViewer = decorateWithAutoResize(\n    class extends React.Component<MonacoDiffViewerProps> {\n        protected instance: editor.IStandaloneDiffEditor | null = null;\n        protected instanceDiv: HTMLElement | null = null;\n        assignRef = (newRef: HTMLElement | null) => (this.instanceDiv = newRef);\n\n        public componentDidMount() {\n            this.instance = editor.createDiffEditor(this.instanceDiv!, {\n                ...this.props.options,\n                renderValidationDecorations: 'on'\n            });\n            this.setModels();\n        }\n\n        protected setModels() {\n            const {original, modified} = this.props;\n            this.instance!.setModel({\n                original,\n                modified\n            });\n        }\n\n        public componentDidUpdate(prevProps: Readonly<MonacoDiffViewerProps>): void {\n            if (this.props.modified !== prevProps.modified || this.props.original !== prevProps.original) {\n                this.setModels();\n            }\n            if (this.props.width !== prevProps.width || this.props.height !== prevProps.height) {\n                this.instance!.layout();\n            }\n        }\n\n        public componentWillUnmount() {\n            if (this.instance) {\n                this.instance.dispose();\n            }\n        }\n\n        render() {\n            return <div ref={this.assignRef} style={{width: this.props.width, height: this.props.height}} />;\n        }\n    }\n);\n","import styled from '@emotion/styled';\nimport {editor} from 'monaco-editor';\nimport React, {useMemo} from 'react';\nimport {CollapsiblePanel} from 'components/collapsible-panel';\nimport {Dialog} from 'components/dialog';\nimport {FileTitle} from 'components/file-title';\nimport {FileTreeView} from 'components/file-tree-view';\nimport {MonacoDiffViewer} from 'components/monaco-diff-viewer';\nimport {FileTree} from 'lib/file-tree';\n\ninterface DiffDialogProps {\n    original: editor.IModel;\n    modified: editor.IModel;\n    selectedFilename: string;\n    filenames: string[];\n    onSelectFile: (filename: string) => void;\n    onClose: () => void;\n}\n\nconst Panes = styled.div`\n    display: flex;\n    height: 100%;\n    border: 1px #ddd solid;\n`;\n\nconst EditorArea = styled.div`\n    flex: 1 1 auto;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst EditorAreaCaption = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    flex: 0 0 30px;\n    background: #f6f6f6;\n`;\n\nconst EditorAreaTitle = styled.div`\n    font-size: 14px;\n`;\n\nconst EditorAreaContent = styled.div`\n    flex: 1 1 auto;\n    position: relative;\n    border-top: 1px #ddd solid;\n`;\n\nconst noop = () => null;\n\nfunction createTreeFromFilenames(filenames: string[]): FileTree {\n    return filenames.reduce((result, filename) => {\n        result[filename] = {content: ''};\n        return result;\n    }, {} as FileTree);\n}\n\nexport function DiffDialog(props: DiffDialogProps) {\n    const {onClose, filenames, selectedFilename, onSelectFile, ...otherProps} = props;\n    const fileTree = useMemo(() => createTreeFromFilenames(filenames), [filenames]);\n    return (\n        <Dialog onClose={onClose}>\n            <Panes>\n                <CollapsiblePanel id='solutionFiles' header='Files' orientation='vertical'>\n                    <FileTreeView\n                        fileTree={fileTree}\n                        selectedFilename={selectedFilename}\n                        onSelectFilename={onSelectFile}\n                        modifiedFilenames={{}}\n                        revertFile={noop}\n                    />\n                </CollapsiblePanel>\n                <EditorArea>\n                    <FileTitle filename={selectedFilename} readOnly={false} />\n                    <EditorAreaCaption>\n                        <EditorAreaTitle>Possible solution</EditorAreaTitle>\n                        <EditorAreaTitle>Current version</EditorAreaTitle>\n                    </EditorAreaCaption>\n                    <EditorAreaContent>\n                        <MonacoDiffViewer {...otherProps} />\n                    </EditorAreaContent>\n                </EditorArea>\n            </Panes>\n        </Dialog>\n    );\n}\n","import {editor, languages, MarkerSeverity} from 'monaco-editor';\nimport {DiagnosticMessageChain} from 'typescript';\n\nexport function flattenDiagnosticMessageText(\n    diag: string | DiagnosticMessageChain | undefined,\n    newLine: string,\n    indent = 0\n): string {\n    if (typeof diag === 'string') {\n        return diag;\n    } else if (diag === undefined) {\n        return '';\n    }\n    let result = '';\n    if (indent) {\n        result += newLine;\n\n        for (let i = 0; i < indent; i++) {\n            result += '  ';\n        }\n    }\n    result += diag.messageText;\n    indent++;\n    if (diag.next) {\n        for (const kid of diag.next) {\n            result += flattenDiagnosticMessageText(kid, newLine, indent);\n        }\n    }\n    return result;\n}\n\nexport async function revalidateModel(model: editor.IModel) {\n    if (!model || model.isDisposed()) return;\n\n    const getWorker = await languages.typescript.getTypeScriptWorker();\n    const worker = await getWorker(model.uri);\n    const diagnostics = (\n        await Promise.all([\n            worker.getSyntacticDiagnostics(model.uri.toString()),\n            worker.getSemanticDiagnostics(model.uri.toString())\n        ])\n    ).reduce((a, it) => a.concat(it));\n\n    const markers = diagnostics.map((d) => {\n        const start = model.getPositionAt(d.start!);\n        const end = model.getPositionAt(d.start! + d.length!);\n        return {\n            severity: MarkerSeverity.Error,\n            startLineNumber: start.lineNumber,\n            startColumn: start.column,\n            endLineNumber: end.lineNumber,\n            endColumn: end.column,\n            message: flattenDiagnosticMessageText(d.messageText, '\\n')\n        };\n    });\n    editor.setModelMarkers(model, 'typescript', markers);\n}\n","import {debounce} from 'debounce';\nimport {editor, languages, Uri} from 'monaco-editor';\nimport React from 'react';\nimport {decorateWithAutoResize} from 'components/auto-resizer';\nimport {DiffDialog} from 'components/monaco-editor/diff-dialog';\nimport {FileTree} from 'lib/file-tree';\nimport {revalidateModel} from './revalidate-model';\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions({\n    strict: true,\n    target: languages.typescript.ScriptTarget.ES2018,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    typeRoots: ['declarations']\n});\n\nexport interface MonacoEditorProps {\n    width?: string | number;\n    height?: string | number;\n    theme?: string;\n    options?: editor.IStandaloneEditorConstructionOptions;\n    namespace: string;\n    values: FileTree;\n    selectedFilename: string;\n    onChange: (filename: string, content: string) => void;\n    onNavigate: (filename: string) => void;\n    position: number | undefined;\n    showSolutions: boolean;\n    onSolutionsClose: () => void;\n}\n\nconst extensionsToLanguages: {[ext: string]: string} = {\n    ts: 'typescript',\n    json: 'json'\n};\n\ninterface Models {\n    [key: string]: editor.IModel;\n}\n\ninterface MonacoEditorState {\n    solutionsSelectedFilename?: string;\n    initialized?: boolean;\n}\n\nexport const MonacoEditor = decorateWithAutoResize(\n    class extends React.Component<MonacoEditorProps, MonacoEditorState> {\n        protected instance: editor.IStandaloneCodeEditor | null = null;\n        protected instanceDiv: HTMLElement | null = null;\n        protected models: Models = {};\n        protected solutionsModels: Models = {};\n        protected solutionsFilenames: string[] = [];\n        protected viewStates: {[filename: string]: editor.ICodeEditorViewState} = {};\n        protected lastUpdates: {[filename: string]: string} = {};\n\n        constructor(props: MonacoEditorProps) {\n            super(props);\n            this.state = {};\n        }\n\n        public componentDidMount() {\n            const {props} = this;\n\n            for (const [filename, {content, solution}] of Object.entries(props.values)) {\n                this.lastUpdates[filename] = content;\n                const language = extensionsToLanguages[filename.split('.').pop()!];\n                const model = editor.createModel(content, language, Uri.file(`${props.namespace}/${filename}`));\n                model.onDidChangeContent(\n                    debounce(() => {\n                        const newValue = model.getValue();\n                        this.lastUpdates[filename] = newValue;\n                        this.props.onChange(filename, newValue);\n                    }, 200)\n                );\n                this.models[filename] = model;\n                if (solution !== undefined) {\n                    this.solutionsModels[filename] = editor.createModel(solution, language);\n                }\n            }\n            this.solutionsFilenames = Object.keys(this.solutionsModels);\n\n            this.instance = editor.create(this.instanceDiv!, {\n                ...this.props.options,\n                model: this.models[props.selectedFilename],\n                readOnly: Boolean(props.values[props.selectedFilename].readOnly),\n                renderValidationDecorations: 'on'\n            });\n\n            this.instance.layout();\n\n            this.setState({initialized: true});\n        }\n\n        public componentWillUnmount() {\n            for (const filename of Object.keys(this.models)) {\n                this.models[filename].dispose();\n            }\n            for (const filename of Object.keys(this.solutionsModels)) {\n                this.solutionsModels[filename].dispose();\n            }\n            if (this.instance) {\n                this.instance.dispose();\n            }\n        }\n\n        public componentDidUpdate(prevProps: Readonly<MonacoEditorProps>): void {\n            if (!this.instance) {\n                return;\n            }\n            const newSelectedFilename = this.props.selectedFilename;\n            if (newSelectedFilename !== prevProps.selectedFilename) {\n                const model = this.models[newSelectedFilename];\n                this.viewStates[prevProps.selectedFilename] = this.instance.saveViewState()!;\n                this.instance.setModel(model);\n                this.instance.updateOptions({\n                    readOnly: Boolean(this.props.values[newSelectedFilename].readOnly)\n                });\n                revalidateModel(model);\n                const viewState = this.viewStates[newSelectedFilename];\n                if (viewState) {\n                    this.instance.restoreViewState(viewState);\n                }\n                this.instance.focus();\n            }\n            if (this.props.position !== prevProps.position) {\n                if (this.props.position !== undefined) {\n                    const model = this.models[this.props.selectedFilename];\n                    const position = model.getPositionAt(this.props.position);\n                    this.instance.setPosition(position);\n                    this.instance.revealLine(position.lineNumber);\n                    this.instance.focus();\n                }\n            }\n            if (this.props.width !== prevProps.width || this.props.height !== prevProps.height) {\n                this.instance.layout();\n            }\n            if (this.props.values !== prevProps.values) {\n                for (const [filename, value] of Object.entries(this.props.values)) {\n                    if (value.content !== this.lastUpdates[filename]) {\n                        this.lastUpdates[filename] = value.content;\n                        this.models[filename].setValue(value.content);\n                    }\n                }\n            }\n        }\n\n        render() {\n            const selectedSolutionFilename = this.getSelectedSolutionFilename();\n            return (\n                <>\n                    <div ref={this.assignRef} style={{width: this.props.width, height: this.props.height}} />\n                    {this.state.initialized && this.props.showSolutions && (\n                        <DiffDialog\n                            selectedFilename={selectedSolutionFilename}\n                            original={this.solutionsModels[selectedSolutionFilename]}\n                            modified={this.models[selectedSolutionFilename]}\n                            onClose={this.props.onSolutionsClose}\n                            onSelectFile={this.setSelectedSolutionFilename}\n                            filenames={this.solutionsFilenames}\n                        />\n                    )}\n                </>\n            );\n        }\n\n        setSelectedSolutionFilename = (solutionsSelectedFilename: string) => this.setState({solutionsSelectedFilename});\n\n        getSelectedSolutionFilename() {\n            if (this.state && this.state.solutionsSelectedFilename) {\n                return this.state.solutionsSelectedFilename;\n            }\n            return this.solutionsFilenames[0];\n        }\n\n        assignRef = (newRef: HTMLElement | null) => (this.instanceDiv = newRef);\n    }\n);\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport {ValidationError} from 'lib/validation-error';\n\nconst ValidationErrorsWrapper = styled.ol`\n    padding: 0;\n    margin: 5px 0 5px 40px;\n    list-style: none;\n    counter-reset: errors;\n`;\n\nconst ValidationErrorsItem = styled.li`\n    font-family: monospace;\n    font-size: 12px;\n    white-space: pre-wrap;\n    cursor: pointer;\n    & + & {\n        margin-top: 10px;\n    }\n    &:hover {\n        text-decoration: underline;\n    }\n    &::before {\n        counter-increment: errors;\n        content: counter(errors) '.';\n        display: inline-block;\n        width: 30px;\n        text-align: right;\n        margin-right: 10px;\n        margin-left: -40px;\n        color: gray;\n    }\n`;\n\nexport const ValidationErrors = React.memo(function ValidationErrors({\n    errors,\n    onClick\n}: {\n    errors: ValidationError[];\n    onClick: (error: ValidationError) => void;\n}) {\n    return (\n        <ValidationErrorsWrapper>\n            {errors.map((error, index) => (\n                <ValidationErrorsItem key={index} onClick={() => onClick(error)}>\n                    {error.messageText}\n                </ValidationErrorsItem>\n            ))}\n        </ValidationErrorsWrapper>\n    );\n});\n","/* eslint @typescript-eslint/no-var-requires: off */\n/* eslint import/no-webpack-loader-syntax: off */\n\nimport {FileTree} from './file-tree';\n\nconst typeAssertions: FileTree = {\n    '/node_modules/type-assertions/index.ts': {\n        content: require('!!raw-loader!../exercises/node_modules/type-assertions/index.ts').default,\n        readOnly: true\n    }\n};\n\nfunction formatJson<T>(value: T): string {\n    return JSON.stringify(value, null, 4);\n}\n\nexport const exerciseStructures: Record<string, FileTree> = {\n    1: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/1/index.ts').default,\n            solution: require('!!raw-loader!../exercises/1/index.solution.ts').default\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/1/test.ts').default,\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    2: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/2/index.ts').default,\n            solution: require('!!raw-loader!../exercises/2/index.solution.ts').default\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/2/test.ts').default,\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    3: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/3/index.ts').default,\n            solution: require('!!raw-loader!../exercises/3/index.solution.ts').default\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/3/test.ts').default,\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    4: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/4/index.ts').default,\n            solution: require('!!raw-loader!../exercises/4/index.solution.ts').default\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/4/test.ts').default,\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    5: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/5/index.ts').default,\n            solution: require('!!raw-loader!../exercises/5/index.solution.ts').default\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/5/test.ts').default,\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    6: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/6/index.ts').default,\n            solution: require('!!raw-loader!../exercises/6/index.solution.ts').default\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/6/test.ts').default,\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    7: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/7/index.ts').default,\n            solution: require('!!raw-loader!../exercises/7/index.solution.ts').default\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/7/test.ts').default,\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    8: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/8/index.ts').default,\n            solution: require('!!raw-loader!../exercises/8/index.solution.ts').default\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/8/test.ts').default,\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    9: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/9/index.ts').default,\n            solution: require('!!raw-loader!../exercises/9/index.solution.ts').default\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/9/test.ts').default,\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    10: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/10/index.ts').default,\n            solution: require('!!raw-loader!../exercises/10/index.solution.ts').default\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/10/test.ts').default,\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    11: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/11/index.ts').default,\n            readOnly: true\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/11/test.ts').default,\n            readOnly: true\n        },\n        '/declarations/str-utils/index.d.ts': {\n            content: require('!!raw-loader!../exercises/11/declarations/str-utils/index.d.ts').default,\n            solution: require('!!raw-loader!../exercises/11/declarations/str-utils/index.solution.d.ts').default\n        },\n        '/node_modules/str-utils/index.js': {\n            content: require('!!raw-loader!../exercises/11/node_modules/str-utils/index.js').default,\n            readOnly: true\n        },\n        '/node_modules/str-utils/package.json': {\n            content: formatJson(require('../exercises/11/node_modules/str-utils/package.json')),\n            readOnly: true\n        },\n        '/node_modules/str-utils/README.md': {\n            content: require('!!raw-loader!../exercises/11/node_modules/str-utils/README.md').default,\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    12: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/12/index.ts').default,\n            readOnly: true\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/12/test.ts').default,\n            readOnly: true\n        },\n        '/declarations/stats/index.d.ts': {\n            content: require('!!raw-loader!../exercises/12/declarations/stats/index.d.ts').default,\n            solution: require('!!raw-loader!../exercises/12/declarations/stats/index.solution.d.ts').default\n        },\n        '/node_modules/stats/index.js': {\n            content: require('!!raw-loader!../exercises/12/node_modules/stats/index.js').default,\n            readOnly: true\n        },\n        '/node_modules/stats/package.json': {\n            content: formatJson(require('../exercises/12/node_modules/stats/package.json')),\n            readOnly: true\n        },\n        '/node_modules/stats/README.md': {\n            content: require('!!raw-loader!../exercises/12/node_modules/stats/README.md').default,\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    13: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/13/index.ts').default,\n            readOnly: true\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/13/test.ts').default,\n            readOnly: true\n        },\n        '/module-augmentations/date-wizard/index.d.ts': {\n            content: require('!!raw-loader!../exercises/13/module-augmentations/date-wizard/index.ts').default,\n            solution: require('!!raw-loader!../exercises/13/module-augmentations/date-wizard/index.solution.ts').default\n        },\n        '/node_modules/date-wizard/index.js': {\n            content: require('!!raw-loader!../exercises/13/node_modules/date-wizard/index.js').default,\n            readOnly: true\n        },\n        '/node_modules/date-wizard/index.d.ts': {\n            content: require('!!raw-loader!../exercises/13/node_modules/date-wizard/index.d.ts').default,\n            readOnly: true\n        },\n        '/node_modules/date-wizard/package.json': {\n            content: formatJson(require('../exercises/13/node_modules/date-wizard/package.json')),\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    14: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/14/index.ts').default,\n            solution: require('!!raw-loader!../exercises/14/index.solution.ts').default\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/14/test.ts').default,\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    15: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/15/index.ts').default,\n            solution: require('!!raw-loader!../exercises/15/index.solution.ts').default\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/15/test.ts').default,\n            readOnly: true\n        },\n        ...typeAssertions\n    },\n    16: {\n        '/index.ts': {\n            content: require('!!raw-loader!../exercises/16/index.ts').default,\n            readOnly: true\n        },\n        '/test.ts': {\n            content: require('!!raw-loader!../exercises/16/test.ts').default,\n            readOnly: true\n        }\n    }\n};\n","export const localData = {\n    get<T>(key: string, defaultValue: T): T {\n        const data = localStorage.getItem(key);\n        if (data === null) {\n            return defaultValue;\n        }\n        return JSON.parse(data);\n    },\n    set(key: string, value: unknown) {\n        localStorage.setItem(key, JSON.stringify(value));\n    }\n};\n","import debounce from 'debounce';\nimport {Observable, ReplaySubject} from 'rxjs';\nimport {exerciseStructures} from 'lib/exercise-structures';\nimport {FileTree} from 'lib/file-tree';\nimport {localData} from 'lib/local-data';\n\nexport interface FileContents {\n    [filename: string]: string;\n}\n\nfunction createModifiedFileTree(contents: FileContents, tree: FileTree) {\n    const result: FileTree = {};\n    for (const filename of Object.keys(tree)) {\n        if (Object.prototype.hasOwnProperty.call(contents, filename)) {\n            result[filename] = {\n                content: contents[filename],\n                solution: tree[filename].solution,\n                readOnly: tree[filename].readOnly\n            };\n        } else {\n            result[filename] = tree[filename];\n        }\n    }\n    return result;\n}\n\ninterface Exercise {\n    observable$: Observable<FileTree>;\n    update(filename: string, code: string): void;\n    revert(fileName: string): void;\n}\n\nconst exercisesCache: {[key: number]: Exercise} = {};\n\nexport function createExercise(exerciseNumber: number) {\n    if (!exercisesCache[exerciseNumber]) {\n        const localStorageKey = `exercise.${exerciseNumber}`;\n        const exerciseOriginalFiles = exerciseStructures[exerciseNumber];\n\n        let files = localData.get(localStorageKey, {} as FileContents);\n\n        const saveToLocalStorage = debounce(() => {\n            localData.set(localStorageKey, files);\n        }, 500);\n\n        const subject = new ReplaySubject<FileTree>(1);\n        subject.next(createModifiedFileTree(files, exerciseOriginalFiles));\n\n        exercisesCache[exerciseNumber] = {\n            observable$: subject,\n            update(filename: string, code: string) {\n                files = {...files, [filename]: code};\n                saveToLocalStorage();\n                subject.next(createModifiedFileTree(files, exerciseOriginalFiles));\n            },\n            revert(filename: string) {\n                files = {...files};\n                delete files[filename];\n                saveToLocalStorage();\n                subject.next(createModifiedFileTree(files, exerciseOriginalFiles));\n            }\n        };\n    }\n\n    return exercisesCache[exerciseNumber];\n}\n","import qs from 'querystring';\nimport {ReplaySubject} from 'rxjs';\n\ninterface UrlParams {\n    exercise: string;\n    file: string;\n}\n\nconst defaultUrlParams = {\n    exercise: '1',\n    file: '/index.ts'\n};\n\nexport const urlParams = (() => {\n    const getCurrentRawParams = () => qs.parse(String(window.location.hash).substr(1));\n    const getCurrentParams = () => Object.assign({}, defaultUrlParams, getCurrentRawParams());\n\n    const subject = new ReplaySubject<UrlParams>(1);\n\n    subject.next(getCurrentParams());\n\n    window.addEventListener('hashchange', () => subject.next(getCurrentParams()));\n\n    return {\n        observable$: subject,\n        getCurrentRawParams,\n        extend(params: Partial<UrlParams>) {\n            window.location.hash = `#${qs.stringify(Object.assign(getCurrentParams(), params))}`;\n        }\n    };\n})();\n","import {ReplaySubject} from 'rxjs';\nimport {exerciseStructures} from 'lib/exercise-structures';\nimport {localData} from 'lib/local-data';\nimport {migrate} from 'observables/migrations/2020-09-26';\nimport {urlParams} from 'observables/url-params';\n\nexport interface ExercisesProgress {\n    completedExercises: Record<string, boolean>;\n}\n\nconst initialState: ExercisesProgress = {\n    completedExercises: {}\n};\n\nfunction switchToExercise(exerciseNumber: number) {\n    urlParams.extend({exercise: String(exerciseNumber), file: '/index.ts'});\n}\n\nexport const exercisesProgress = (() => {\n    migrate();\n\n    const localStorageKey = 'exercisesProgress';\n    const subject = new ReplaySubject<ExercisesProgress>(1);\n\n    const exercisesCount = Object.keys(exerciseStructures).length;\n\n    let state = localData.get(localStorageKey, initialState);\n\n    const saveToLocalStorage = () => localData.set(localStorageKey, state);\n\n    let currentExerciseNumber = 1;\n\n    if (!urlParams.getCurrentRawParams().exercise) {\n        for (currentExerciseNumber = 1; currentExerciseNumber <= exercisesCount; currentExerciseNumber++) {\n            if (!state.completedExercises[currentExerciseNumber]) {\n                break;\n            }\n        }\n\n        if (currentExerciseNumber !== 1) {\n            switchToExercise(currentExerciseNumber);\n        }\n    }\n\n    urlParams.observable$.subscribe((params) => {\n        currentExerciseNumber = Number(params.exercise || '1');\n    });\n\n    subject.next(state);\n\n    return {\n        completeExercise() {\n            state = {...state, completedExercises: {...state.completedExercises, [currentExerciseNumber]: true}};\n            saveToLocalStorage();\n            currentExerciseNumber = Math.min(currentExerciseNumber + 1, exercisesCount);\n            switchToExercise(currentExerciseNumber);\n            subject.next(state);\n        },\n        skipExercise() {\n            currentExerciseNumber = Math.min(currentExerciseNumber + 1, exercisesCount);\n            switchToExercise(currentExerciseNumber);\n        },\n        goToExercise(exerciseNumber: number) {\n            switchToExercise(exerciseNumber);\n        },\n        observable$: subject\n    };\n})();\n","interface OldExercisesProgress {\n    currentExerciseNumber: number;\n    lastCompletedExerciseNumber: number;\n}\n\ninterface NewExercisesProgress {\n    completedExercises: Record<string, boolean>;\n}\n\nexport function migrate() {\n    const localStorageKey = 'exercisesProgress';\n    const oldValueRaw = localStorage.getItem(localStorageKey);\n    if (oldValueRaw) {\n        try {\n            const oldValue = JSON.parse(oldValueRaw) as OldExercisesProgress | NewExercisesProgress;\n            if ('lastCompletedExerciseNumber' in oldValue) {\n                const newValue: NewExercisesProgress = {completedExercises: {}};\n                for (let i = 1; i <= oldValue.lastCompletedExerciseNumber; i++) {\n                    newValue.completedExercises[i] = true;\n                }\n                localStorage.setItem(localStorageKey, JSON.stringify(newValue));\n            }\n        } catch (e) {\n            localStorage.removeItem(localStorageKey);\n        }\n    }\n}\n","import {Observable, OperatorFunction} from 'rxjs';\nimport {FileTree} from 'lib/file-tree';\nimport {ValidationError} from 'lib/validation-error';\nimport {FileContents} from 'observables/exercise';\n\ninterface TypeScriptService extends Worker {\n    init(files: FileContents): Promise<void>;\n    updateFiles(files: FileContents): Promise<void>;\n    getErrors(): Promise<ValidationError[]>;\n}\n\n// eslint-disable-next-line import/no-webpack-loader-syntax, @typescript-eslint/no-var-requires\nconst createService = require('workerize-loader!./service.ts') as () => TypeScriptService;\n\nfunction fileTreeToFileContents(tree: FileTree): FileContents {\n    return Object.keys(tree).reduce((res, filename) => {\n        res[filename] = tree[filename].content;\n        return res;\n    }, {} as FileContents);\n}\n\nfunction diffFiles(oldFiles: FileContents, newFiles: FileContents) {\n    return Object.keys(newFiles).reduce((res, filename) => {\n        if (newFiles[filename] !== oldFiles[filename]) {\n            res[filename] = newFiles[filename];\n        }\n        return res;\n    }, {} as FileContents);\n}\n\nexport function checkTypeScriptProject(): OperatorFunction<FileTree, ValidationError[]> {\n    return (parentObservable: Observable<FileTree>): Observable<ValidationError[]> => {\n        const service = createService();\n        return new Observable((subscriber) => {\n            let initialized = false;\n            let prevFiles = {} as FileContents;\n            const subscription = parentObservable.subscribe(async (files) => {\n                const contents = fileTreeToFileContents(files);\n                if (!initialized) {\n                    initialized = true;\n                    prevFiles = contents;\n                    await service.init(contents);\n                } else {\n                    const oldFiles = prevFiles;\n                    const newFiles = contents;\n                    prevFiles = contents; // Doing this assignment before the the update call. Just in case.\n                    await service.updateFiles(diffFiles(oldFiles, newFiles));\n                }\n                subscriber.next(await service.getErrors());\n            });\n            subscriber.add(() => {\n                service.terminate();\n                subscription.unsubscribe();\n            });\n        });\n    };\n}\n","import styled from '@emotion/styled';\nimport React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport {CollapsiblePanel} from 'components/collapsible-panel';\nimport {FileTitle} from 'components/file-title';\nimport {FileTreeView} from 'components/file-tree-view';\nimport {load} from 'components/loading-container';\nimport {MonacoEditor} from 'components/monaco-editor';\nimport {ValidationErrors} from 'components/validation-errors';\nimport {exerciseStructures} from 'lib/exercise-structures';\nimport {FileTree} from 'lib/file-tree';\nimport {ValidationError} from 'lib/validation-error';\nimport {createExercise} from 'observables/exercise';\nimport {exercisesProgress} from 'observables/exercises-progress';\nimport {urlParams} from 'observables/url-params';\nimport {checkTypeScriptProject} from 'operators/check-type-script-project';\n\nconst lastExerciseNumber = Number(Object.keys(exerciseStructures).pop());\n\nconst ExerciseWrapper = styled.div`\n    flex: 1 0 100%;\n    align-self: stretch;\n    display: flex;\n    flex-direction: row;\n`;\n\nconst EditorWrapper = styled.div`\n    flex: 1 1 auto;\n    position: relative;\n    min-width: 1px;\n`;\n\nconst ExercisePanelWrapper = styled.div`\n    padding: 5px 10px;\n    overflow: auto;\n    height: 120px;\n    box-sizing: border-box;\n`;\n\nconst MainAreaWrapper = styled.div`\n    min-width: 1px;\n    flex: 1 1 auto;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst CompletedExerciseWrapper = styled.div`\n    text-align: center;\n`;\n\nconst CompletedExerciseLabel = styled.div`\n    margin: 20px 0 0;\n`;\n\nconst ButtonsWrapper = styled.div`\n    text-align: center;\n    margin: 20px 0;\n`;\n\nconst ExerciseButton = styled.button`\n    font-size: 16px;\n    text-align: center;\n    & + & {\n        margin-left: 10px;\n    }\n`;\n\nfunction calculateModifiedFilenames(exerciseNumber: number, fileTree: FileTree) {\n    const files = exerciseStructures[exerciseNumber];\n    const result: Record<string, true> = {};\n    for (const [filename, {content}] of Object.entries(fileTree)) {\n        if (content !== files[filename].content) {\n            result[filename] = true;\n        }\n    }\n    return result;\n}\n\nexport function Exercise({exerciseNumber}: {exerciseNumber: number}) {\n    const exercise = useMemo(() => createExercise(exerciseNumber), [exerciseNumber]);\n    const [position, setPosition] = useState(undefined as number | undefined);\n    const [solutionsVisible, setSolutionsVisible] = useState(false);\n    const validationErrors$ = useMemo(() => exercise.observable$.pipe(checkTypeScriptProject()), [exercise]);\n    const [selectedFilename, setSelectedFilename] = useState('/index.ts');\n    useEffect(() => {\n        const subscription = urlParams.observable$.subscribe((params) => {\n            setSelectedFilename(String(params.file));\n        });\n        return () => subscription.unsubscribe();\n    }, [setSelectedFilename]);\n\n    const goToFile = useCallback((file: string) => urlParams.extend({file}), []);\n\n    const onErrorClick = useCallback(\n        (error: ValidationError) => {\n            if (!error.file) {\n                return;\n            }\n            goToFile(error.file);\n            setPosition(error.start);\n        },\n        [setPosition, goToFile]\n    );\n    const onChange = useCallback(\n        (filename: string, content: string) => {\n            exercise.update(filename, content);\n        },\n        [exercise]\n    );\n    const [showSolutions, hideSolutions] = useMemo(\n        () => [() => setSolutionsVisible(true), () => setSolutionsVisible(false)],\n        [setSolutionsVisible]\n    );\n\n    return load(exercise.observable$, (fileTree) => (\n        <ExerciseWrapper>\n            <CollapsiblePanel id='files' header='Files' orientation='vertical'>\n                <FileTreeView\n                    selectedFilename={selectedFilename}\n                    fileTree={exerciseStructures[exerciseNumber]}\n                    onSelectFilename={goToFile}\n                    modifiedFilenames={calculateModifiedFilenames(exerciseNumber, fileTree)}\n                    revertFile={exercise.revert}\n                />\n            </CollapsiblePanel>\n            <MainAreaWrapper>\n                <FileTitle filename={selectedFilename} readOnly={Boolean(fileTree[selectedFilename].readOnly)} />\n                <EditorWrapper>\n                    <MonacoEditor\n                        namespace={String(exerciseNumber)}\n                        selectedFilename={selectedFilename}\n                        values={fileTree}\n                        onChange={onChange}\n                        theme='vs-light'\n                        position={position}\n                        onNavigate={() => null}\n                        options={{\n                            minimap: {\n                                enabled: false\n                            }\n                        }}\n                        showSolutions={solutionsVisible}\n                        onSolutionsClose={hideSolutions}\n                    />\n                </EditorWrapper>\n                {load(validationErrors$, (errors) => (\n                    <CollapsiblePanel\n                        id='exercise'\n                        header={errors.length > 0 ? `Errors (${errors.length})` : 'Completed'}\n                        orientation='horizontal'>\n                        <ExercisePanelWrapper>\n                            {errors.length > 0 && (\n                                <>\n                                    <ValidationErrors errors={errors} onClick={onErrorClick} />\n                                    <ButtonsWrapper>\n                                        {'I give up, '}\n                                        <ExerciseButton onClick={showSolutions}>\n                                            show a possible solution\n                                        </ExerciseButton>{' '}\n                                        &nbsp; or\n                                        <ExerciseButton onClick={exercisesProgress.skipExercise}>skip</ExerciseButton>\n                                    </ButtonsWrapper>\n                                </>\n                            )}\n                            {errors.length === 0 && (\n                                <CompletedExerciseWrapper>\n                                    <CompletedExerciseLabel>\n                                        {exerciseNumber === lastExerciseNumber ? (\n                                            <>Congratulations! That was the last exercise.</>\n                                        ) : (\n                                            <>Good job! Exercise {exerciseNumber} is completed.</>\n                                        )}\n                                    </CompletedExerciseLabel>\n                                    {exerciseNumber !== lastExerciseNumber && (\n                                        <ButtonsWrapper>\n                                            <ExerciseButton onClick={exercisesProgress.completeExercise}>\n                                                Next exercise\n                                            </ExerciseButton>\n                                            <ExerciseButton onClick={showSolutions}>Compare my solution</ExerciseButton>\n                                        </ButtonsWrapper>\n                                    )}\n                                </CompletedExerciseWrapper>\n                            )}\n                        </ExercisePanelWrapper>\n                    </CollapsiblePanel>\n                ))}\n            </MainAreaWrapper>\n        </ExerciseWrapper>\n    ));\n}\n","import styled from '@emotion/styled';\nimport React from 'react';\n\nconst FooterWrapper = styled.footer`\n    flex: 0 0 auto;\n    border-top: 1px solid #294e80;\n    padding: 5px 0;\n    text-align: center;\n    color: gray;\n    font-size: 12px;\n    a,\n    a:hover,\n    a:visited,\n    a:active {\n        color: inherit;\n    }\n    z-index: 1;\n`;\n\nconst currentYear = new Date().getFullYear();\n\nexport function Footer() {\n    return (\n        <FooterWrapper>\n            &copy; {currentYear} <a href='https://github.com/mdevils'>Marat Dulin</a>,{' '}\n            <a href='https://github.com/typescript-exercises/typescript-exercises'>contribute</a>,{' '}\n            <a href='https://www.patreon.com/mdevils'>support this project</a>\n        </FooterWrapper>\n    );\n}\n","import React from 'react';\n\nexport function TsLogo() {\n    return (\n        <svg fill='none' height='26' viewBox='0 0 27 26' width='27' xmlns='http://www.w3.org/2000/svg'>\n            <path\n                clipRule='evenodd'\n                d='m.98608 0h24.32332c.5446 0 .9861.436522.9861.975v24.05c0 .5385-.4415.975-.9861.975h-24.32332c-.544597 0-.98608-.4365-.98608-.975v-24.05c0-.538478.441483-.975.98608-.975zm13.63142 13.8324v-2.1324h-9.35841v2.1324h3.34111v9.4946h2.6598v-9.4946zm1.0604 9.2439c.4289.2162.9362.3784 1.5218.4865.5857.1081 1.2029.1622 1.8518.1622.6324 0 1.2331-.0595 1.8023-.1784.5691-.1189 1.0681-.3149 1.497-.5879s.7685-.6297 1.0187-1.0703.3753-.9852.3753-1.6339c0-.4703-.0715-.8824-.2145-1.2365-.1429-.3541-.3491-.669-.6186-.9447-.2694-.2757-.5925-.523-.9692-.7419s-.8014-.4257-1.2743-.6203c-.3465-.1406-.6572-.2771-.9321-.4095-.275-.1324-.5087-.2676-.7011-.4054-.1925-.1379-.3409-.2838-.4454-.4379-.1045-.154-.1567-.3284-.1567-.523 0-.1784.0467-.3392.1402-.4824.0935-.1433.2254-.2663.3959-.369s.3794-.1824.6269-.2392c.2474-.0567.5224-.0851.8248-.0851.22 0 .4523.0162.697.0486.2447.0325.4908.0825.7382.15.2475.0676.4881.1527.7218.2555.2337.1027.4495.2216.6475.3567v-2.4244c-.4015-.1514-.84-.2636-1.3157-.3365-.4756-.073-1.0214-.1095-1.6373-.1095-.6268 0-1.2207.0662-1.7816.1987-.5609.1324-1.0544.3392-1.4806.6203s-.763.6392-1.0104 1.0743c-.2475.4352-.3712.9555-.3712 1.5609 0 .7731.2268 1.4326.6805 1.9785.4537.546 1.1424 1.0082 2.0662 1.3866.363.146.7011.2892 1.0146.4298.3134.1405.5842.2865.8124.4378.2282.1514.4083.3162.5403.4946s.198.3811.198.6082c0 .1676-.0413.323-.1238.4662-.0825.1433-.2076.2676-.3753.373s-.3766.1879-.6268.2473c-.2502.0595-.5431.0892-.8785.0892-.5719 0-1.1383-.0986-1.6992-.2959-.5608-.1973-1.0805-.4933-1.5589-.8879z'\n                fill='#fff'\n                fillRule='evenodd'\n            />\n        </svg>\n    );\n}\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport {TsLogo} from 'components/header/ts-logo';\n\nconst HeaderWrapper = styled.header`\n    flex: 0 0 auto;\n    background: #294e80;\n    padding: 10px 16px;\n    z-index: 1;\n`;\n\nconst HeaderLogo = styled.h1`\n    margin: 0;\n    padding: 0;\n    font-weight: 300;\n    color: white;\n    font-family: Helvetica, Arial, serif;\n    letter-spacing: -1px;\n    font-size: 30px;\n    strong {\n        font-weight: 500;\n    }\n    svg {\n        margin-right: 10px;\n        position: relative;\n        top: 3px;\n    }\n`;\n\nconst HeaderSubLogo = styled.span`\n    font-size: 24px;\n    margin-left: 20px;\n    color: yellow;\n    opacity: 0.9;\n`;\n\nexport function Header() {\n    return (\n        <HeaderWrapper>\n            <HeaderLogo>\n                <TsLogo />\n                TypeScript\n                <HeaderSubLogo>exercises</HeaderSubLogo>\n            </HeaderLogo>\n        </HeaderWrapper>\n    );\n}\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport {combineLatest} from 'rxjs';\nimport {load} from 'components/loading-container';\nimport {exerciseStructures} from 'lib/exercise-structures';\nimport {exercisesProgress} from 'observables/exercises-progress';\nimport {urlParams} from 'observables/url-params';\n\nconst Wrapper = styled.div`\n    flex: 0 0 auto;\n    display: flex;\n    flex-direction: row;\n    background: #faf9f8;\n    border-bottom: 1px solid #294e80;\n    align-items: center;\n    padding: 0 10px;\n    user-select: none;\n`;\n\nconst NavBar = styled.nav`\n    flex: 1 1 auto;\n    list-style-type: none;\n`;\n\nconst NavBarLabel = styled.li`\n    display: inline-block;\n    font-weight: bold;\n    margin-right: 20px;\n    opacity: 0.75;\n`;\n\nconst NavBarItem = styled.li<{completed: boolean; current: boolean}>`\n    display: inline-block;\n    margin: 0;\n    padding: 0;\n    position: relative;\n    line-height: 30px;\n    color: ${({completed}) => (completed ? 'inherit' : 'gray')};\n    cursor: pointer;\n    font-weight: ${({current}) => (current ? 'bold' : 'normal')};\n    &::after {\n        content: '·';\n        margin: 0 5px;\n        opacity: 0.25;\n    }\n    &:last-of-type::after {\n        display: none;\n    }\n`;\n\nexport function Navigation() {\n    return (\n        <Wrapper>\n            <NavBar>\n                {load(\n                    combineLatest([exercisesProgress.observable$, urlParams.observable$]),\n                    ([{completedExercises}, params]) => (\n                        <>\n                            <NavBarLabel>Exercises</NavBarLabel>\n                            {Object.keys(exerciseStructures).map((exerciseNumber) => (\n                                <NavBarItem\n                                    completed={completedExercises[exerciseNumber]}\n                                    current={Number(exerciseNumber) === Number(params.exercise)}\n                                    onClick={() => exercisesProgress.goToExercise(Number(exerciseNumber))}\n                                    key={exerciseNumber}>\n                                    {exerciseNumber}\n                                </NavBarItem>\n                            ))}\n                        </>\n                    )\n                )}\n            </NavBar>\n        </Wrapper>\n    );\n}\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport {Footer} from 'components/footer';\nimport {Header} from 'components/header';\nimport {Navigation} from 'containers/navigation';\n\nconst PageLayoutWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n`;\n\nconst PageLayoutMain = styled.main`\n    display: flex;\n    flex-direction: column;\n    flex: 1 1 auto;\n    position: relative;\n`;\n\nexport function PageLayout({children}: {children: React.ReactNode}) {\n    return (\n        <PageLayoutWrapper>\n            <Header />\n            <Navigation />\n            <PageLayoutMain>{children}</PageLayoutMain>\n            <Footer />\n        </PageLayoutWrapper>\n    );\n}\n","import {css} from '@emotion/core';\n\nexport const fonts = css`\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI Light'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/light/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/light/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/light/latest.ttf) format('truetype');\n        font-weight: 100;\n    }\n\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI Semilight'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semilight/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semilight/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semilight/latest.ttf) format('truetype');\n        font-weight: 200;\n    }\n\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.ttf) format('truetype');\n        font-weight: 400;\n    }\n\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI Bold'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/bold/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/bold/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/bold/latest.ttf) format('truetype');\n        font-weight: 600;\n    }\n\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI Semibold'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semibold/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semibold/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semibold/latest.ttf) format('truetype');\n        font-weight: 700;\n    }\n`;\n","import {Global, css} from '@emotion/core';\nimport React from 'react';\nimport {load} from 'components/loading-container';\nimport {Exercise} from 'containers/exercise';\nimport {PageLayout} from 'containers/page-layout';\nimport {urlParams} from 'observables/url-params';\nimport {fonts} from './fonts';\n\nconst globalStyles = css`\n    html,\n    body,\n    #root {\n        margin: 0;\n        height: 100%;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-family: 'Segoe UI Web (West European)', Segoe UI, -apple-system, BlinkMacSystemFont, Roboto, Helvetica Neue,\n            sans-serif;\n        font-size: 16px;\n    }\n    ${fonts}\n`;\n\nexport function App() {\n    return (\n        <>\n            <Global styles={globalStyles} />\n            <PageLayout>\n                {load(urlParams.observable$, (params) => (\n                    <Exercise key={params.exercise} exerciseNumber={Number(params.exercise)} />\n                ))}\n            </PageLayout>\n        </>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ninterface Config {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from 'containers/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}