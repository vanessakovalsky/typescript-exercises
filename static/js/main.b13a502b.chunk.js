(this["webpackJsonptypescript-exercises"]=this["webpackJsonptypescript-exercises"]||[]).push([[1],{357:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nBienvenue:\n\n    ................................................................\n    .                                                              .\n    .     ####################    ####################      E      .\n    .     ####################    ####################      X      .\n    .             ####            ####                      E      .\n    .             ####            ####                      R      .\n    .             ####            ####################      C      .\n    .             ####                            ####      I      .\n    .             ####                            ####      S      .\n    .             ####            ####################      E      .\n    .             ####            ####################      S      .\n    .                                                              .\n    ................................................................\n\n    Objectif : permettre \xe0 tous de jour avec diff\xe9rentes fonctionalit\xe9s de TypeScript\n    et obtenir un aper\xe7u des capacit\xe9s de TypeScript et de ses principes.\n\n    Things to cover:\n\n        1. Basic typing.\n        2. Refining types.\n        3. Union types.\n        4. Merged types.\n        5. Generics.\n        6. Type declarations.\n        7. Module augmentation.\n        8. Advanced type mapping.\n\n    Rules and principles:\n\n        1. Avoid using \"any\" type at all costs.\n        2. Difficulty quickly grows one exercise after another.\n        3. Feel free to send pull-requests if you've come up\n           with improvements!\n        4. Provide feedback to the creator of these exercises.\n        5. Enjoy.\n\nBrief UI guide:\n\n    +--------------------------------------------------------------+\n    | TypeScript exercises                                         |\n    +--------------------------------------------------------------+\n    | Exercises 1\xb72\xb73\xb74...   << Navigate through exercises >>      |\n    +---------------+----------------------------------------------+\n    | Files         | file.ts   << Filename and status >>          |\n    +---------------+----------------------------------------------+\n    | file.ts       | 1  import {x} from 'y';                      |\n    | dir           | 2                                            |\n    |   sub.ts      | 3                                            |\n    |               |                                              |\n    | << Current    |   << Currently selected file code editor >>  |\n    | exercise file |                                              |\n    | structure >>  +----------------------------------------------+\n    |               |                                              |\n    |               |   << Errors to fix in order to proceed >>    |\n    |               |                                              |\n    +---------------+----------------------------------------------+\n\nIntro:\n\n    We are starting a small community of users. For performance\n    reasons we have decided to store all users right in the code.\n    This way we can provide our developers with more\n    user-interaction opportunities. With user-related data, at least.\n    All the GDPR-related issues will be solved some other day.\n    This would be the base for our future experiments during\n    these exercises.\n\nExercise:\n\n    Given the data, define the interface \"User\" and use it accordingly.\n\n*/\n\nexport type User = unknown;\n\nexport const users: unknown[] = [\n    {\n        name: 'Max Mustermann',\n        age: 25,\n        occupation: 'Chimney sweep'\n    },\n    {\n        name: 'Kate M\xfcller',\n        age: 23,\n        occupation: 'Astronaut'\n    }\n];\n\nexport function logPerson(user: unknown) {\n    console.log(` - ${user.name}, ${user.age}`);\n}\n\nconsole.log('Users:');\nusers.forEach(logPerson);\n\n\n/* In case if you are stuck:\n\n// https://www.typescriptlang.org/docs/handbook/2/objects.html\n*/\n"},358:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nWelcome to:\n\n    ................................................................\n    .                                                              .\n    .     ####################    ####################      E      .\n    .     ####################    ####################      X      .\n    .             ####            ####                      E      .\n    .             ####            ####                      R      .\n    .             ####            ####################      C      .\n    .             ####                            ####      I      .\n    .             ####                            ####      S      .\n    .             ####            ####################      E      .\n    .             ####            ####################      S      .\n    .                                                              .\n    ................................................................\n\n    The goal: Let everyone play with many different TypeScript features\n    and get an overview of TypeScript capabilities and principles.\n\n    Things to cover:\n\n        1. Basic typing.\n        2. Refining types.\n        3. Union types.\n        4. Merged types.\n        5. Generics.\n        6. Type declarations.\n        7. Module augmentation.\n        8. Advanced type mapping.\n\n    Rules and principles:\n\n        1. Avoid using \"any\" type at all costs.\n        2. Difficulty quickly grows one exercise after another.\n        3. Feel free to send pull-requests if you've came up\n           with improvements!\n        4. Provide feedback to the creator of these exercises.\n        5. Enjoy.\n\nBrief UI guide:\n\n    +--------------------------------------------------------------+\n    | TypeScript exercises                                         |\n    +--------------------------------------------------------------+\n    | Exercises 1\xb72\xb73\xb74...   << Navigate through exercises >>      |\n    +---------------+----------------------------------------------+\n    | Files         | file.ts   << Filename and status >>          |\n    +---------------+----------------------------------------------+\n    | file.ts       | 1  import {x} from 'y';                      |\n    | dir           | 2                                            |\n    |   sub.ts      | 3                                            |\n    |               |                                              |\n    | << Current    |   << Currently selected file code editor >>  |\n    | exercise file |                                              |\n    | structure >>  +----------------------------------------------+\n    |               |                                              |\n    |               |   << Errors to fix in order to proceed >>    |\n    |               |                                              |\n    +---------------+----------------------------------------------+\n\nIntro:\n\n    We are starting a small community of users. For performance\n    reasons we have decided to store all users right in the code.\n    This way we can provide our developers with more\n    user-interaction opportunities. With user-related data, at least.\n    All the GDPR-related issues we will solved some other day.\n    This would be the base for our future experiments during\n    these exercises.\n\nExercise:\n\n    Given the data, define the interface \"User\" and use it accordingly.\n\n*/\n\nexport interface User {\n    name: string;\n    age: number;\n    occupation: string;\n}\n\nexport const users: User[] = [\n    {\n        name: 'Max Mustermann',\n        age: 25,\n        occupation: 'Chimney sweep'\n    },\n    {\n        name: 'Kate M\xfcller',\n        age: 23,\n        occupation: 'Astronaut'\n    }\n];\n\nexport function logPerson(user: User) {\n    console.log(` - ${user.name}, ${user.age}`);\n}\n\nconsole.log('Users:');\nusers.forEach(logPerson);\n\n\n/* In case if you are stuck:\n\n// https://www.typescriptlang.org/docs/handbook/2/objects.html\n*/\n"},359:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, typeAssert} from 'type-assertions';\nimport {User, logPerson, users} from './index';\n\ntypeAssert<IsTypeEqual<User, {name: string, age: number, occupation: string}>>();\ntypeAssert<IsTypeEqual<typeof users, {name: string, age: number, occupation: string}[]>>();\ntypeAssert<IsTypeEqual<typeof logPerson, (user: {name: string, age: number, occupation: string}) => void>>();\n"},360:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    All 2 users liked the idea of the community. We should go\n    forward and introduce some order. We are in Germany after all.\n    Let's add a couple of admins.\n\n    Initially we only had users in the in-memory database. After\n    introducing Admins, we need to fix the types so that\n    everything works well together.\n\nExercise:\n\n    Type \"Person\" is missing, please define it and use\n    it in persons array and logPerson function in order to fix\n    all the TS errors.\n\n*/\n\ninterface User {\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = unknown;\n\nexport const persons: User[] /* <- Person[] */ = [\n    {\n        name: 'Max Mustermann',\n        age: 25,\n        occupation: 'Chimney sweep'\n    },\n    {\n        name: 'Jane Doe',\n        age: 32,\n        role: 'Administrator'\n    },\n    {\n        name: 'Kate M\xfcller',\n        age: 23,\n        occupation: 'Astronaut'\n    },\n    {\n        name: 'Bruce Willis',\n        age: 64,\n        role: 'World saver'\n    }\n];\n\nexport function logPerson(user: User) {\n    console.log(` - ${user.name}, ${user.age}`);\n}\n\npersons.forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/2/types-from-types.html\n"},361:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    All 2 users liked the idea of the community. We should go\n    forward and introduce some order. We are in Germany after all.\n    Let's add a couple of admins.\n\n    Initially we only had users in the in-memory database. After\n    introducing Admins, we need to fix the types so that\n    everything works well together.\n\nExercise:\n\n    Type \"Person\" is missing, please define it and use\n    it in persons array and logPerson function in order to fix\n    all the TS errors.\n\n*/\n\ninterface User {\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = User | Admin;\n\nexport const persons: Person[] = [\n    {\n        name: 'Max Mustermann',\n        age: 25,\n        occupation: 'Chimney sweep'\n    },\n    {\n        name: 'Jane Doe',\n        age: 32,\n        role: 'Administrator'\n    },\n    {\n        name: 'Kate M\xfcller',\n        age: 23,\n        occupation: 'Astronaut'\n    },\n    {\n        name: 'Bruce Willis',\n        age: 64,\n        role: 'World saver'\n    }\n];\n\nexport function logPerson(user: Person) {\n    console.log(` - ${user.name}, ${user.age}`);\n}\n\npersons.forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/2/types-from-types.html\n"},362:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, FirstArgument, typeAssert} from 'type-assertions';\nimport {Person, logPerson, persons} from './index';\n\ntypeAssert<\n    IsTypeEqual<\n        Person,\n        {name: string; age: number} & ({occupation: string} | {role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof persons,\n        ({name: string; age: number} & ({occupation: string} | {role: string}))[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof logPerson>,\n        {name: string; age: number} & ({occupation: string} | {role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof logPerson>,\n        void\n    >\n>();\n"},363:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Since we already have some of the additional\n    information about our users, it's a good idea\n    to output it in a nice way.\n\nExercise:\n\n    Fix type errors in logPerson function.\n\n    logPerson function should accept both User and Admin\n    and should output relevant information according to\n    the input: occupation for User and role for Admin.\n\n*/\n\ninterface User {\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = User | Admin;\n\nexport const persons: Person[] = [\n    {\n        name: 'Max Mustermann',\n        age: 25,\n        occupation: 'Chimney sweep'\n    },\n    {\n        name: 'Jane Doe',\n        age: 32,\n        role: 'Administrator'\n    },\n    {\n        name: 'Kate M\xfcller',\n        age: 23,\n        occupation: 'Astronaut'\n    },\n    {\n        name: 'Bruce Willis',\n        age: 64,\n        role: 'World saver'\n    }\n];\n\nexport function logPerson(person: Person) {\n    let additionalInformation: string;\n    if (person.role) {\n        additionalInformation = person.role;\n    } else {\n        additionalInformation = person.occupation;\n    }\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\n}\n\npersons.forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing\n"},364:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Since we already have some of the additional\n    information about our users, it's a good idea\n    to output it in a nice way.\n\nExercise:\n\n    Fix type errors in logPerson function.\n\n    logPerson function should accept both User and Admin\n    and should output relevant information according to\n    the input: occupation for User and role for Admin.\n\n*/\n\ninterface User {\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = User | Admin;\n\nexport const persons: Person[] = [\n    {\n        name: 'Max Mustermann',\n        age: 25,\n        occupation: 'Chimney sweep'\n    },\n    {\n        name: 'Jane Doe',\n        age: 32,\n        role: 'Administrator'\n    },\n    {\n        name: 'Kate M\xfcller',\n        age: 23,\n        occupation: 'Astronaut'\n    },\n    {\n        name: 'Bruce Willis',\n        age: 64,\n        role: 'World saver'\n    }\n];\n\nexport function logPerson(person: Person) {\n    let additionalInformation: string;\n    if ('role' in person) {\n        additionalInformation = person.role;\n    } else {\n        additionalInformation = person.occupation;\n    }\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\n}\n\npersons.forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing\n"},365:function(n,e,t){"use strict";t.r(e),e.default="import {FirstArgument, IsTypeEqual, typeAssert} from 'type-assertions';\nimport {logPerson, Person, persons} from './index';\n\n\ntypeAssert<\n    IsTypeEqual<\n        Person,\n        {name: string; age: number} & ({occupation: string} | {role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof persons,\n        ({name: string; age: number} & ({occupation: string} | {role: string}))[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof logPerson>,\n        {name: string; age: number} & ({occupation: string} | {role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof logPerson>,\n        void\n    >\n>();\n"},366:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    As we introduced \"type\" to both User and Admin\n    it's now easier to distinguish between them.\n    Once object type checking logic was extracted\n    into separate functions isUser and isAdmin -\n    logPerson function got new type errors.\n\nExercise:\n\n    Figure out how to help TypeScript understand types in\n    this situation and apply necessary fixes.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = User | Admin;\n\nexport const persons: Person[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\n];\n\nexport function isAdmin(person: Person) {\n    return person.type === 'admin';\n}\n\nexport function isUser(person: Person) {\n    return person.type === 'user';\n}\n\nexport function logPerson(person: Person) {\n    let additionalInformation: string = '';\n    if (isAdmin(person)) {\n        additionalInformation = person.role;\n    }\n    if (isUser(person)) {\n        additionalInformation = person.occupation;\n    }\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\n}\n\nconsole.log('Admins:');\npersons.filter(isAdmin).forEach(logPerson);\n\nconsole.log();\n\nconsole.log('Users:');\npersons.filter(isUser).forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\n"},367:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    As we introduced \"type\" to both User and Admin\n    it's now easier to distinguish between them.\n    Once object type checking logic was extracted\n    into separate functions isUser and isAdmin -\n    logPerson function got new type errors.\n\nExercise:\n\n    Figure out how to help TypeScript understand types in\n    this situation and apply necessary fixes.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = User | Admin;\n\nexport const persons: Person[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\n];\n\nexport function isAdmin(person: Person): person is Admin {\n    return person.type === 'admin';\n}\n\nexport function isUser(person: Person): person is User {\n    return person.type === 'user';\n}\n\nexport function logPerson(person: Person) {\n    let additionalInformation: string = '';\n    if (isAdmin(person)) {\n        additionalInformation = person.role;\n    }\n    if (isUser(person)) {\n        additionalInformation = person.occupation;\n    }\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\n}\n\nconsole.log('Admins:');\npersons.filter(isAdmin).forEach(logPerson);\n\nconsole.log();\n\nconsole.log('Users:');\npersons.filter(isUser).forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\n"},368:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, FirstArgument, typeAssert} from 'type-assertions';\nimport {logPerson, isUser, isAdmin, Person, persons} from './index';\n\ntypeAssert<\n    IsTypeEqual<\n        Person,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof persons,\n        ({name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string}))[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof logPerson>,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof logPerson>,\n        void\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof isUser>,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof isUser>,\n        boolean\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof isAdmin>,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof isAdmin>,\n        boolean\n    >\n>();\n"},369:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Time to filter the data! In order to be flexible\n    we filter users using a number of criteria and\n    return only those matching all of the criteria.\n    We don't need Admins yet, we only filter Users.\n\nExercise:\n\n    Without duplicating type structures, modify\n    filterUsers function definition so that we can\n    pass only those criteria which are needed,\n    and not the whole User information as it is\n    required now according to typing.\n\nHigher difficulty bonus exercise:\n\n    Exclude \"type\" from filter criterias.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = User | Admin;\n\nexport const persons: Person[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    {\n        type: 'admin',\n        name: 'Jane Doe',\n        age: 32,\n        role: 'Administrator'\n    },\n    {\n        type: 'user',\n        name: 'Kate M\xfcller',\n        age: 23,\n        occupation: 'Astronaut'\n    },\n    {\n        type: 'admin',\n        name: 'Bruce Willis',\n        age: 64,\n        role: 'World saver'\n    },\n    {\n        type: 'user',\n        name: 'Wilson',\n        age: 23,\n        occupation: 'Ball'\n    },\n    {\n        type: 'admin',\n        name: 'Agent Smith',\n        age: 23,\n        role: 'Administrator'\n    }\n];\n\nexport const isAdmin = (person: Person): person is Admin => person.type === 'admin';\nexport const isUser = (person: Person): person is User => person.type === 'user';\n\nexport function logPerson(person: Person) {\n    let additionalInformation = '';\n    if (isAdmin(person)) {\n        additionalInformation = person.role;\n    }\n    if (isUser(person)) {\n        additionalInformation = person.occupation;\n    }\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\n}\n\nexport function filterUsers(persons: Person[], criteria: User): User[] {\n    return persons.filter(isUser).filter((user) => {\n        const criteriaKeys = Object.keys(criteria) as (keyof User)[];\n        return criteriaKeys.every((fieldName) => {\n            return user[fieldName] === criteria[fieldName];\n        });\n    });\n}\n\nconsole.log('Users of age 23:');\n\nfilterUsers(\n    persons,\n    {\n        age: 23\n    }\n).forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/utility-types.html\n// https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#predefined-conditional-types\n"},370:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Time to filter the data! In order to be flexible\n    we filter users using a number of criteria and\n    return only those matching all of the criteria.\n    We don't need Admins yet, we only filter Users.\n\nExercise:\n\n    Without duplicating type structures, modify\n    filterUsers function definition so that we can\n    pass only those criteria which are needed,\n    and not the whole User information as it is\n    required now according to typing.\n\nHigher difficulty bonus exercise:\n\n    Exclude \"type\" from filter criterias.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = User | Admin;\n\nexport const persons: Person[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    {\n        type: 'admin',\n        name: 'Jane Doe',\n        age: 32,\n        role: 'Administrator'\n    },\n    {\n        type: 'user',\n        name: 'Kate M\xfcller',\n        age: 23,\n        occupation: 'Astronaut'\n    },\n    {\n        type: 'admin',\n        name: 'Bruce Willis',\n        age: 64,\n        role: 'World saver'\n    },\n    {\n        type: 'user',\n        name: 'Wilson',\n        age: 23,\n        occupation: 'Ball'\n    },\n    {\n        type: 'admin',\n        name: 'Agent Smith',\n        age: 23,\n        role: 'Administrator'\n    }\n];\n\nexport const isAdmin = (person: Person): person is Admin => person.type === 'admin';\nexport const isUser = (person: Person): person is User => person.type === 'user';\n\nexport function logPerson(person: Person) {\n    let additionalInformation = '';\n    if (isAdmin(person)) {\n        additionalInformation = person.role;\n    }\n    if (isUser(person)) {\n        additionalInformation = person.occupation;\n    }\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\n}\n\nexport function filterUsers(persons: Person[], criteria: Partial<Omit<User, 'type'>>): User[] {\n    return persons.filter(isUser).filter((user) => {\n        const criteriaKeys = Object.keys(criteria) as (keyof Omit<User, 'type'>)[];\n        return criteriaKeys.every((fieldName) => {\n            return user[fieldName] === criteria[fieldName];\n        });\n    });\n}\n\nconsole.log('Users of age 23:');\n\nfilterUsers(\n    persons,\n    {\n        age: 23\n    }\n).forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/utility-types.html\n// https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#predefined-conditional-types\n"},371:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, IsTypeAssignable, Not, FirstArgument, SecondArgument, typeAssert} from 'type-assertions';\nimport {logPerson, isUser, isAdmin, Person, persons, filterUsers} from './index';\n\ntypeAssert<\n    IsTypeAssignable<\n        SecondArgument<typeof filterUsers>,\n        {name: string}\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        SecondArgument<typeof filterUsers>,\n        {age: number}\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        SecondArgument<typeof filterUsers>,\n        {name: string; age: number}\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        SecondArgument<typeof filterUsers>,\n        {occupation: string}\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        SecondArgument<typeof filterUsers>,\n        {name: string; age: number; occupation: string}\n    >\n>();\ntypeAssert<\n    Not<\n        IsTypeAssignable<\n            SecondArgument<typeof filterUsers>,\n            {hello: 'world'}\n        >\n    >\n>();\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof filterUsers>,\n        {type: 'user'; name: string; age: number; occupation: string}[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        Person,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof persons,\n        ({name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string}))[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof logPerson>,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof logPerson>,\n        void\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof isUser>,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof isUser>,\n        boolean\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof isAdmin>,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof isAdmin>,\n        boolean\n    >\n>();\n"},372:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Filtering requirements have grown. We need to be\n    able to filter any kind of Persons.\n\nExercise:\n\n    Fix typing for the filterPersons so that it can filter users\n    and return User[] when personType='user' and return Admin[]\n    when personType='admin'. Also filterPersons should accept\n    partial User/Admin type according to the personType.\n    `criteria` argument should behave according to the\n    `personType` argument value. `type` field is not allowed in\n    the `criteria` field.\n\nHigher difficulty bonus exercise:\n\n    Implement a function `getObjectKeys()` which returns more\n    convenient result for any argument given, so that you don't\n    need to cast it.\n\n    let criteriaKeys = Object.keys(criteria) as (keyof User)[];\n    --\x3e\n    let criteriaKeys = getObjectKeys(criteria);\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = User | Admin;\n\nexport const persons: Person[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\n    { type: 'user', name: 'Wilson', age: 23, occupation: 'Ball' },\n    { type: 'admin', name: 'Agent Smith', age: 23, role: 'Anti-virus engineer' }\n];\n\nexport function logPerson(person: Person) {\n    console.log(\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\n    );\n}\n\nexport function filterPersons(persons: Person[], personType: string, criteria: unknown): unknown[] {\n    return persons\n        .filter((person) => person.type === personType)\n        .filter((person) => {\n            let criteriaKeys = Object.keys(criteria) as (keyof Person)[];\n            return criteriaKeys.every((fieldName) => {\n                return person[fieldName] === criteria[fieldName];\n            });\n        });\n}\n\nexport const usersOfAge23 = filterPersons(persons, 'user', { age: 23 });\nexport const adminsOfAge23 = filterPersons(persons, 'admin', { age: 23 });\n\nconsole.log('Users of age 23:');\nusersOfAge23.forEach(logPerson);\n\nconsole.log();\n\nconsole.log('Admins of age 23:');\nadminsOfAge23.forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads\n"},373:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Filtering requirements have grown. We need to be\n    able to filter any kind of Persons.\n\nExercise:\n\n    Fix typing for the filterPersons so that it can filter users\n    and return User[] when personType='user' and return Admin[]\n    when personType='admin'. Also filterPersons should accept\n    partial User/Admin type according to the personType.\n    `criteria` argument should behave according to the\n    `personType` argument value. `type` field is not allowed in\n    the `criteria` field.\n\nHigher difficulty bonus exercise:\n\n    Implement a function `getObjectKeys()` which returns more\n    convenient result for any argument given, so that you don't\n    need to cast it.\n\n    let criteriaKeys = Object.keys(criteria) as (keyof User)[];\n    --\x3e\n    let criteriaKeys = getObjectKeys(criteria);\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = User | Admin;\n\nexport const persons: Person[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\n    { type: 'user', name: 'Wilson', age: 23, occupation: 'Ball' },\n    { type: 'admin', name: 'Agent Smith', age: 23, role: 'Anti-virus engineer' }\n];\n\nexport function logPerson(person: Person) {\n    console.log(\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\n    );\n}\n\nconst getObjectKeys = <T>(obj: T) => Object.keys(obj) as (keyof T)[];\n\nexport function filterPersons(persons: Person[], personType: 'user', criteria: Partial<Omit<User, 'type'>>): User[];\nexport function filterPersons(persons: Person[], personType: 'admin', criteria: Partial<Omit<Admin, 'type'>>): Admin[];\nexport function filterPersons(persons: Person[], personType: string, criteria: Partial<Person>): Person[] {\n    return persons\n        .filter((person) => person.type === personType)\n        .filter((person) => {\n            let criteriaKeys = getObjectKeys(criteria);\n            return criteriaKeys.every((fieldName) => {\n                return person[fieldName] === criteria[fieldName];\n            });\n        });\n}\n\nexport const usersOfAge23 = filterPersons(persons, 'user', { age: 23 });\nexport const adminsOfAge23 = filterPersons(persons, 'admin', { age: 23 });\n\nconsole.log('Users of age 23:');\nusersOfAge23.forEach(logPerson);\n\nconsole.log();\n\nconsole.log('Admins of age 23:');\nadminsOfAge23.forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads\n"},374:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, FirstArgument, typeAssert} from 'type-assertions';\nimport {logPerson, Person, persons, filterPersons} from './index';\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof filterPersons>,\n        ({name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string}))[]\n    >\n>();\n\nconst filtered1 = filterPersons(persons, 'user', {});\ntypeAssert<\n    IsTypeEqual<\n        typeof filtered1,\n        {type: 'user'; name: string; age: number; occupation: string}[]\n    >\n>();\n\nconst filtered2 = filterPersons(persons, 'user', {name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep'});\ntypeAssert<\n    IsTypeEqual<\n        typeof filtered2,\n        {type: 'user'; name: string; age: number; occupation: string}[]\n    >\n>();\n\nconst filtered3 = filterPersons(persons, 'admin', {});\ntypeAssert<\n    IsTypeEqual<\n        typeof filtered3,\n        {type: 'admin'; name: string; age: number; role: string}[]\n    >\n>();\n\nconst filtered4 = filterPersons(persons, 'admin', {name: 'Jane Doe', age: 32, role: 'Administrator'});\ntypeAssert<\n    IsTypeEqual<\n        typeof filtered4,\n        {type: 'admin'; name: string; age: number; role: string}[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        Person,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof persons,\n        ({name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string}))[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof logPerson>,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof logPerson>,\n        void\n    >\n>();\n"},375:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Filtering was completely removed from the project.\n    It turned out that this feature was just not needed\n    for the end-user and we spent a lot of time just because\n    our office manager told us to do so. Next time we should\n    instead listen to the product management.\n\n    Anyway we have a new plan. CEO's friend Nick told us\n    that if we randomly swap user names from time to time\n    in the community, it would be very funny and the project\n    would definitely succeed!\n\nExercise:\n\n    Implement swap which receives 2 persons and returns them in\n    the reverse order. The function itself is already\n    there, actually. We just need to provide it with proper types.\n    Also this function shouldn't necessarily be limited to just\n    Person types, lets type it so that it works with any two types\n    specified.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\nfunction logUser(user: User) {\n    const pos = users.indexOf(user) + 1;\n    console.log(` - #${pos} User: ${user.name}, ${user.age}, ${user.occupation}`);\n}\n\nfunction logAdmin(admin: Admin) {\n    const pos = admins.indexOf(admin) + 1;\n    console.log(` - #${pos} Admin: ${admin.name}, ${admin.age}, ${admin.role}`);\n}\n\nconst admins: Admin[] = [\n    {\n        type: 'admin',\n        name: 'Will Bruces',\n        age: 30,\n        role: 'Overseer'\n    },\n    {\n        type: 'admin',\n        name: 'Steve',\n        age: 40,\n        role: 'Steve'\n    }\n];\n\nconst users: User[] = [\n    {\n        type: 'user',\n        name: 'Moses',\n        age: 70,\n        occupation: 'Desert guide'\n    },\n    {\n        type: 'user',\n        name: 'Superman',\n        age: 28,\n        occupation: 'Ordinary person'\n    }\n];\n\nexport function swap(v1, v2) {\n    return [v2, v1];\n}\n\nfunction test1() {\n    console.log('test1:');\n    const [secondUser, firstAdmin] = swap(admins[0], users[1]);\n    logUser(secondUser);\n    logAdmin(firstAdmin);\n}\n\nfunction test2() {\n    console.log('test2:');\n    const [secondAdmin, firstUser] = swap(users[0], admins[1]);\n    logAdmin(secondAdmin);\n    logUser(firstUser);\n}\n\nfunction test3() {\n    console.log('test3:');\n    const [secondUser, firstUser] = swap(users[0], users[1]);\n    logUser(secondUser);\n    logUser(firstUser);\n}\n\nfunction test4() {\n    console.log('test4:');\n    const [firstAdmin, secondAdmin] = swap(admins[1], admins[0]);\n    logAdmin(firstAdmin);\n    logAdmin(secondAdmin);\n}\n\nfunction test5() {\n    console.log('test5:');\n    const [stringValue, numericValue] = swap(123, 'Hello World');\n    console.log(` - String: ${stringValue}`);\n    console.log(` - Numeric: ${numericValue}`);\n}\n\n[test1, test2, test3, test4, test5].forEach((test) => test());\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/2/everyday-types.html\n// https://www.typescriptlang.org/docs/handbook/2/generics.html\n"},376:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Filtering was completely removed from the project.\n    It turned out that this feature was just not needed\n    for the end-user and we spent a lot of time just because\n    our office manager told us to do so. Next time we should\n    instead listen to the product management.\n\n    Anyway we have a new plan. CEO's friend Nick told us\n    that if we randomly swap user names from time to time\n    in the community, it would be very funny and the project\n    would definitely succeed!\n\nExercise:\n\n    Implement swap which receives 2 persons and returns them in\n    the reverse order. The function itself is already\n    there, actually. We just need to provide it with proper types.\n    Also this function shouldn't necessarily be limited to just\n    Person types, lets type it so that it works with any two types\n    specified.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\nfunction logUser(user: User) {\n    const pos = users.indexOf(user) + 1;\n    console.log(` - #${pos} User: ${user.name}, ${user.age}, ${user.occupation}`);\n}\n\nfunction logAdmin(admin: Admin) {\n    const pos = admins.indexOf(admin) + 1;\n    console.log(` - #${pos} Admin: ${admin.name}, ${admin.age}, ${admin.role}`);\n}\n\nconst admins: Admin[] = [\n    {\n        type: 'admin',\n        name: 'Will Bruces',\n        age: 30,\n        role: 'Overseer'\n    },\n    {\n        type: 'admin',\n        name: 'Steve',\n        age: 40,\n        role: 'Steve'\n    }\n];\n\nconst users: User[] = [\n    {\n        type: 'user',\n        name: 'Moses',\n        age: 70,\n        occupation: 'Desert guide'\n    },\n    {\n        type: 'user',\n        name: 'Superman',\n        age: 28,\n        occupation: 'Ordinary person'\n    }\n];\n\nexport function swap<T1, T2>(v1: T1, v2: T2): [T2, T1] {\n    return [v2, v1];\n}\n\nfunction test1() {\n    console.log('test1:');\n    const [secondUser, firstAdmin] = swap(admins[0], users[1]);\n    logUser(secondUser);\n    logAdmin(firstAdmin);\n}\n\nfunction test2() {\n    console.log('test2:');\n    const [secondAdmin, firstUser] = swap(users[0], admins[1]);\n    logAdmin(secondAdmin);\n    logUser(firstUser);\n}\n\nfunction test3() {\n    console.log('test3:');\n    const [secondUser, firstUser] = swap(users[0], users[1]);\n    logUser(secondUser);\n    logUser(firstUser);\n}\n\nfunction test4() {\n    console.log('test4:');\n    const [firstAdmin, secondAdmin] = swap(admins[1], admins[0]);\n    logAdmin(firstAdmin);\n    logAdmin(secondAdmin);\n}\n\nfunction test5() {\n    console.log('test5:');\n    const [stringValue, numericValue] = swap(123, 'Hello World');\n    console.log(` - String: ${stringValue}`);\n    console.log(` - Numeric: ${numericValue}`);\n}\n\n[test1, test2, test3, test4, test5].forEach((test) => test());\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/2/everyday-types.html\n// https://www.typescriptlang.org/docs/handbook/2/generics.html\n"},377:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, typeAssert} from 'type-assertions';\nimport {swap} from './index';\n\nconst pair1 = swap(123, 'hello');\ntypeAssert<\n    IsTypeEqual<\n        typeof pair1,\n        [string, number]\n    >\n>();\n\nconst pair2 = swap(true as const, false as const);\ntypeAssert<\n    IsTypeEqual<\n        typeof pair2,\n        [false, true]\n    >\n>();\n\nconst pair3 = swap(null, undefined);\ntypeAssert<\n    IsTypeEqual<\n        typeof pair3,\n        [undefined, null]\n    >\n>();\n"},378:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Project grew and we ended up in a situation with\n    some users starting to have more influence.\n    Therefore, we decided to create a new person type\n    called PowerUser which is supposed to combine\n    everything User and Admin have.\n\nExercise:\n\n    Define type PowerUser which should have all fields\n    from both User and Admin (except for type),\n    and also have type 'powerUser' without duplicating\n    all the fields in the code.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\ntype PowerUser = unknown;\n\nexport type Person = User | Admin | PowerUser;\n\nexport const persons: Person[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\n    {\n        type: 'powerUser',\n        name: 'Nikki Stone',\n        age: 45,\n        role: 'Moderator',\n        occupation: 'Cat groomer'\n    }\n];\n\nfunction isAdmin(person: Person): person is Admin {\n    return person.type === 'admin';\n}\n\nfunction isUser(person: Person): person is User {\n    return person.type === 'user';\n}\n\nfunction isPowerUser(person: Person): person is PowerUser {\n    return person.type === 'powerUser';\n}\n\nexport function logPerson(person: Person) {\n    let additionalInformation: string = '';\n    if (isAdmin(person)) {\n        additionalInformation = person.role;\n    }\n    if (isUser(person)) {\n        additionalInformation = person.occupation;\n    }\n    if (isPowerUser(person)) {\n        additionalInformation = `${person.role}, ${person.occupation}`;\n    }\n    console.log(`${person.name}, ${person.age}, ${additionalInformation}`);\n}\n\nconsole.log('Admins:');\npersons.filter(isAdmin).forEach(logPerson);\n\nconsole.log();\n\nconsole.log('Users:');\npersons.filter(isUser).forEach(logPerson);\n\nconsole.log();\n\nconsole.log('Power users:');\npersons.filter(isPowerUser).forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/utility-types.html\n"},379:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Project grew and we ended up in a situation with\n    some users starting to have more influence.\n    Therefore, we decided to create a new person type\n    called PowerUser which is supposed to combine\n    everything User and Admin have.\n\nExercise:\n\n    Define type PowerUser which should have all fields\n    from both User and Admin (except for type),\n    and also have type 'powerUser' without duplicating\n    all the fields in the code.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\ntype PowerUser = Omit<User, 'type'> & Omit<Admin, 'type'> & {\n    type: 'powerUser'\n};\n\nexport type Person = User | Admin | PowerUser;\n\nexport const persons: Person[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\n    {\n        type: 'powerUser',\n        name: 'Nikki Stone',\n        age: 45,\n        role: 'Moderator',\n        occupation: 'Cat groomer'\n    }\n];\n\nfunction isAdmin(person: Person): person is Admin {\n    return person.type === 'admin';\n}\n\nfunction isUser(person: Person): person is User {\n    return person.type === 'user';\n}\n\nfunction isPowerUser(person: Person): person is PowerUser {\n    return person.type === 'powerUser';\n}\n\nexport function logPerson(person: Person) {\n    let additionalInformation: string = '';\n    if (isAdmin(person)) {\n        additionalInformation = person.role;\n    }\n    if (isUser(person)) {\n        additionalInformation = person.occupation;\n    }\n    if (isPowerUser(person)) {\n        additionalInformation = `${person.role}, ${person.occupation}`;\n    }\n    console.log(`${person.name}, ${person.age}, ${additionalInformation}`);\n}\n\nconsole.log('Admins:');\npersons.filter(isAdmin).forEach(logPerson);\n\nconsole.log();\n\nconsole.log('Users:');\npersons.filter(isUser).forEach(logPerson);\n\nconsole.log();\n\nconsole.log('Power users:');\npersons.filter(isPowerUser).forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/utility-types.html\n"},380:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, FirstArgument, typeAssert} from 'type-assertions';\nimport {logPerson, Person, persons} from './index';\n\ntypeAssert<\n    IsTypeEqual<\n        Person,\n        {name: string; age: number} & (\n            | {type: 'user'; occupation: string}\n            | {type: 'admin'; role: string}\n            | {type: 'powerUser'; occupation: string; role: string}\n        )\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof persons,\n        ({name: string; age: number} & (\n            | {type: 'user'; occupation: string}\n            | {type: 'admin'; role: string}\n            | {type: 'powerUser'; occupation: string; role: string}\n        ))[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof logPerson>,\n        {name: string; age: number} & (\n            | {type: 'user'; occupation: string}\n            | {type: 'admin'; role: string}\n            | {type: 'powerUser'; occupation: string; role: string}\n        )\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof logPerson>,\n        void\n    >\n>();\n"},381:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    PowerUsers idea was bad. Once those users got\n    extended permissions, they started bullying others\n    and we lost a lot of great users.\n    As a response we spent all the remaining money\n    on the marketing and got even more users.\n    We need to start preparing to move everything to a\n    real database. For now we just do some mocks.\n\n    The server API format was decided to be the following:\n\n    In case of success: { status: 'success', data: RESPONSE_DATA }\n    In case of error: { status: 'error', error: ERROR_MESSAGE }\n\n    The API engineer started creating types for this API and\n    quickly figured out that the amount of types needed to be\n    created is too big.\n\nExercise:\n\n    Remove UsersApiResponse and AdminsApiResponse types\n    and use generic type ApiResponse in order to specify API\n    response formats for each of the functions.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\ntype Person = User | Admin;\n\nconst admins: Admin[] = [\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\n];\n\nconst users: User[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' }\n];\n\nexport type ApiResponse<T> = unknown;\n\ntype AdminsApiResponse = (\n    {\n        status: 'success';\n        data: Admin[];\n    } |\n    {\n        status: 'error';\n        error: string;\n    }\n);\n\nexport function requestAdmins(callback: (response: AdminsApiResponse) => void) {\n    callback({\n        status: 'success',\n        data: admins\n    });\n}\n\ntype UsersApiResponse = (\n    {\n        status: 'success';\n        data: User[];\n    } |\n    {\n        status: 'error';\n        error: string;\n    }\n);\n\nexport function requestUsers(callback: (response: UsersApiResponse) => void) {\n    callback({\n        status: 'success',\n        data: users\n    });\n}\n\nexport function requestCurrentServerTime(callback: (response: unknown) => void) {\n    callback({\n        status: 'success',\n        data: Date.now()\n    });\n}\n\nexport function requestCoffeeMachineQueueLength(callback: (response: unknown) => void) {\n    callback({\n        status: 'error',\n        error: 'Numeric value has exceeded Number.MAX_SAFE_INTEGER.'\n    });\n}\n\nfunction logPerson(person: Person) {\n    console.log(\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\n    );\n}\n\nfunction startTheApp(callback: (error: Error | null) => void) {\n    requestAdmins((adminsResponse) => {\n        console.log('Admins:');\n        if (adminsResponse.status === 'success') {\n            adminsResponse.data.forEach(logPerson);\n        } else {\n            return callback(new Error(adminsResponse.error));\n        }\n\n        console.log();\n\n        requestUsers((usersResponse) => {\n            console.log('Users:');\n            if (usersResponse.status === 'success') {\n                usersResponse.data.forEach(logPerson);\n            } else {\n                return callback(new Error(usersResponse.error));\n            }\n\n            console.log();\n\n            requestCurrentServerTime((serverTimeResponse) => {\n                console.log('Server time:');\n                if (serverTimeResponse.status === 'success') {\n                    console.log(`   ${new Date(serverTimeResponse.data).toLocaleString()}`);\n                } else {\n                    return callback(new Error(serverTimeResponse.error));\n                }\n\n                console.log();\n\n                requestCoffeeMachineQueueLength((coffeeMachineQueueLengthResponse) => {\n                    console.log('Coffee machine queue length:');\n                    if (coffeeMachineQueueLengthResponse.status === 'success') {\n                        console.log(`   ${coffeeMachineQueueLengthResponse.data}`);\n                    } else {\n                        return callback(new Error(coffeeMachineQueueLengthResponse.error));\n                    }\n\n                    callback(null);\n                });\n            });\n        });\n    });\n}\n\nstartTheApp((e: Error | null) => {\n    console.log();\n    if (e) {\n        console.log(`Error: \"${e.message}\", but it's fine, sometimes errors are inevitable.`)\n    } else {\n        console.log('Success!');\n    }\n});\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/2/generics.html\n"},382:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    PowerUsers idea was bad. Once those users got\n    extended permissions, they started bullying others\n    and we lost a lot of great users.\n    As a response we spent all the remaining money\n    on the marketing and got even more users.\n    We need to start preparing to move everything to a\n    real database. For now we just do some mocks.\n\n    The server API format was decided to be the following:\n\n    In case of success: { status: 'success', data: RESPONSE_DATA }\n    In case of error: { status: 'error', error: ERROR_MESSAGE }\n\n    The API engineer started creating types for this API and\n    quickly figured out that the amount of types needed to be\n    created is too big.\n\nExercise:\n\n    Remove UsersApiResponse and AdminsApiResponse types\n    and use generic type ApiResponse in order to specify API\n    response formats for each of the functions.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\ntype Person = User | Admin;\n\nconst admins: Admin[] = [\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\n];\n\nconst users: User[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' }\n];\n\nexport type ApiResponse<T> =\n    | { status: 'success'; data: T; }\n    | { status: 'error'; error: string; };\n\nexport function requestAdmins(callback: (response: ApiResponse<Admin[]>) => void) {\n    callback({\n        status: 'success',\n        data: admins\n    });\n}\n\nexport function requestUsers(callback: (response: ApiResponse<User[]>) => void) {\n    callback({\n        status: 'success',\n        data: users\n    });\n}\n\nexport function requestCurrentServerTime(callback: (response: ApiResponse<number>) => void) {\n    callback({\n        status: 'success',\n        data: Date.now()\n    });\n}\n\nexport function requestCoffeeMachineQueueLength(callback: (response: ApiResponse<number>) => void) {\n    callback({\n        status: 'error',\n        error: 'Numeric value has exceeded Number.MAX_SAFE_INTEGER.'\n    });\n}\n\nfunction logPerson(person: Person) {\n    console.log(\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\n    );\n}\n\nfunction startTheApp(callback: (error: Error | null) => void) {\n    requestAdmins((adminsResponse) => {\n        console.log('Admins:');\n        if (adminsResponse.status === 'success') {\n            adminsResponse.data.forEach(logPerson);\n        } else {\n            return callback(new Error(adminsResponse.error));\n        }\n\n        console.log();\n\n        requestUsers((usersResponse) => {\n            console.log('Users:');\n            if (usersResponse.status === 'success') {\n                usersResponse.data.forEach(logPerson);\n            } else {\n                return callback(new Error(usersResponse.error));\n            }\n\n            console.log();\n\n            requestCurrentServerTime((serverTimeResponse) => {\n                console.log('Server time:');\n                if (serverTimeResponse.status === 'success') {\n                    console.log(`   ${new Date(serverTimeResponse.data).toLocaleString()}`);\n                } else {\n                    return callback(new Error(serverTimeResponse.error));\n                }\n\n                console.log();\n\n                requestCoffeeMachineQueueLength((coffeeMachineQueueLengthResponse) => {\n                    console.log('Coffee machine queue length:');\n                    if (coffeeMachineQueueLengthResponse.status === 'success') {\n                        console.log(`   ${coffeeMachineQueueLengthResponse.data}`);\n                    } else {\n                        return callback(new Error(coffeeMachineQueueLengthResponse.error));\n                    }\n\n                    callback(null);\n                });\n            });\n        });\n    });\n}\n\nstartTheApp((e: Error | null) => {\n    console.log();\n    if (e) {\n        console.log(`Error: \"${e.message}\", but it's fine, sometimes errors are inevitable.`)\n    } else {\n        console.log('Success!');\n    }\n});\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/2/generics.html\n"},383:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, IsTypeAssignable, Not, typeAssert} from 'type-assertions';\nimport {\n    ApiResponse,\n    requestAdmins,\n    requestUsers,\n    requestCoffeeMachineQueueLength,\n    requestCurrentServerTime\n} from './index';\n\ntypeAssert<\n    IsTypeAssignable<\n        ApiResponse<number>,\n        {status: 'success'; data: number}\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        ApiResponse<number>,\n        {status: 'error'; error: string}\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        ApiResponse<boolean>,\n        {status: 'success'; data: boolean}\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        ApiResponse<boolean>,\n        {status: 'error'; error: string}\n    >\n>();\ntypeAssert<\n    Not<\n        IsTypeEqual<\n            ApiResponse<number>,\n            unknown\n        >\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof requestAdmins,\n        (\n            callback: (\n                response: {\n                    status: 'success';\n                    data: {\n                            type: 'admin';\n                            name: string;\n                            age: number;\n                            role: string;\n                    }[]\n                } | {\n                    status: 'error';\n                    error: string;\n                }\n            ) => void\n        ) => void\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof requestUsers,\n        (\n            callback: (\n                response: {\n                    status: 'success';\n                    data: {\n                            type: 'user';\n                            name: string;\n                            age: number;\n                            occupation: string;\n                    }[]\n                } | {\n                    status: 'error';\n                    error: string;\n                }\n            ) => void\n        ) => void\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof requestCurrentServerTime,\n        (\n            callback: (\n                response: {\n                    status: 'success';\n                    data: number;\n                } | {\n                    status: 'error';\n                    error: string;\n                }\n            ) => void\n        ) => void\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof requestCoffeeMachineQueueLength,\n        (\n            callback: (\n                response: {\n                    status: 'success';\n                    data: number;\n                } | {\n                    status: 'error';\n                    error: string;\n                }\n            ) => void\n        ) => void\n    >\n>();\n"},384:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    We have asynchronous functions now, advanced technology.\n    This makes us a tech startup officially now.\n    But one of the consultants spoiled our dreams about\n    inevitable future IT leadership.\n    He said that callback-based asynchronicity is not\n    popular anymore and everyone should use Promises.\n    He promised that if we switch to Promises, this would\n    bring promising results.\n\nExercise:\n\n    We don't want to reimplement all the data-requesting\n    functions. Let's decorate the old callback-based\n    functions with the new Promise-compatible result.\n    The final function should return a Promise which\n    would resolve with the final data directly\n    (i.e. users or admins) or would reject with an error\n    (or type Error).\n\n    The function should be named promisify.\n\nHigher difficulty bonus exercise:\n\n    Create a function promisifyAll which accepts an object\n    with functions and returns a new object where each of\n    the function is promisified.\n\n    Rewrite api creation accordingly:\n\n        const api = promisifyAll(oldApi);\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\ntype Person = User | Admin;\n\nconst admins: Admin[] = [\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\n];\n\nconst users: User[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' }\n];\n\nexport type ApiResponse<T> = (\n    {\n        status: 'success';\n        data: T;\n    } |\n    {\n        status: 'error';\n        error: string;\n    }\n);\n\nexport function promisify(arg: unknown): unknown {\n    return null;\n}\n\nconst oldApi = {\n    requestAdmins(callback: (response: ApiResponse<Admin[]>) => void) {\n        callback({\n            status: 'success',\n            data: admins\n        });\n    },\n    requestUsers(callback: (response: ApiResponse<User[]>) => void) {\n        callback({\n            status: 'success',\n            data: users\n        });\n    },\n    requestCurrentServerTime(callback: (response: ApiResponse<number>) => void) {\n        callback({\n            status: 'success',\n            data: Date.now()\n        });\n    },\n    requestCoffeeMachineQueueLength(callback: (response: ApiResponse<number>) => void) {\n        callback({\n            status: 'error',\n            error: 'Numeric value has exceeded Number.MAX_SAFE_INTEGER.'\n        });\n    }\n};\n\nexport const api = {\n    requestAdmins: promisify(oldApi.requestAdmins),\n    requestUsers: promisify(oldApi.requestUsers),\n    requestCurrentServerTime: promisify(oldApi.requestCurrentServerTime),\n    requestCoffeeMachineQueueLength: promisify(oldApi.requestCoffeeMachineQueueLength)\n};\n\nfunction logPerson(person: Person) {\n    console.log(\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\n    );\n}\n\nasync function startTheApp() {\n    console.log('Admins:');\n    (await api.requestAdmins()).forEach(logPerson);\n    console.log();\n\n    console.log('Users:');\n    (await api.requestUsers()).forEach(logPerson);\n    console.log();\n\n    console.log('Server time:');\n    console.log(`   ${new Date(await api.requestCurrentServerTime()).toLocaleString()}`);\n    console.log();\n\n    console.log('Coffee machine queue length:');\n    console.log(`   ${await api.requestCoffeeMachineQueueLength()}`);\n}\n\nstartTheApp().then(\n    () => {\n        console.log('Success!');\n    },\n    (e: Error) => {\n        console.log(`Error: \"${e.message}\", but it's fine, sometimes errors are inevitable.`);\n    }\n);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/2/generics.html\n"},385:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    We have asynchronous functions now, advanced technology.\n    This makes us a tech startup officially now.\n    But one of the consultants spoiled our dreams about\n    inevitable future IT leadership.\n    He said that callback-based asynchronicity is not\n    popular anymore and everyone should use Promises.\n    He promised that if we switch to Promises, this would\n    bring promising results.\n\nExercise:\n\n    We don't want to reimplement all the data-requesting\n    functions. Let's decorate the old callback-based\n    functions with the new Promise-compatible result.\n    The final function should return a Promise which\n    would resolve with the final data directly\n    (i.e. users or admins) or would reject with an error\n    (or type Error).\n\n    The function should be named promisify.\n\nHigher difficulty bonus exercise:\n\n    Create a function promisifyAll which accepts an object\n    with functions and returns a new object where each of\n    the function is promisified.\n\n    Rewrite api creation accordingly:\n\n        const api = promisifyAll(oldApi);\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\ntype Person = User | Admin;\n\nconst admins: Admin[] = [\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\n];\n\nconst users: User[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' }\n];\n\nexport type ApiResponse<T> = (\n    {\n        status: 'success';\n        data: T;\n    } |\n    {\n        status: 'error';\n        error: string;\n    }\n);\n\ntype CallbackBasedAsyncFunction<T> = (callback: (response: ApiResponse<T>) => void) => void;\ntype PromiseBasedAsyncFunction<T> = () => Promise<T>;\n\nexport function promisify<T>(fn: CallbackBasedAsyncFunction<T>): PromiseBasedAsyncFunction<T> {\n    return () => new Promise<T>((resolve, reject) => {\n        fn((response) => {\n            if (response.status === 'success') {\n                resolve(response.data);\n            } else {\n                reject(new Error(response.error));\n            }\n        });\n    });\n}\n\ntype SourceObject<T> = {[K in keyof T]: CallbackBasedAsyncFunction<T[K]>};\ntype PromisifiedObject<T> = {[K in keyof T]: PromiseBasedAsyncFunction<T[K]>};\n\nexport function promisifyAll<T extends {[key: string]: any}>(obj: SourceObject<T>): PromisifiedObject<T> {\n    const result: Partial<PromisifiedObject<T>> = {};\n    for (const key of Object.keys(obj) as (keyof T)[]) {\n        result[key] = promisify(obj[key]);\n    }\n    return result as PromisifiedObject<T>;\n}\n\nconst oldApi = {\n    requestAdmins(callback: (response: ApiResponse<Admin[]>) => void) {\n        callback({\n            status: 'success',\n            data: admins\n        });\n    },\n    requestUsers(callback: (response: ApiResponse<User[]>) => void) {\n        callback({\n            status: 'success',\n            data: users\n        });\n    },\n    requestCurrentServerTime(callback: (response: ApiResponse<number>) => void) {\n        callback({\n            status: 'success',\n            data: Date.now()\n        });\n    },\n    requestCoffeeMachineQueueLength(callback: (response: ApiResponse<number>) => void) {\n        callback({\n            status: 'error',\n            error: 'Numeric value has exceeded Number.MAX_SAFE_INTEGER.'\n        });\n    }\n};\n\nexport const api = promisifyAll(oldApi);\n\nfunction logPerson(person: Person) {\n    console.log(\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\n    );\n}\n\nasync function startTheApp() {\n    console.log('Admins:');\n    (await api.requestAdmins()).forEach(logPerson);\n    console.log();\n\n    console.log('Users:');\n    (await api.requestUsers()).forEach(logPerson);\n    console.log();\n\n    console.log('Server time:');\n    console.log(`   ${new Date(await api.requestCurrentServerTime()).toLocaleString()}`);\n    console.log();\n\n    console.log('Coffee machine queue length:');\n    console.log(`   ${await api.requestCoffeeMachineQueueLength()}`);\n}\n\nstartTheApp().then(\n    () => {\n        console.log('Success!');\n    },\n    (e: Error) => {\n        console.log(`Error: \"${e.message}\", but it's fine, sometimes errors are inevitable.`);\n    }\n);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/2/generics.html\n"},386:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, IsTypeAssignable, FirstArgument, typeAssert} from 'type-assertions';\nimport {api, promisify, ApiResponse} from './index';\n\ntypeAssert<\n    IsTypeAssignable<\n        FirstArgument<typeof promisify>,\n        (callback: (response: ApiResponse<number>) => void) => void\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        FirstArgument<typeof promisify>,\n        (callback: (response: ApiResponse<string>) => void) => void\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        ReturnType<typeof promisify>,\n        () => Promise<number>\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        ReturnType<typeof promisify>,\n        () => Promise<boolean>\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof api.requestAdmins,\n        () => Promise<\n            {\n                type: 'admin';\n                name: string;\n                age: number;\n                role: string;\n            }[]\n        >\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof api.requestUsers,\n        () => Promise<\n            {\n                type: 'user';\n                name: string;\n                age: number;\n                occupation: string;\n            }[]\n        >\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof api.requestCurrentServerTime,\n        () => Promise<number>\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof api.requestCoffeeMachineQueueLength,\n        () => Promise<number>\n    >\n>();\n\n"},387:function(n,e,t){"use strict";t.r(e),e.default="import {\n    strReverse,\n    strToLower,\n    strToUpper,\n    strRandomize,\n    strInvertCase\n} from 'str-utils';\n\n/*\n\nIntro:\n\n    In order to engage users in the communication with\n    each other we have decided to decorate usernames\n    in various ways. A brief search led us to a library\n    called \"str-utils\". Bad thing is that it lacks\n    TypeScript declarations.\n\nExercise:\n\n    Check str-utils module implementation at:\n    node_modules/str-utils/index.js\n    node_modules/str-utils/README.md\n\n    Provide type declaration for that module in:\n    declarations/str-utils/index.d.ts\n\n    Try to avoid duplicates of type declarations,\n    use type aliases.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\ntype Person = User | Admin;\n\nconst admins: Admin[] = [\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\n    { type: 'admin', name: 'Steve', age: 40, role: 'Steve' },\n    { type: 'admin', name: 'Will Bruces', age: 30, role: 'Overseer' },\n    { type: 'admin', name: 'Superwoman', age: 28, role: 'Customer support' }\n];\n\nconst users: User[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' },\n    { type: 'user', name: 'Moses', age: 70, occupation: 'Desert guide' },\n    { type: 'user', name: 'Superman', age: 28, occupation: 'Ordinary person' },\n    { type: 'user', name: 'Inspector Gadget', age: 31, occupation: 'Undercover' }\n];\n\nconst isAdmin = (person: Person): person is Admin => person.type === 'admin';\nconst isUser = (person: Person): person is User => person.type === 'user';\n\nexport const nameDecorators = [\n    strReverse,\n    strToLower,\n    strToUpper,\n    strRandomize,\n    strInvertCase\n];\n\nfunction logPerson(person: Person) {\n    let additionalInformation: string = '';\n    if (isAdmin(person)) {\n        additionalInformation = person.role;\n    }\n    if (isUser(person)) {\n        additionalInformation = person.occupation;\n    }\n    const randomNameDecorator = nameDecorators[\n        Math.round(Math.random() * (nameDecorators.length - 1))\n    ];\n    const name = randomNameDecorator(person.name);\n    console.log(\n        ` - ${name}, ${person.age}, ${additionalInformation}`\n    );\n}\n\n([] as Person[])\n    .concat(users, admins)\n    .forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/modules.html#ambient-modules\n"},388:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, ArrayElement, typeAssert} from 'type-assertions';\nimport {nameDecorators} from './index';\n\ntypeAssert<\n    IsTypeEqual<\n        ArrayElement<typeof nameDecorators>,\n        (input: string) => string\n    >\n>();\n"},389:function(n,e,t){"use strict";t.r(e),e.default="declare module 'str-utils' {\n    // export const ...\n    // export function ...\n}\n"},390:function(n,e,t){"use strict";t.r(e),e.default="declare module 'str-utils' {\n    type StrUtil = (input: string) => string;\n\n    export const strReverse: StrUtil;\n    export const strToLower: StrUtil;\n    export const strToUpper: StrUtil;\n    export const strRandomize: StrUtil;\n    export const strInvertCase: StrUtil;\n}\n"},394:function(n,e,t){"use strict";t.r(e),e.default="import {\n    getMaxIndex,\n    getMaxElement,\n    getMinIndex,\n    getMinElement,\n    getMedianIndex,\n    getMedianElement,\n    getAverageValue\n} from 'stats';\n\n/*\n\nIntro:\n\n    We have so many users and admins in the database!\n    CEO's father Jeff says that we are a BigData\n    startup now. We have no idea what it means, but\n    Jeff says that we need to do some statistics and\n    analytics.\n\n    We've ran a questionnaire within the team to\n    figure out what do we know about statistics.\n    The only person who filled it was our coffee\n    machine maintainer. The answers were:\n\n     * Maximums\n     * Minumums\n     * Medians\n     * Averages\n\n    We found a piece of code on stackoverflow and\n    compiled it into a module `stats`. The bad\n    thing is that it lacks type declarations.\n\nExercise:\n\n    Check stats module implementation at:\n    node_modules/stats/index.js\n    node_modules/stats/README.md\n\n    Provide type declaration for that module in:\n    declarations/stats/index.d.ts\n\nHigher difficulty bonus exercise:\n\n    Avoid duplicates of type declarations.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\nconst admins: Admin[] = [\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\n    { type: 'admin', name: 'Steve', age: 40, role: 'Steve' },\n    { type: 'admin', name: 'Will Bruces', age: 30, role: 'Overseer' },\n    { type: 'admin', name: 'Superwoman', age: 28, role: 'Customer support' }\n];\n\nconst users: User[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' },\n    { type: 'user', name: 'Moses', age: 70, occupation: 'Desert guide' },\n    { type: 'user', name: 'Superman', age: 28, occupation: 'Ordinary person' },\n    { type: 'user', name: 'Inspector Gadget', age: 31, occupation: 'Undercover' }\n];\n\nfunction logUser(user: User | null) {\n    if (!user) {\n        console.log(' - none');\n        return;\n    }\n    const pos = users.indexOf(user) + 1;\n    console.log(` - #${pos} User: ${user.name}, ${user.age}, ${user.occupation}`);\n}\n\nfunction logAdmin(admin: Admin | null) {\n    if (!admin) {\n        console.log(' - none');\n        return;\n    }\n    const pos = admins.indexOf(admin) + 1;\n    console.log(` - #${pos} Admin: ${admin.name}, ${admin.age}, ${admin.role}`);\n}\n\nconst compareUsers = (a: User, b: User) => a.age - b.age;\nconst compareAdmins = (a: Admin, b: Admin) => a.age - b.age;\nconst colorizeIndex = (value: number) => String(value + 1);\n\nexport {\n    getMaxIndex,\n    getMaxElement,\n    getMinIndex,\n    getMinElement,\n    getMedianIndex,\n    getMedianElement,\n    getAverageValue\n};\n\nconsole.log('Youngest user:');\nlogUser(getMinElement(users, compareUsers));\nconsole.log(` - was ${colorizeIndex(getMinIndex(users, compareUsers))}th to register`);\n\nconsole.log();\n\nconsole.log('Median user:');\nlogUser(getMedianElement(users, compareUsers));\nconsole.log(` - was ${colorizeIndex(getMedianIndex(users, compareUsers))}th to register`);\n\nconsole.log();\n\nconsole.log('Oldest user:');\nlogUser(getMaxElement(users, compareUsers));\nconsole.log(` - was ${colorizeIndex(getMaxIndex(users, compareUsers))}th to register`);\n\nconsole.log();\n\nconsole.log('Average user age:');\nconsole.log(` - ${String(getAverageValue(users, ({age}: User) => age))} years`);\n\nconsole.log();\n\nconsole.log('Youngest admin:');\nlogAdmin(getMinElement(admins, compareAdmins));\nconsole.log(` - was ${colorizeIndex(getMinIndex(users, compareUsers))}th to register`);\n\nconsole.log();\n\nconsole.log('Median admin:');\nlogAdmin(getMedianElement(admins, compareAdmins));\nconsole.log(` - was ${colorizeIndex(getMedianIndex(users, compareUsers))}th to register`);\n\nconsole.log();\n\nconsole.log('Oldest admin:');\nlogAdmin(getMaxElement(admins, compareAdmins));\nconsole.log(` - was ${colorizeIndex(getMaxIndex(users, compareUsers))}th to register`);\n\nconsole.log();\n\nconsole.log('Average admin age:');\nconsole.log(` - ${String(getAverageValue(admins, ({age}: Admin) => age))} years`);\n"},395:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, typeAssert} from 'type-assertions';\nimport {\n    getMaxIndex,\n    getMaxElement,\n    getMinIndex,\n    getMinElement,\n    getMedianIndex,\n    getMedianElement,\n    getAverageValue\n} from './index';\n\ntypeAssert<\n    IsTypeEqual<\n        typeof getMaxIndex,\n        <T>(input: T[], comparator: (a: T, b: T) => number) => number\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof getMinIndex,\n        <T>(input: T[], comparator: (a: T, b: T) => number) => number\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof getMedianIndex,\n        <T>(input: T[], comparator: (a: T, b: T) => number) => number\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof getMaxElement,\n        <T>(input: T[], comparator: (a: T, b: T) => number) => T | null\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof getMinElement,\n        <T>(input: T[], comparator: (a: T, b: T) => number) => T | null\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof getMedianElement,\n        <T>(input: T[], comparator: (a: T, b: T) => number) => T | null\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof getAverageValue,\n        <T>(input: T[], getValue: (item: T) => number) => number | null\n    >\n>();\n"},396:function(n,e,t){"use strict";t.r(e),e.default="declare module 'stats' {\n    export function getMaxIndex(input: unknown, comparator: unknown): unknown;\n}\n"},397:function(n,e,t){"use strict";t.r(e),e.default="declare module 'stats' {\n    type Comparator<T> = (a: T, b: T) => number;\n\n    type GetIndex = <T>(input: T[], comparator: Comparator<T>) => number;\n    export const getMaxIndex: GetIndex;\n    export const getMinIndex: GetIndex;\n    export const getMedianIndex: GetIndex;\n\n    type GetElement = <T>(input: T[], comparator: Comparator<T>) => T | null;\n    export const getMaxElement: GetElement;\n    export const getMinElement: GetElement;\n    export const getMedianElement: GetElement;\n\n    export const getAverageValue: <T>(input: T[], getValue: (item: T) => number) => number | null;\n}\n"},401:function(n,e,t){"use strict";t.r(e),e.default="import * as dateWizard from 'date-wizard';\nimport './module-augmentations/date-wizard';\n\n/*\n\nIntro:\n\n    The next logical step for us is to provide more\n    precise registration date for our users and admins.\n    We've approximately made up dates for each user and\n    admin and used a library called \"date-wizard\" in\n    order to pretty-format the dates.\n\n    Unfortunately, type declarations which came with\n    \"date-wizard\" library were incomplete.\n\n    1. DateDetails interface is missing\n       time related fields such as hours, minutes and\n       seconds.\n    2. Function \"pad\" is exported but not declared.\n\nExercise:\n\n    Check date-wizard module implementation at:\n    node_modules/date-wizard/index.js\n    node_modules/date-wizard/index.d.ts\n\n    Extend type declaration of that module in:\n    module-augmentations/date-wizard/index.ts\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n    registered: Date;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n    registered: Date;\n}\n\ntype Person = User | Admin;\n\nconst admins: Admin[] = [\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator', registered: new Date('2016-06-01T16:23:13') },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver', registered: new Date('2017-02-11T12:12:11') },\n    { type: 'admin', name: 'Steve', age: 40, role: 'Steve', registered: new Date('2018-01-05T11:02:30') },\n    { type: 'admin', name: 'Will Bruces', age: 30, role: 'Overseer', registered: new Date('2018-08-12T10:01:24') },\n    { type: 'admin', name: 'Superwoman', age: 28, role: 'Customer support', registered: new Date('2019-03-25T07:51:05') }\n];\n\nconst users: User[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep', registered: new Date('2016-02-15T09:25:13') },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut', registered: new Date('2016-03-23T12:47:03') },\n    { type: 'user', name: 'Moses', age: 70, occupation: 'Desert guide', registered: new Date('2017-02-19T17:22:56') },\n    { type: 'user', name: 'Superman', age: 28, occupation: 'Ordinary person', registered: new Date('2018-02-25T19:44:28') },\n    { type: 'user', name: 'Inspector Gadget', age: 31, occupation: 'Undercover', registered: new Date('2019-03-25T09:29:12') }\n];\n\nconst isAdmin = (person: Person): person is Admin => person.type === 'admin';\nconst isUser = (person: Person): person is User => person.type === 'user';\n\nfunction logPerson(person: Person, index: number) {\n    let additionalInformation: string = '';\n    if (isAdmin(person)) {\n        additionalInformation = person.role;\n    }\n    if (isUser(person)) {\n        additionalInformation = person.occupation;\n    }\n    let registeredAt = dateWizard(person.registered, '{date}.{month}.{year} {hours}:{minutes}');\n    let num = `#${dateWizard.pad(index + 1)}`;\n    console.log(\n        ` - ${num}: ${person.name}, ${person.age}, ${additionalInformation}, ${registeredAt}`\n    );\n}\n\nexport {\n    dateWizard\n};\n\nconsole.log('All users:');\n\n([] as Person[])\n    .concat(users, admins)\n    .forEach(logPerson);\n\nconsole.log();\n\nconsole.log('Early birds:');\n\n([] as Person[])\n    .concat(users, admins)\n    .filter((person) => dateWizard.dateDetails(person.registered).hours < 10)\n    .forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/modules.html#ambient-modules\n// https://www.typescriptlang.org/docs/handbook/declaration-merging.html\n"},402:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, typeAssert} from 'type-assertions';\nimport {dateWizard} from './index';\n\ntypeAssert<\n    IsTypeEqual<\n        dateWizard.DateDetails,\n        {\n            year: number;\n            month: number;\n            date: number;\n            hours: number;\n            minutes: number;\n            seconds: number;\n        }\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof dateWizard.pad,\n        (level: number) => string\n    >\n>();\n"},403:function(n,e,t){"use strict";t.r(e),e.default="// This enables module augmentation mode.\nimport 'date-wizard';\n\ndeclare module 'date-wizard' {\n    // Add your module extensions here.\n}\n"},404:function(n,e,t){"use strict";t.r(e),e.default="import 'date-wizard';\n\ndeclare module 'date-wizard' {\n    const pad: (ident: number) => string;\n\n    interface DateDetails {\n        hours: number;\n        minutes: number;\n        seconds: number;\n    }\n}\n"},408:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    For some unknown reason most of our developers left\n    the company. We need to actively hire now.\n    In the media we've read that companies that invent\n    and publish new technologies attract more potential\n    candidates. We need to use this opportunity and\n    invent and publish some npm packages. Following the\n    new trend of functional programming in JS we\n    decided to develop a functional utility library.\n    This will put us on the bleading edge since we are\n    pretty much sure no one else did anything similar.\n    We also provided some jsdoc along with the\n    functions, but it might sometimes be inaccurate.\n\nExercise:\n\n    Provide proper typing for the specified functions.\n\nBonus:\n\n    Could you please also refactor the code to reduce\n    code duplication?\n    You might need some excessive type casting to make\n    it really short.\n\n*/\n\n/**\n * 2 arguments passed: returns a new array\n * which is a result of input being mapped using\n * the specified mapper.\n *\n * 1 argument passed: returns a function which accepts\n * an input and returns a new array which is a result\n * of input being mapped using original mapper.\n *\n * 0 arguments passed: returns itself.\n *\n * @param {Function} mapper\n * @param {Array} input\n * @return {Array | Function}\n */\nexport function map(mapper, input) {\n    if (arguments.length === 0) {\n        return map;\n    }\n    if (arguments.length === 1) {\n        return function subFunction(subInput) {\n            if (arguments.length === 0) {\n                return subFunction;\n            }\n            return subInput.map(mapper);\n        };\n    }\n    return input.map(mapper);\n}\n\n/**\n * 2 arguments passed: returns a new array\n * which is a result of input being filtered using\n * the specified filter function.\n *\n * 1 argument passed: returns a function which accepts\n * an input and returns a new array which is a result\n * of input being filtered using original filter\n * function.\n *\n * 0 arguments passed: returns itself.\n *\n * @param {Function} filterer\n * @param {Array} input\n * @return {Array | Function}\n */\nexport function filter(filterer, input) {\n    if (arguments.length === 0) {\n        return filter;\n    }\n    if (arguments.length === 1) {\n        return function subFunction(subInput) {\n            if (arguments.length === 0) {\n                return subFunction;\n            }\n            return subInput.filter(filterer);\n        };\n    }\n    return input.filter(filterer);\n}\n\n/**\n * 3 arguments passed: reduces input array it using the\n * specified reducer and initial value and returns\n * the result.\n *\n * 2 arguments passed: returns a function which accepts\n * input array and reduces it using previously specified\n * reducer and initial value and returns the result.\n *\n * 1 argument passed: returns a function which:\n *   * when 2 arguments is passed to the subfunction, it\n *     reduces the input array using specified initial\n *     value and previously specified reducer and returns\n *     the result.\n *   * when 1 argument is passed to the subfunction, it\n *     returns a function which expects the input array\n *     and reduces the specified input array using\n *     previously specified reducer and inital value.\n *   * when 0 argument is passed to the subfunction, it\n *     returns itself.\n *\n * 0 arguments passed: returns itself.\n *\n * @param {Function} reducer\n * @param {*} initialValue\n * @param {Array} input\n * @return {* | Function}\n */\nexport function reduce(reducer, initialValue, input) {\n    if (arguments.length === 0) {\n        return reduce;\n    }\n    if (arguments.length === 1) {\n        return function subFunction(subInitialValue, subInput) {\n            if (arguments.length === 0) {\n                return subFunction;\n            }\n            if (arguments.length === 1) {\n                return function subSubFunction(subSubInput) {\n                    if (arguments.length === 0) {\n                        return subSubFunction;\n                    }\n                    return subSubInput.reduce(reducer, subInitialValue);\n                };\n            }\n            return subInput.reduce(reducer,subInitialValue);\n        }\n    }\n    if (arguments.length === 2) {\n        return function subFunction(subInput) {\n            if (arguments.length === 0) {\n                return subFunction;\n            }\n            return subInput.reduce(reducer, initialValue);\n        };\n    }\n    return input.reduce(reducer, initialValue);\n}\n\n/**\n * 2 arguments passed: returns sum of a and b.\n *\n * 1 argument passed: returns a function which expects\n * b and returns sum of a and b.\n *\n * 0 arguments passed: returns itself.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Number | Function}\n */\nexport function add(a, b) {\n    if (arguments.length === 0) {\n        return add;\n    }\n    if (arguments.length === 1) {\n        return function subFunction(subB) {\n            if (arguments.length === 0) {\n                return subFunction;\n            }\n            return a + subB;\n        };\n    }\n    return a + b;\n}\n\n/**\n * 2 arguments passed: subtracts b from a and\n * returns the result.\n *\n * 1 argument passed: returns a function which expects\n * b and subtracts b from a and returns the result.\n *\n * 0 arguments passed: returns itself.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Number | Function}\n */\nexport function subtract(a, b) {\n    if (arguments.length === 0) {\n        return subtract;\n    }\n    if (arguments.length === 1) {\n        return function subFunction(subB) {\n            if (arguments.length === 0) {\n                return subFunction;\n            }\n            return a - subB;\n        };\n    }\n    return a - b;\n}\n\n/**\n * 2 arguments passed: returns value of property\n * propName of the specified object.\n *\n * 1 argument passed: returns a function which expects\n * propName and returns value of property propName\n * of the specified object.\n *\n * 0 arguments passed: returns itself.\n *\n * @param {Object} obj\n * @param {String} propName\n * @return {* | Function}\n */\nexport function prop(obj, propName) {\n    if (arguments.length === 0) {\n        return prop;\n    }\n    if (arguments.length === 1) {\n        return function subFunction(subPropName) {\n            if (arguments.length === 0) {\n                return subFunction;\n            }\n            return obj[subPropName];\n        };\n    }\n    return obj[propName];\n}\n\n/**\n * >0 arguments passed: expects each argument to be\n * a function. Returns a function which accepts the\n * same arguments as the first function. Passes these\n * arguments to the first function, the result of\n * the first function passes to the second function,\n * the result of the second function to the third\n * function... and so on. Returns the result of the\n * last function execution.\n *\n * 0 arguments passed: returns itself.\n *\n * TODO TypeScript\n *   * Should properly handle at least 5 arguments.\n *   * Should also make sure argument of the next\n *     function matches the return type of the previous\n *     function.\n *\n * @param {Function[]} functions\n * @return {*}\n */\nexport function pipe(...functions) {\n    if (arguments.length === 0) {\n        return pipe;\n    }\n    return function subFunction() {\n        let nextArguments = Array.from(arguments);\n        let result;\n        for (const func of functions) {\n            result = func(...nextArguments);\n            nextArguments = [result];\n        }\n        return result;\n    };\n}\n"},409:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    For some unknown reason most of our developers left\n    the company. We need to actively hire now.\n    In the media we've read that companies that invent\n    and publish new technologies attract more potential\n    candidates. We need to use this opportunity and\n    invent and publish some npm packages. Following the\n    new trend of functional programming in JS we\n    decided to develop a functional utility library.\n    This will put us on the bleading edge since we are\n    pretty much sure no one else did anything similar.\n    We also provided some jsdoc along with the\n    functions, but it might sometimes be inaccurate.\n\nExercise:\n\n    Provide proper typing for the specified functions.\n\nBonus:\n\n    Could you please also refactor the code to reduce\n    code duplication?\n    You might need some excessive type casting to make\n    it really short.\n\n*/\n\nfunction toFunctional<T extends Function>(func: T): Function {\n    const fullArgCount = func.length;\n    function createSubFunction(curriedArgs: unknown[]) {\n        return function(this: unknown) {\n            const newCurriedArguments = curriedArgs.concat(Array.from(arguments));\n            if (newCurriedArguments.length > fullArgCount) {\n                throw new Error('Too many arguments');\n            }\n            if (newCurriedArguments.length === fullArgCount) {\n                return func.apply(this, newCurriedArguments);\n            }\n            return createSubFunction(newCurriedArguments);\n        };\n    }\n    return createSubFunction([]);\n}\n\ninterface MapperFunc<I, O> {\n    (): MapperFunc<I, O>;\n    (input: I[]): O[];\n}\n\ninterface MapFunc {\n    (): MapFunc;\n    <I, O>(mapper: (item: I) => O): MapperFunc<I, O>;\n    <I, O>(mapper: (item: I) => O, input: I[]): O[];\n}\n\n/**\n * 2 arguments passed: returns a new array\n * which is a result of input being mapped using\n * the specified mapper.\n *\n * 1 argument passed: returns a function which accepts\n * an input and returns a new array which is a result\n * of input being mapped using original mapper.\n *\n * 0 arguments passed: returns itself.\n */\nexport const map = toFunctional(<I, O>(fn: (arg: I) => O, input: I[]) => input.map(fn)) as MapFunc;\n\n\ninterface FiltererFunc<I> {\n    (): FiltererFunc<I>;\n    (input: I[]): I[];\n}\n\ninterface FilterFunc {\n    (): FilterFunc;\n    <I>(filterer: (item: I) => boolean): FiltererFunc<I>;\n    <I>(filterer: (item: I) => boolean, input: I[]): I[];\n}\n\n/**\n * 2 arguments passed: returns a new array\n * which is a result of input being filtered using\n * the specified filter function.\n *\n * 1 argument passed: returns a function which accepts\n * an input and returns a new array which is a result\n * of input being filtered using original filter\n * function.\n *\n * 0 arguments passed: returns itself.\n */\nexport const filter = toFunctional(<I>(fn: (item: I) => boolean, input: I[]) => input.filter(fn)) as FilterFunc;\n\ninterface ReducerInitialFunc<I, O> {\n    (): ReducerInitialFunc<I, O>;\n    (input: I[]): O;\n}\n\ninterface ReducerFunc<I, O> {\n    (): ReducerFunc<I, O>;\n    (initialValue: O): ReducerInitialFunc<I, O>;\n    (initialValue: O, input: I[]): O;\n}\n\ninterface ReduceFunc {\n    (): ReduceFunc;\n    <I, O>(reducer: (acc: O, val: I) => O): ReducerFunc<I, O>;\n    <I, O>(reducer: (acc: O, val: I) => O, initialValue: O): ReducerInitialFunc<I, O>;\n    <I, O>(reducer: (acc: O, val: I) => O, initialValue: O, input: I[]): O;\n}\n\n/**\n * 3 arguments passed: reduces input array it using the\n * specified reducer and initial value and returns\n * the result.\n *\n * 2 arguments passed: returns a function which accepts\n * input array and reduces it using previously specified\n * reducer and initial value and returns the result.\n *\n * 1 argument passed: returns a function which:\n *   * when 2 arguments is passed to the subfunction, it\n *     reduces the input array using specified initial\n *     value and previously specified reducer and returns\n *     the result.\n *   * when 1 argument is passed to the subfunction, it\n *     returns a function which expects the input array\n *     and reduces the specified input array using\n *     previously specified reducer and inital value.\n *   * when 0 argument is passed to the subfunction, it\n *     returns itself.\n *\n * 0 arguments passed: returns itself.\n */\nexport const reduce = toFunctional(\n    <I, O>(reducer: (acc: O, item: I) => O, initialValue: O, input: I[]) => input.reduce(reducer, initialValue)\n) as ReduceFunc;\n\ninterface ArithmeticArgFunc {\n    (): ArithmeticArgFunc;\n    (b: number): number;\n}\n\ninterface ArithmeticFunc {\n    (): ArithmeticFunc;\n    (a: number): ArithmeticArgFunc;\n    (a: number, b: number): number;\n}\n\n/**\n * 2 arguments passed: returns sum of a and b.\n *\n * 1 argument passed: returns a function which expects\n * b and returns sum of a and b.\n *\n * 0 arguments passed: returns itself.\n */\nexport const add = toFunctional((a: number, b: number) => a + b) as ArithmeticFunc;\n\n/**\n * 2 arguments passed: subtracts b from a and\n * returns the result.\n *\n * 1 argument passed: returns a function which expects\n * b and subtracts b from a and returns the result.\n *\n * 0 arguments passed: returns itself.\n */\nexport const subtract = toFunctional((a: number, b: number) => a - b) as ArithmeticFunc;\n\ninterface PropNameFunc<K extends string> {\n    (): PropNameFunc<K>;\n    <O extends {[key in K]: O[K]}>(obj: O): O[K];\n}\n\ninterface PropFunc {\n    (): PropFunc;\n    <K extends string>(propName: K): PropNameFunc<K>;\n    <O, K extends keyof O>(propName: K, obj: O): O[K];\n}\n\n/**\n * 2 arguments passed: returns value of property\n * propName of the specified object.\n *\n * 1 argument passed: returns a function which expects\n * propName and returns value of property propName\n * of the specified object.\n *\n * 0 arguments passed: returns itself.\n */\nexport const prop = toFunctional(<O, K extends keyof O>(obj: O, propName: K): O[K] => obj[propName]) as PropFunc;\n\ntype F<A extends unknown[], R> = (...args: A) => R;\ntype TR<I, O> = (arg: I) => O;\n\ninterface PipeFunc {\n    (): PipeFunc;\n    <A1 extends unknown[], R1>(f: F<A1, R1>): (...args: A1) => R1;\n    <A1 extends unknown[], R1, R2>(f: F<A1, R1>, tr1: TR<R1, R2>): (...args: A1) => R2;\n    <A1 extends unknown[], R1, R2, R3>(f: F<A1, R1>, tr1: TR<R1, R2>, tr2: TR<R2, R3>): (...args: A1) => R3;\n    <A1 extends unknown[], R1, R2, R3, R4>(\n        f: F<A1, R1>, tr1: TR<R1, R2>, tr2: TR<R2, R3>, tr3: TR<R3, R4>\n    ): (...args: A1) => R4;\n    <A1 extends unknown[], R1, R2, R3, R4, R5>(\n        f: F<A1, R1>, tr1: TR<R1, R2>, tr2: TR<R2, R3>, tr3: TR<R3, R4>, tr4: TR<R4, R5>\n    ): (...args: A1) => R5;\n}\n\n/**\n * >0 arguments passed: expects each argument to be\n * a function. Returns a function which accepts the\n * same arguments as the first function. Passes these\n * arguments to the first function, the result of\n * the first function passes to the second function,\n * the result of the second function to the third\n * function... and so on. Returns the result of the\n * last function execution.\n *\n * 0 arguments passed: returns itself.\n */\nexport const pipe: PipeFunc = function (...functions: Function[]) {\n    if (arguments.length === 0) {\n        return pipe;\n    }\n    return function subFunction() {\n        let nextArguments = Array.from(arguments);\n        let result;\n        for (const func of functions) {\n            result = func(...nextArguments);\n            nextArguments = [result];\n        }\n        return result;\n    };\n};\n"},410:function(n,e,t){"use strict";t.r(e),e.default="import {typeAssert, IsTypeEqual} from 'type-assertions/index';\nimport {map, reduce, filter, add, subtract, prop, pipe} from './index';\n\nconst mapResult1 = map()(String)()([1, 2, 3]);\ntypeAssert<IsTypeEqual<typeof mapResult1, string[]>>();\n\nconst mapResult2 = map(Boolean, [1, 0, 1]);\ntypeAssert<IsTypeEqual<typeof mapResult2, boolean[]>>();\n\nconst reduceResult1 = reduce()((a: number, b: number) => a + b)()(0)()([1, 2, 3]);\ntypeAssert<IsTypeEqual<typeof reduceResult1, number>>();\n\nconst reduceResult2 = reduce(add, 0, [1, 2, 3]);\ntypeAssert<IsTypeEqual<typeof reduceResult2, number>>();\n\nconst reduceResult3 = reduce(subtract, 0, [1, 2, 3]);\ntypeAssert<IsTypeEqual<typeof reduceResult3, number>>();\n\nconst reduceResult4 = reduce((a: string, b: string) => a + b, '', ['1', '2', '3']);\ntypeAssert<IsTypeEqual<typeof reduceResult4, string>>();\n\nconst filterResult1 = filter()((n: number) => n !== 0)()([0, 1, 2]);\ntypeAssert<IsTypeEqual<typeof filterResult1, number[]>>();\n\nconst filterResult2 = filter(Boolean, [0, 1, 2]);\ntypeAssert<IsTypeEqual<typeof filterResult2, number[]>>();\n\nconst addResult1 = add()(1)()(2);\ntypeAssert<IsTypeEqual<typeof addResult1, number>>();\n\nconst addResult2 = add(1, 2);\ntypeAssert<IsTypeEqual<typeof addResult2, number>>();\n\nconst subtractResult1 = subtract()(2)()(1);\ntypeAssert<IsTypeEqual<typeof subtractResult1, number>>();\n\nconst subtractResult2 = subtract(2, 1);\ntypeAssert<IsTypeEqual<typeof subtractResult2, number>>();\n\nconst propResult1 = prop()('x')()({x: 1, y: 'Hello'});\ntypeAssert<IsTypeEqual<typeof propResult1, number>>();\n\nconst propResult2 = prop('y', {x: 1, y: 'Hello'});\ntypeAssert<IsTypeEqual<typeof propResult2, string>>();\n\nconst pipeResult1 = pipe(filter(Boolean), map(String), reduce((a: string, b: string) => a + b, ''))([0, 1, 2, 3]);\ntypeAssert<IsTypeEqual<typeof pipeResult1, string>>();\n\nconst pipeResult2 = pipe()()(filter(Boolean), map(String))([0, 1, 2, 3]);\ntypeAssert<IsTypeEqual<typeof pipeResult2, string[]>>();\n"},411:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Our attempt to Open Source didn't work quite as\n    expected. It turned out there were already many\n    existing functional JS libraries.\n\n    All the remaining developers left the company as\n    well. It seems that they are joining a very\n    ambitious startup which re-invented a juicer and\n    raised millions of dollars.\n    Too bad we cannot compete with this kind of\n    financing even though we believe our idea is\n    great.\n\n    It's time to shine for the last time and publish\n    our new invention: object-constructor as our CTO\n    named it. A small library which helps\n    manipulating an object.\n\nExercise:\n\n    Here is a library which helps manipulating objects.\n    We tried to write type annotations and we failed.\n    Please help!\n\n*/\n\nexport class ObjectManipulator {\n\n    constructor(protected obj) {}\n\n    public set(key, value) {\n        return new ObjectManipulator({...this.obj, [key]: value});\n    }\n\n    public get(key) {\n        return this.obj[key];\n    }\n\n    public delete(key) {\n        const newObj = {...this.obj};\n        delete newObj[key];\n        return new ObjectManipulator(newObj);\n    }\n\n    public getObject() {\n        return this.obj;\n    }\n}\n"},412:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Our attempt to Open Source didn't work quite as\n    expected. It turned out there were already many\n    existing functional JS libraries.\n\n    All the remaining developers left the company as\n    well. It seems that they are joining a very\n    ambitious startup which re-invented a juicer and\n    raised millions of dollars.\n    Too bad we cannot compete with this kind of\n    financing even though we believe our idea is\n    great.\n\n    It's time to shine for the last time and publish\n    our new invention: object-constructor as our CTO\n    named it. A small library which helps\n    manipulating an object.\n\nExercise:\n\n    Here is a library which helps manipulating objects.\n    We tried to write type annotations and we failed.\n    Please help!\n\n*/\n\ntype ObjectWithNewProp<T, K extends string, V> = T & {[NK in K]: V};\n\nexport class ObjectManipulator<T> {\n    constructor(protected obj: T) {}\n\n    public set<K extends string, V>(key: K, value: V): ObjectManipulator<ObjectWithNewProp<T, K, V>> {\n        return new ObjectManipulator({...this.obj, [key]: value} as ObjectWithNewProp<T, K, V>);\n    }\n\n    public get<K extends keyof T>(key: K): T[K] {\n        return this.obj[key];\n    }\n\n    public delete<K extends keyof T>(key: K): ObjectManipulator<Omit<T, K>> {\n        const newObj = {...this.obj};\n        delete newObj[key];\n        return new ObjectManipulator(newObj);\n    }\n\n    public getObject(): T {\n        return this.obj;\n    }\n}\n"},413:function(n,e,t){"use strict";t.r(e),e.default="import {typeAssert, IsTypeEqual} from 'type-assertions';\nimport {ObjectManipulator} from './index';\n\nconst test1 = new ObjectManipulator({})\n    .set('x', 123)\n    .set('y', 'hello')\n    .getObject();\n\ntypeAssert<IsTypeEqual<typeof test1, {x: number; y: string}>>();\n\nconst test2 = new ObjectManipulator({})\n    .set('x', 123)\n    .set('y', 'hello')\n    .set('z', true)\n    .delete('z')\n    .delete('y')\n    .getObject();\n\ntypeAssert<IsTypeEqual<typeof test2, {x: number}>>();\n\nconst test3 = new ObjectManipulator({})\n    .set('x', 123)\n    .set('y', 'hello')\n    .delete('y')\n    .get('x');\n\ntypeAssert<IsTypeEqual<typeof test3, number>>();\n\nconst test4 = new ObjectManipulator({x: true, y: 'hello'})\n    .delete('y')\n    .get('x');\n\ntypeAssert<IsTypeEqual<typeof test4, boolean>>();\n\n"},414:function(n,e,t){"use strict";t.r(e),e.default="/*\n\n                                             _\n                                            | |\n              ___ ___  _ __   __ _ _ __ __ _| |_ ___\n             / __/ _ \\| '_ \\ / _` | '__/ _` | __/ __|\n            | (_| (_) | | | | (_| | | | (_| | |_\\__ \\\n             \\___\\___/|_| |_|\\__, |_|  \\__,_|\\__|___/\n                              __/ |\n                             |___/\n\n          You've successfully completed TypeScript exercises!\n\n    ................................................................\n    .                                                              .\n    .     ####################    ####################      E      .\n    .     ####################    ####################      X      .\n    .             ####            ####                      E      .\n    .             ####            ####                      R      .\n    .             ####            ####################      C      .\n    .             ####                            ####      I      .\n    .             ####                            ####      S      .\n    .             ####            ####################      E      .\n    .             ####            ####################      S      .\n    .                                                              .\n    ................................................................\n\n\n    Want to improve your TypeScript skills further?\n\n        1. Go through the TS Handbook:\n            https://www.typescriptlang.org/docs/handbook/intro.html\n\n        2. Most of the important updates are listed here:\n            https://www.typescriptlang.org/docs/handbook/release-notes/overview.html\n\n        3. Check out Effective TypeScript book:\n            https://effectivetypescript.com/\n\n    Credits:\n\n        Marat Dulin, https://mdevils.com\n\n        Support my new ideas on Patreon:\n            https://www.patreon.com/mdevils\n*/\n"},415:function(n,e,t){"use strict";t.r(e),e.default="// Nothing to test here :)\n"},418:function(n,e,t){var r=t(419),s=["init","updateFiles","getErrors"];n.exports=function(){var n=new Worker(t.p+"a7fc1a3d04cd4bbfe66d.worker.js",{name:"[hash].worker.js"});return r(n,s),n}},422:function(n,e,t){"use strict";t.r(e);var r=t(26),s=t.n(r),o=t(266),i=t.n(o),a=t(33),c=t(143),u=t(94),l=t(267),p=t.n(l),d=t(16);function m(){return Object(d.jsx)(p.a,{color:"gray"})}function f(n){var e=n.observable,t=n.render,s=function(n){var e=Object(r.useState)(!1),t=Object(u.a)(e,2)[1],s=Object(r.useMemo)((function(){var e={value:void 0,subscription:void 0},r=!1;return e.subscription=n.subscribe((function(n){e.value=n,r&&t((function(n){return!n}))})),r=!0,e}),[n,t]),o=s.subscription,i=s.value;return Object(r.useLayoutEffect)((function(){return function(){return null===o||void 0===o?void 0:o.unsubscribe()}}),[o]),i}(e);return void 0===s?Object(d.jsx)(m,{}):Object(d.jsx)(d.Fragment,{children:t(s)})}function g(n,e){return Object(d.jsx)(f,{observable:n,render:e})}var y,h,b,w,x,A,v,j=t(37),O=t(140),I=t(41),T=t(428),k=function(){var n=new T.a(1),e={panels:{exercise:{collapsed:!1},files:{collapsed:!1},solutionFiles:{collapsed:!1}}};function t(t){e=t,n.next(t)}return n.next(e),{observable$:n,expandPanel:function(n){return t(Object(I.a)(Object(I.a)({},e),{},{panels:Object(I.a)(Object(I.a)({},e.panels),{},Object(O.a)({},n,Object(I.a)(Object(I.a)({},e.panels[n]),{},{collapsed:!1})))}))},collapsePanel:function(n){return t(Object(I.a)(Object(I.a)({},e),{},{panels:Object(I.a)(Object(I.a)({},e.panels),{},Object(O.a)({},n,Object(I.a)(Object(I.a)({},e.panels[n]),{},{collapsed:!0})))}))}}}(),P=j.a.div(y||(y=Object(a.a)(["\n    position: absolute;\n    display: flex;\n    flex-direction: row;\n    flex-grow: 0;\n    flex-shrink: 0;\n    height: 30px;\n    min-width: 100%;\n    transform: rotate(0) translateX(0);\n    transform-origin: top left;\n    cursor: pointer;\n    background: #eee;\n    border-bottom: 1px #ddd solid;\n    ","\n"])),(function(n){var e=n.collapsed,t=n.orientation;return e&&"vertical"===t?"\n                transform: rotate(-90deg) translateX(-100%);\n                button {\n                    display: none;\n                }\n            ":""})),E=j.a.div(h||(h=Object(a.a)(["\n    flex: 1 1 auto;\n    font-weight: bold;\n    color: rgba(0, 0, 0, 0.75);\n    line-height: 30px;\n    padding: 0 10px;\n"]))),U=j.a.div(b||(b=Object(a.a)(["\n    flex: 1 1 auto;\n    padding: 30px 0 0;\n    transform: scaleX(100%) scaleY(100%);\n    transform-origin: ",";\n    opacity: 1;\n    transition: transform 0.2s linear, opacity 0.2s linear;\n    ","\n"])),(function(n){return"vertical"===n.orientation?"left center":"center bottom"}),(function(n){var e=n.collapsed,t=n.orientation;return e?"\n                position: absolute;\n                transform: ".concat("vertical"===t?"scaleX":"scaleY","(0);\n                opacity: 0;\n            "):""})),R=j.a.button(w||(w=Object(a.a)(["\n    display: block;\n    float: right;\n    border: none;\n    padding: 5px 10px;\n    background: transparent;\n    font-weight: bold;\n    cursor: pointer;\n    &::before {\n        content: '_';\n    }\n"]))),M=j.a.div(x||(x=Object(a.a)(["\n    position: relative;\n    background-color: ",";\n    display: flex;\n    flex-direction: column;\n    flex: 0 0 ",";\n    ",": 1px #ddd solid;\n    &:last-of-type {\n        ",": none;\n        ",": 1px #ddd solid;\n    }\n    transition: flex-basis 0.2s linear, background-color 0.2s linear;\n"])),(function(n){return n.collapsed?"#eee":"#f6f6f6"}),(function(n){var e=n.collapsed,t=n.orientation;return e?"30px":"".concat("vertical"===t?200:150,"px")}),(function(n){return"vertical"===n.orientation?"border-right":"border-bottom"}),(function(n){return"vertical"===n.orientation?"border-right":"border-bottom"}),(function(n){return"vertical"===n.orientation?"border-left":"border-top"}));function F(n){var e=n.id,t=n.header,s=n.orientation,o=n.children,i=Object(r.useMemo)((function(){return[function(){return k.collapsePanel(e)},function(){return k.expandPanel(e)}]}),[e]),a=Object(u.a)(i,2),c=a[0],l=a[1];return g(k.observable$,(function(n){var r=n.panels;return Object(d.jsxs)(M,{collapsed:r[e].collapsed,orientation:s,children:[Object(d.jsxs)(P,{collapsed:r[e].collapsed,orientation:s,onClick:r[e].collapsed?l:c,children:[Object(d.jsx)(E,{children:t}),Object(d.jsx)(R,{})]}),Object(d.jsx)(U,{collapsed:r[e].collapsed,orientation:s,children:o})]})}))}var S=j.a.div(A||(A=Object(a.a)(["\n    flex: 0 0 auto;\n    padding: 0 10px;\n    height: 30px;\n    line-height: 30px;\n    border-bottom: 1px #ddd solid;\n    background: #eee;\n    font-size: 14px;\n    color: #0033aa;\n"]))),q=j.a.span(v||(v=Object(a.a)(["\n    margin-left: 20px;\n    font-size: 12px;\n    color: #339900;\n"])));function C(n){var e=n.filename,t=n.readOnly;return Object(d.jsxs)(S,{children:[e.replace(/^\//,""),t&&Object(d.jsx)(q,{children:"Read Only"})]})}var $,W,N,_,D,K,B,z=function(n){var e=n.color;return Object(d.jsx)("svg",{version:"1.1",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:"16",height:"16",children:Object(d.jsx)("path",{d:"M0 4C3.22 4 5.24 4 6.04 4C6.43 4 6.8 4.19 7.03 4.51C7.23 4.78 7.71 5.46 8.49 6.54L16 6.54L16 16L0 16L0 4Z",fill:e})})},L=function(n){var e=n.color;return Object(d.jsxs)("svg",{version:"1.1",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:"16",height:"16",children:[Object(d.jsx)("path",{d:"M2 10L8 10L8 4L14 4L14 16L2 16",fill:e}),Object(d.jsx)("path",{d:"M2 9L7 9L7 4",fill:e})]})};var V=j.a.div($||($=Object(a.a)(["\n    position: relative;\n    user-select: none;\n"]))),J=j.a.div(W||(W=Object(a.a)(["\n    margin-left: 15px;\n"]))),G=j.a.div(N||(N=Object(a.a)(["\n    position: relative;\n    z-index: 1;\n"]))),H=j.a.div(_||(_=Object(a.a)(["\n    float: right;\n    margin-right: 15px;\n    color: gray;\n"]))),Q=j.a.button(D||(D=Object(a.a)(["\n    background: none;\n    color: white;\n    cursor: pointer;\n    border: none;\n    padding: 2px 5px;\n    margin-right: -6px;\n    &:hover {\n        text-decoration: underline;\n        text-decoration-style: dotted;\n    }\n"]))),X=j.a.div(K||(K=Object(a.a)(["\n    display: block;\n    cursor: ",";\n    pointer-events: ",";\n    color: ",";\n    height: 30px;\n    line-height: 30px;\n    font-size: 14px;\n    ","\n"])),(function(n){return n.selectable?"pointer":"default"}),(function(n){return n.selectable?"all":"none"}),(function(n){var e=n.selected,t=n.readOnly;return e?"white":t?"#555":"black"}),(function(n){return n.selected?"\n                &::before {\n                    z-index: 0;\n                    display: block;\n                    position: absolute;\n                    content: '';\n                    background: rgb(101,125,176);\n                    left: 0;\n                    right: 0;\n                    height: 30px;\n                }":""})),Y=j.a.div(B||(B=Object(a.a)([""])));function Z(n){var e=n.branch,t=n.selectedFilename,s=n.onSelectFilename,o=n.modifiedFilenames,i=n.revertFile,a=Object(r.useCallback)((function(){s(e.filename)}),[e,s]),c=t===e.filename,u=e.children.length>0,l=Object(r.useCallback)((function(){return i(e.filename)}),[e,i]);return Object(d.jsxs)(J,{children:[Object(d.jsx)(X,{onClick:a,selectable:0===e.children.length,selected:c,readOnly:e.readOnly,children:Object(d.jsxs)(G,{children:[u?Object(d.jsx)(z,{color:"gray"}):Object(d.jsx)(L,{color:c?"rgba(255,255,255,0.75)":"gray"})," ",e.name,Object(d.jsx)(H,{children:o[e.filename]&&(c?Object(d.jsx)(Q,{onClick:l,children:"revert"}):"*")})]})}),u&&Object(d.jsx)(Y,{children:e.children.map((function(n){return Object(d.jsx)(Z,{branch:n,selectedFilename:t,onSelectFilename:s,modifiedFilenames:o,revertFile:i},n.filename)}))})]})}function nn(n){var e=n.fileTree,t=n.selectedFilename,s=n.onSelectFilename,o=n.modifiedFilenames,i=n.revertFile,a=Object(r.useMemo)((function(){return function(n){for(var e=[],t={},r=0,s=Object.keys(n);r<s.length;r++){for(var o=s[r],i=o.replace(/^\//,"").split("/"),a=null,c=[];i.length>1;){var u=i.shift();c.push(u);var l=c.join("/");t[l]||(t[l]={name:u,filename:l,readOnly:!0,children:[]},a?a.children.push(t[l]):e.push(t[l])),a=t[l]}var p={name:i.shift(),filename:o,readOnly:Boolean(n[o].readOnly),children:[]};a?a.children.push(p):e.push(p)}return e}(e)}),[e]);return Object(d.jsx)(V,{children:a.map((function(n){return Object(d.jsx)(Z,{branch:n,selectedFilename:t,onSelectFilename:s,modifiedFilenames:o,revertFile:i},n.filename)}))})}var en,tn=t(206),rn=t(207),sn=t(221),on=t(219),an=t(172),cn=t.n(an),un=t(114),ln=j.a.div(en||(en=Object(a.a)(["\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    overflow: hidden;\n"])));function pn(n){return function(e){var t=Object(r.useState)({width:"100%",height:"100%"}),s=Object(u.a)(t,2),o=s[0],i=s[1],a=Object(r.useRef)(null);return Object(r.useEffect)((function(){var n=cn()((function(){i((function(n){if(!a.current)return n;var e="".concat(a.current.offsetWidth,"px"),t="".concat(a.current.offsetHeight,"px");return n.width===e&&n.height===t?n:{width:e,height:t}}))}),100);window.addEventListener("resize",n,{passive:!0});var e=setInterval(n,500);return function(){window.removeEventListener("resize",n),clearInterval(e)}}),[a]),Object(d.jsx)(ln,{ref:a,children:Object(d.jsx)(n,Object(I.a)(Object(I.a)({},e),o))})}}var dn,mn,fn,gn=t(269),yn=j.a.div(dn||(dn=Object(a.a)(["\n    display: block;\n    position: fixed;\n    background: rgba(0, 0, 0, 0.5);\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 1000;\n"]))),hn=j.a.div(mn||(mn=Object(a.a)(["\n    position: absolute;\n    top: 50px;\n    right: 50px;\n    bottom: 50px;\n    left: 50px;\n    padding: 40px 10px 10px;\n    background: white;\n"]))),bn=j.a.button(fn||(fn=Object(a.a)(["\n    position: absolute;\n    top: 10px;\n    right: 10px;\n"]))),wn=function(n){return n.stopPropagation()};function xn(n){var e=n.children,t=n.onClose;return Object(d.jsx)(yn,{onClick:t,children:Object(d.jsxs)(hn,{onClick:wn,children:[Object(d.jsx)(bn,{onClick:t,children:"Close"}),e]})})}var An,vn,jn,On,In,Tn=pn(function(n){Object(sn.a)(t,n);var e=Object(on.a)(t);function t(){var n;Object(tn.a)(this,t);for(var r=arguments.length,s=new Array(r),o=0;o<r;o++)s[o]=arguments[o];return(n=e.call.apply(e,[this].concat(s))).instance=null,n.instanceDiv=null,n.assignRef=function(e){return n.instanceDiv=e},n}return Object(rn.a)(t,[{key:"componentDidMount",value:function(){this.instance=un.editor.createDiffEditor(this.instanceDiv,Object(I.a)(Object(I.a)({},this.props.options),{},{renderValidationDecorations:"on"})),this.setModels()}},{key:"setModels",value:function(){var n=this.props,e=n.original,t=n.modified;this.instance.setModel({original:e,modified:t})}},{key:"componentDidUpdate",value:function(n){this.props.modified===n.modified&&this.props.original===n.original||this.setModels(),this.props.width===n.width&&this.props.height===n.height||this.instance.layout()}},{key:"componentWillUnmount",value:function(){this.instance&&this.instance.dispose()}},{key:"render",value:function(){return Object(d.jsx)("div",{ref:this.assignRef,style:{width:this.props.width,height:this.props.height}})}}]),t}(s.a.Component)),kn=["onClose","filenames","selectedFilename","onSelectFile"],Pn=j.a.div(An||(An=Object(a.a)(["\n    display: flex;\n    height: 100%;\n    border: 1px #ddd solid;\n"]))),En=j.a.div(vn||(vn=Object(a.a)(["\n    flex: 1 1 auto;\n    display: flex;\n    flex-direction: column;\n"]))),Un=j.a.div(jn||(jn=Object(a.a)(["\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    flex: 0 0 30px;\n    background: #f6f6f6;\n"]))),Rn=j.a.div(On||(On=Object(a.a)(["\n    font-size: 14px;\n"]))),Mn=j.a.div(In||(In=Object(a.a)(["\n    flex: 1 1 auto;\n    position: relative;\n    border-top: 1px #ddd solid;\n"]))),Fn=function(){return null};function Sn(n){var e=n.onClose,t=n.filenames,s=n.selectedFilename,o=n.onSelectFile,i=Object(gn.a)(n,kn),a=Object(r.useMemo)((function(){return function(n){return n.reduce((function(n,e){return n[e]={content:""},n}),{})}(t)}),[t]);return Object(d.jsx)(xn,{onClose:e,children:Object(d.jsxs)(Pn,{children:[Object(d.jsx)(F,{id:"solutionFiles",header:"Files",orientation:"vertical",children:Object(d.jsx)(nn,{fileTree:a,selectedFilename:s,onSelectFilename:o,modifiedFilenames:{},revertFile:Fn})}),Object(d.jsxs)(En,{children:[Object(d.jsx)(C,{filename:s,readOnly:!1}),Object(d.jsxs)(Un,{children:[Object(d.jsx)(Rn,{children:"Possible solution"}),Object(d.jsx)(Rn,{children:"Current version"})]}),Object(d.jsx)(Mn,{children:Object(d.jsx)(Tn,Object(I.a)({},i))})]})]})})}var qn=t(184),Cn=t.n(qn),$n=t(218),Wn=t(268);function Nn(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if("string"===typeof n)return n;if(void 0===n)return"";var r="";if(t){r+=e;for(var s=0;s<t;s++)r+="  "}if(r+=n.messageText,t++,n.next){var o,i=Object(Wn.a)(n.next);try{for(i.s();!(o=i.n()).done;){var a=o.value;r+=Nn(a,e,t)}}catch(c){i.e(c)}finally{i.f()}}return r}function _n(){return(_n=Object($n.a)(Cn.a.mark((function n(e){var t,r,s,o;return Cn.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(e&&!e.isDisposed()){n.next=2;break}return n.abrupt("return");case 2:return n.next=4,un.languages.typescript.getTypeScriptWorker();case 4:return t=n.sent,n.next=7,t(e.uri);case 7:return r=n.sent,n.next=10,Promise.all([r.getSyntacticDiagnostics(e.uri.toString()),r.getSemanticDiagnostics(e.uri.toString())]);case 10:s=n.sent.reduce((function(n,e){return n.concat(e)})),o=s.map((function(n){var t=e.getPositionAt(n.start),r=e.getPositionAt(n.start+n.length);return{severity:un.MarkerSeverity.Error,startLineNumber:t.lineNumber,startColumn:t.column,endLineNumber:r.lineNumber,endColumn:r.column,message:Nn(n.messageText,"\n")}})),un.editor.setModelMarkers(e,"typescript",o);case 13:case"end":return n.stop()}}),n)})))).apply(this,arguments)}un.languages.typescript.typescriptDefaults.setCompilerOptions({strict:!0,target:un.languages.typescript.ScriptTarget.ES2018,moduleResolution:un.languages.typescript.ModuleResolutionKind.NodeJs,typeRoots:["declarations"]});var Dn,Kn,Bn={ts:"typescript",json:"json"},zn=pn(function(n){Object(sn.a)(t,n);var e=Object(on.a)(t);function t(n){var r;return Object(tn.a)(this,t),(r=e.call(this,n)).instance=null,r.instanceDiv=null,r.models={},r.solutionsModels={},r.solutionsFilenames=[],r.viewStates={},r.lastUpdates={},r.setSelectedSolutionFilename=function(n){return r.setState({solutionsSelectedFilename:n})},r.assignRef=function(n){return r.instanceDiv=n},r.state={},r}return Object(rn.a)(t,[{key:"componentDidMount",value:function(){for(var n=this,e=this.props,t=function(){var t=Object(u.a)(s[r],2),o=t[0],i=t[1],a=i.content,c=i.solution;n.lastUpdates[o]=a;var l=Bn[o.split(".").pop()],p=un.editor.createModel(a,l,un.Uri.file("".concat(e.namespace,"/").concat(o)));p.onDidChangeContent(Object(an.debounce)((function(){var e=p.getValue();n.lastUpdates[o]=e,n.props.onChange(o,e)}),200)),n.models[o]=p,void 0!==c&&(n.solutionsModels[o]=un.editor.createModel(c,l))},r=0,s=Object.entries(e.values);r<s.length;r++)t();this.solutionsFilenames=Object.keys(this.solutionsModels),this.instance=un.editor.create(this.instanceDiv,Object(I.a)(Object(I.a)({},this.props.options),{},{model:this.models[e.selectedFilename],readOnly:Boolean(e.values[e.selectedFilename].readOnly),renderValidationDecorations:"on"})),this.instance.layout(),this.setState({initialized:!0})}},{key:"componentWillUnmount",value:function(){for(var n=0,e=Object.keys(this.models);n<e.length;n++){var t=e[n];this.models[t].dispose()}for(var r=0,s=Object.keys(this.solutionsModels);r<s.length;r++){var o=s[r];this.solutionsModels[o].dispose()}this.instance&&this.instance.dispose()}},{key:"componentDidUpdate",value:function(n){if(this.instance){var e=this.props.selectedFilename;if(e!==n.selectedFilename){var t=this.models[e];this.viewStates[n.selectedFilename]=this.instance.saveViewState(),this.instance.setModel(t),this.instance.updateOptions({readOnly:Boolean(this.props.values[e].readOnly)}),function(n){_n.apply(this,arguments)}(t);var r=this.viewStates[e];r&&this.instance.restoreViewState(r),this.instance.focus()}if(this.props.position!==n.position&&void 0!==this.props.position){var s=this.models[this.props.selectedFilename].getPositionAt(this.props.position);this.instance.setPosition(s),this.instance.revealLine(s.lineNumber),this.instance.focus()}if(this.props.width===n.width&&this.props.height===n.height||this.instance.layout(),this.props.values!==n.values)for(var o=0,i=Object.entries(this.props.values);o<i.length;o++){var a=Object(u.a)(i[o],2),c=a[0],l=a[1];l.content!==this.lastUpdates[c]&&(this.lastUpdates[c]=l.content,this.models[c].setValue(l.content))}}}},{key:"render",value:function(){var n=this.getSelectedSolutionFilename();return Object(d.jsxs)(d.Fragment,{children:[Object(d.jsx)("div",{ref:this.assignRef,style:{width:this.props.width,height:this.props.height}}),this.state.initialized&&this.props.showSolutions&&Object(d.jsx)(Sn,{selectedFilename:n,original:this.solutionsModels[n],modified:this.models[n],onClose:this.props.onSolutionsClose,onSelectFile:this.setSelectedSolutionFilename,filenames:this.solutionsFilenames})]})}},{key:"getSelectedSolutionFilename",value:function(){return this.state&&this.state.solutionsSelectedFilename?this.state.solutionsSelectedFilename:this.solutionsFilenames[0]}}]),t}(s.a.Component)),Ln=j.a.ol(Dn||(Dn=Object(a.a)(["\n    padding: 0;\n    margin: 5px 0 5px 40px;\n    list-style: none;\n    counter-reset: errors;\n"]))),Vn=j.a.li(Kn||(Kn=Object(a.a)(["\n    font-family: monospace;\n    font-size: 12px;\n    white-space: pre-wrap;\n    cursor: pointer;\n    & + & {\n        margin-top: 10px;\n    }\n    &:hover {\n        text-decoration: underline;\n    }\n    &::before {\n        counter-increment: errors;\n        content: counter(errors) '.';\n        display: inline-block;\n        width: 30px;\n        text-align: right;\n        margin-right: 10px;\n        margin-left: -40px;\n        color: gray;\n    }\n"]))),Jn=s.a.memo((function(n){var e=n.errors,t=n.onClick;return Object(d.jsx)(Ln,{children:e.map((function(n,e){return Object(d.jsx)(Vn,{onClick:function(){return t(n)},children:n.messageText},e)}))})})),Gn={"/node_modules/type-assertions/index.ts":{content:t(356).default,readOnly:!0}};function Hn(n){return JSON.stringify(n,null,4)}var Qn={1:Object(I.a)({"/index.ts":{content:t(357).default,solution:t(358).default},"/test.ts":{content:t(359).default,readOnly:!0}},Gn),2:Object(I.a)({"/index.ts":{content:t(360).default,solution:t(361).default},"/test.ts":{content:t(362).default,readOnly:!0}},Gn),3:Object(I.a)({"/index.ts":{content:t(363).default,solution:t(364).default},"/test.ts":{content:t(365).default,readOnly:!0}},Gn),4:Object(I.a)({"/index.ts":{content:t(366).default,solution:t(367).default},"/test.ts":{content:t(368).default,readOnly:!0}},Gn),5:Object(I.a)({"/index.ts":{content:t(369).default,solution:t(370).default},"/test.ts":{content:t(371).default,readOnly:!0}},Gn),6:Object(I.a)({"/index.ts":{content:t(372).default,solution:t(373).default},"/test.ts":{content:t(374).default,readOnly:!0}},Gn),7:Object(I.a)({"/index.ts":{content:t(375).default,solution:t(376).default},"/test.ts":{content:t(377).default,readOnly:!0}},Gn),8:Object(I.a)({"/index.ts":{content:t(378).default,solution:t(379).default},"/test.ts":{content:t(380).default,readOnly:!0}},Gn),9:Object(I.a)({"/index.ts":{content:t(381).default,solution:t(382).default},"/test.ts":{content:t(383).default,readOnly:!0}},Gn),10:Object(I.a)({"/index.ts":{content:t(384).default,solution:t(385).default},"/test.ts":{content:t(386).default,readOnly:!0}},Gn),11:Object(I.a)({"/index.ts":{content:t(387).default,readOnly:!0},"/test.ts":{content:t(388).default,readOnly:!0},"/declarations/str-utils/index.d.ts":{content:t(389).default,solution:t(390).default},"/node_modules/str-utils/index.js":{content:t(391).default,readOnly:!0},"/node_modules/str-utils/package.json":{content:Hn(t(392)),readOnly:!0},"/node_modules/str-utils/README.md":{content:t(393).default,readOnly:!0}},Gn),12:Object(I.a)({"/index.ts":{content:t(394).default,readOnly:!0},"/test.ts":{content:t(395).default,readOnly:!0},"/declarations/stats/index.d.ts":{content:t(396).default,solution:t(397).default},"/node_modules/stats/index.js":{content:t(398).default,readOnly:!0},"/node_modules/stats/package.json":{content:Hn(t(399)),readOnly:!0},"/node_modules/stats/README.md":{content:t(400).default,readOnly:!0}},Gn),13:Object(I.a)({"/index.ts":{content:t(401).default,readOnly:!0},"/test.ts":{content:t(402).default,readOnly:!0},"/module-augmentations/date-wizard/index.d.ts":{content:t(403).default,solution:t(404).default},"/node_modules/date-wizard/index.js":{content:t(405).default,readOnly:!0},"/node_modules/date-wizard/index.d.ts":{content:t(406).default,readOnly:!0},"/node_modules/date-wizard/package.json":{content:Hn(t(407)),readOnly:!0}},Gn),14:Object(I.a)({"/index.ts":{content:t(408).default,solution:t(409).default},"/test.ts":{content:t(410).default,readOnly:!0}},Gn),15:Object(I.a)({"/index.ts":{content:t(411).default,solution:t(412).default},"/test.ts":{content:t(413).default,readOnly:!0}},Gn),16:{"/index.ts":{content:t(414).default,readOnly:!0},"/test.ts":{content:t(415).default,readOnly:!0}}},Xn=function(n,e){var t=localStorage.getItem(n);return null===t?e:JSON.parse(t)},Yn=function(n,e){localStorage.setItem(n,JSON.stringify(e))};function Zn(n,e){for(var t={},r=0,s=Object.keys(e);r<s.length;r++){var o=s[r];Object.prototype.hasOwnProperty.call(n,o)?t[o]={content:n[o],solution:e[o].solution,readOnly:e[o].readOnly}:t[o]=e[o]}return t}var ne={};var ee=t(260),te=t.n(ee),re={exercise:"1",file:"/index.ts"},se=function(){var n=function(){return te.a.parse(String(window.location.hash).substr(1))},e=function(){return Object.assign({},re,n())},t=new T.a(1);return t.next(e()),window.addEventListener("hashchange",(function(){return t.next(e())})),{observable$:t,getCurrentRawParams:n,extend:function(n){window.location.hash="#".concat(te.a.stringify(Object.assign(e(),n)))}}}(),oe={completedExercises:{}};function ie(n){se.extend({exercise:String(n),file:"/index.ts"})}var ae,ce,ue,le,pe,de,me,fe,ge=function(){!function(){var n="exercisesProgress",e=localStorage.getItem(n);if(e)try{var t=JSON.parse(e);if("lastCompletedExerciseNumber"in t){for(var r={completedExercises:{}},s=1;s<=t.lastCompletedExerciseNumber;s++)r.completedExercises[s]=!0;localStorage.setItem(n,JSON.stringify(r))}}catch(o){localStorage.removeItem(n)}}();var n="exercisesProgress",e=new T.a(1),t=Object.keys(Qn).length,r=Xn(n,oe),s=1;if(!se.getCurrentRawParams().exercise){for(s=1;s<=t&&r.completedExercises[s];s++);1!==s&&ie(s)}return se.observable$.subscribe((function(n){s=Number(n.exercise||"1")})),e.next(r),{completeExercise:function(){r=Object(I.a)(Object(I.a)({},r),{},{completedExercises:Object(I.a)(Object(I.a)({},r.completedExercises),{},Object(O.a)({},s,!0))}),Yn(n,r),ie(s=Math.min(s+1,t)),e.next(r)},skipExercise:function(){ie(s=Math.min(s+1,t))},goToExercise:function(n){ie(n)},observable$:e}}(),ye=t(103),he=t(418);function be(n){return Object.keys(n).reduce((function(e,t){return e[t]=n[t].content,e}),{})}function we(n,e){return Object.keys(e).reduce((function(t,r){return e[r]!==n[r]&&(t[r]=e[r]),t}),{})}var xe,Ae=Number(Object.keys(Qn).pop()),ve=j.a.div(ae||(ae=Object(a.a)(["\n    flex: 1 0 100%;\n    align-self: stretch;\n    display: flex;\n    flex-direction: row;\n"]))),je=j.a.div(ce||(ce=Object(a.a)(["\n    flex: 1 1 auto;\n    position: relative;\n    min-width: 1px;\n"]))),Oe=j.a.div(ue||(ue=Object(a.a)(["\n    padding: 5px 10px;\n    overflow: auto;\n    height: 120px;\n    box-sizing: border-box;\n"]))),Ie=j.a.div(le||(le=Object(a.a)(["\n    min-width: 1px;\n    flex: 1 1 auto;\n    display: flex;\n    flex-direction: column;\n"]))),Te=j.a.div(pe||(pe=Object(a.a)(["\n    text-align: center;\n"]))),ke=j.a.div(de||(de=Object(a.a)(["\n    margin: 20px 0 0;\n"]))),Pe=j.a.div(me||(me=Object(a.a)(["\n    text-align: center;\n    margin: 20px 0;\n"]))),Ee=j.a.button(fe||(fe=Object(a.a)(["\n    font-size: 16px;\n    text-align: center;\n    & + & {\n        margin-left: 10px;\n    }\n"])));function Ue(n,e){for(var t=Qn[n],r={},s=0,o=Object.entries(e);s<o.length;s++){var i=Object(u.a)(o[s],2),a=i[0];i[1].content!==t[a].content&&(r[a]=!0)}return r}function Re(n){var e=n.exerciseNumber,t=Object(r.useMemo)((function(){return function(n){if(!ne[n]){var e="exercise.".concat(n),t=Qn[n],r=Xn(e,{}),s=cn()((function(){Yn(e,r)}),500),o=new T.a(1);o.next(Zn(r,t)),ne[n]={observable$:o,update:function(n,e){r=Object(I.a)(Object(I.a)({},r),{},Object(O.a)({},n,e)),s(),o.next(Zn(r,t))},revert:function(n){delete(r=Object(I.a)({},r))[n],s(),o.next(Zn(r,t))}}}return ne[n]}(e)}),[e]),s=Object(r.useState)(void 0),o=Object(u.a)(s,2),i=o[0],a=o[1],c=Object(r.useState)(!1),l=Object(u.a)(c,2),p=l[0],m=l[1],f=Object(r.useMemo)((function(){return t.observable$.pipe((function(n){var e=he();return new ye.a((function(t){var r=!1,s={},o=n.subscribe(function(){var n=Object($n.a)(Cn.a.mark((function n(o){var i,a,c;return Cn.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(i=be(o),r){n.next=8;break}return r=!0,s=i,n.next=6,e.init(i);case 6:n.next=13;break;case 8:return a=s,c=i,s=i,n.next=13,e.updateFiles(we(a,c));case 13:return n.t0=t,n.next=16,e.getErrors();case 16:n.t1=n.sent,n.t0.next.call(n.t0,n.t1);case 18:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());t.add((function(){e.terminate(),o.unsubscribe()}))}))}))}),[t]),y=Object(r.useState)("/index.ts"),h=Object(u.a)(y,2),b=h[0],w=h[1];Object(r.useEffect)((function(){var n=se.observable$.subscribe((function(n){w(String(n.file))}));return function(){return n.unsubscribe()}}),[w]);var x=Object(r.useCallback)((function(n){return se.extend({file:n})}),[]),A=Object(r.useCallback)((function(n){n.file&&(x(n.file),a(n.start))}),[a,x]),v=Object(r.useCallback)((function(n,e){t.update(n,e)}),[t]),j=Object(r.useMemo)((function(){return[function(){return m(!0)},function(){return m(!1)}]}),[m]),k=Object(u.a)(j,2),P=k[0],E=k[1];return g(t.observable$,(function(n){return Object(d.jsxs)(ve,{children:[Object(d.jsx)(F,{id:"files",header:"Files",orientation:"vertical",children:Object(d.jsx)(nn,{selectedFilename:b,fileTree:Qn[e],onSelectFilename:x,modifiedFilenames:Ue(e,n),revertFile:t.revert})}),Object(d.jsxs)(Ie,{children:[Object(d.jsx)(C,{filename:b,readOnly:Boolean(n[b].readOnly)}),Object(d.jsx)(je,{children:Object(d.jsx)(zn,{namespace:String(e),selectedFilename:b,values:n,onChange:v,theme:"vs-light",position:i,onNavigate:function(){return null},options:{minimap:{enabled:!1}},showSolutions:p,onSolutionsClose:E})}),g(f,(function(n){return Object(d.jsx)(F,{id:"exercise",header:n.length>0?"Errors (".concat(n.length,")"):"Completed",orientation:"horizontal",children:Object(d.jsxs)(Oe,{children:[n.length>0&&Object(d.jsxs)(d.Fragment,{children:[Object(d.jsx)(Jn,{errors:n,onClick:A}),Object(d.jsxs)(Pe,{children:["I give up, ",Object(d.jsx)(Ee,{onClick:P,children:"show a possible solution"})," ","\xa0 or",Object(d.jsx)(Ee,{onClick:ge.skipExercise,children:"skip"})]})]}),0===n.length&&Object(d.jsxs)(Te,{children:[Object(d.jsx)(ke,{children:e===Ae?Object(d.jsx)(d.Fragment,{children:"Congratulations! That was the last exercise."}):Object(d.jsxs)(d.Fragment,{children:["Good job! Exercise ",e," is completed."]})}),e!==Ae&&Object(d.jsxs)(Pe,{children:[Object(d.jsx)(Ee,{onClick:ge.completeExercise,children:"Next exercise"}),Object(d.jsx)(Ee,{onClick:P,children:"Compare my solution"})]})]})]})})}))]})]})}))}var Me,Fe,Se,qe=j.a.footer(xe||(xe=Object(a.a)(["\n    flex: 0 0 auto;\n    border-top: 1px solid #294e80;\n    padding: 5px 0;\n    text-align: center;\n    color: gray;\n    font-size: 12px;\n    a,\n    a:hover,\n    a:visited,\n    a:active {\n        color: inherit;\n    }\n    z-index: 1;\n"]))),Ce=(new Date).getFullYear();function $e(){return Object(d.jsxs)(qe,{children:["\xa9 ",Ce," ",Object(d.jsx)("a",{href:"https://github.com/mdevils",children:"Marat Dulin"}),","," ",Object(d.jsx)("a",{href:"https://github.com/typescript-exercises/typescript-exercises",children:"contribute"}),","," ",Object(d.jsx)("a",{href:"https://www.patreon.com/mdevils",children:"support this project"})]})}function We(){return Object(d.jsx)("svg",{fill:"none",height:"26",viewBox:"0 0 27 26",width:"27",xmlns:"http://www.w3.org/2000/svg",children:Object(d.jsx)("path",{clipRule:"evenodd",d:"m.98608 0h24.32332c.5446 0 .9861.436522.9861.975v24.05c0 .5385-.4415.975-.9861.975h-24.32332c-.544597 0-.98608-.4365-.98608-.975v-24.05c0-.538478.441483-.975.98608-.975zm13.63142 13.8324v-2.1324h-9.35841v2.1324h3.34111v9.4946h2.6598v-9.4946zm1.0604 9.2439c.4289.2162.9362.3784 1.5218.4865.5857.1081 1.2029.1622 1.8518.1622.6324 0 1.2331-.0595 1.8023-.1784.5691-.1189 1.0681-.3149 1.497-.5879s.7685-.6297 1.0187-1.0703.3753-.9852.3753-1.6339c0-.4703-.0715-.8824-.2145-1.2365-.1429-.3541-.3491-.669-.6186-.9447-.2694-.2757-.5925-.523-.9692-.7419s-.8014-.4257-1.2743-.6203c-.3465-.1406-.6572-.2771-.9321-.4095-.275-.1324-.5087-.2676-.7011-.4054-.1925-.1379-.3409-.2838-.4454-.4379-.1045-.154-.1567-.3284-.1567-.523 0-.1784.0467-.3392.1402-.4824.0935-.1433.2254-.2663.3959-.369s.3794-.1824.6269-.2392c.2474-.0567.5224-.0851.8248-.0851.22 0 .4523.0162.697.0486.2447.0325.4908.0825.7382.15.2475.0676.4881.1527.7218.2555.2337.1027.4495.2216.6475.3567v-2.4244c-.4015-.1514-.84-.2636-1.3157-.3365-.4756-.073-1.0214-.1095-1.6373-.1095-.6268 0-1.2207.0662-1.7816.1987-.5609.1324-1.0544.3392-1.4806.6203s-.763.6392-1.0104 1.0743c-.2475.4352-.3712.9555-.3712 1.5609 0 .7731.2268 1.4326.6805 1.9785.4537.546 1.1424 1.0082 2.0662 1.3866.363.146.7011.2892 1.0146.4298.3134.1405.5842.2865.8124.4378.2282.1514.4083.3162.5403.4946s.198.3811.198.6082c0 .1676-.0413.323-.1238.4662-.0825.1433-.2076.2676-.3753.373s-.3766.1879-.6268.2473c-.2502.0595-.5431.0892-.8785.0892-.5719 0-1.1383-.0986-1.6992-.2959-.5608-.1973-1.0805-.4933-1.5589-.8879z",fill:"#fff",fillRule:"evenodd"})})}var Ne=j.a.header(Me||(Me=Object(a.a)(["\n    flex: 0 0 auto;\n    background: #294e80;\n    padding: 10px 16px;\n    z-index: 1;\n"]))),_e=j.a.h1(Fe||(Fe=Object(a.a)(["\n    margin: 0;\n    padding: 0;\n    font-weight: 300;\n    color: white;\n    font-family: Helvetica, Arial, serif;\n    letter-spacing: -1px;\n    font-size: 30px;\n    strong {\n        font-weight: 500;\n    }\n    svg {\n        margin-right: 10px;\n        position: relative;\n        top: 3px;\n    }\n"]))),De=j.a.span(Se||(Se=Object(a.a)(["\n    font-size: 24px;\n    margin-left: 20px;\n    color: yellow;\n    opacity: 0.9;\n"])));function Ke(){return Object(d.jsx)(Ne,{children:Object(d.jsxs)(_e,{children:[Object(d.jsx)(We,{}),"TypeScript",Object(d.jsx)(De,{children:"exercises"})]})})}var Be,ze,Le,Ve,Je,Ge,He=t(429),Qe=j.a.div(Be||(Be=Object(a.a)(["\n    flex: 0 0 auto;\n    display: flex;\n    flex-direction: row;\n    background: #faf9f8;\n    border-bottom: 1px solid #294e80;\n    align-items: center;\n    padding: 0 10px;\n    user-select: none;\n"]))),Xe=j.a.nav(ze||(ze=Object(a.a)(["\n    flex: 1 1 auto;\n    list-style-type: none;\n"]))),Ye=j.a.li(Le||(Le=Object(a.a)(["\n    display: inline-block;\n    font-weight: bold;\n    margin-right: 20px;\n    opacity: 0.75;\n"]))),Ze=j.a.li(Ve||(Ve=Object(a.a)(["\n    display: inline-block;\n    margin: 0;\n    padding: 0;\n    position: relative;\n    line-height: 30px;\n    color: ",";\n    cursor: pointer;\n    font-weight: ",";\n    &::after {\n        content: '\xb7';\n        margin: 0 5px;\n        opacity: 0.25;\n    }\n    &:last-of-type::after {\n        display: none;\n    }\n"])),(function(n){return n.completed?"inherit":"gray"}),(function(n){return n.current?"bold":"normal"}));function nt(){return Object(d.jsx)(Qe,{children:Object(d.jsx)(Xe,{children:g(Object(He.a)([ge.observable$,se.observable$]),(function(n){var e=Object(u.a)(n,2),t=e[0].completedExercises,r=e[1];return Object(d.jsxs)(d.Fragment,{children:[Object(d.jsx)(Ye,{children:"Exercises"}),Object.keys(Qn).map((function(n){return Object(d.jsx)(Ze,{completed:t[n],current:Number(n)===Number(r.exercise),onClick:function(){return ge.goToExercise(Number(n))},children:n},n)}))]})}))})})}var et,tt=j.a.div(Je||(Je=Object(a.a)(["\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n"]))),rt=j.a.main(Ge||(Ge=Object(a.a)(["\n    display: flex;\n    flex-direction: column;\n    flex: 1 1 auto;\n    position: relative;\n"])));function st(n){var e=n.children;return Object(d.jsxs)(tt,{children:[Object(d.jsx)(Ke,{}),Object(d.jsx)(nt,{}),Object(d.jsx)(rt,{children:e}),Object(d.jsx)($e,{})]})}var ot,it=Object(c.css)(et||(et=Object(a.a)(["\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI Light'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/light/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/light/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/light/latest.ttf) format('truetype');\n        font-weight: 100;\n    }\n\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI Semilight'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semilight/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semilight/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semilight/latest.ttf) format('truetype');\n        font-weight: 200;\n    }\n\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.ttf) format('truetype');\n        font-weight: 400;\n    }\n\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI Bold'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/bold/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/bold/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/bold/latest.ttf) format('truetype');\n        font-weight: 600;\n    }\n\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI Semibold'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semibold/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semibold/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semibold/latest.ttf) format('truetype');\n        font-weight: 700;\n    }\n"]))),at=Object(c.css)(ot||(ot=Object(a.a)(["\n    html,\n    body,\n    #root {\n        margin: 0;\n        height: 100%;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-family: 'Segoe UI Web (West European)', Segoe UI, -apple-system, BlinkMacSystemFont, Roboto, Helvetica Neue,\n            sans-serif;\n        font-size: 16px;\n    }\n    ","\n"])),it);function ct(){return Object(d.jsxs)(d.Fragment,{children:[Object(d.jsx)(c.Global,{styles:at}),Object(d.jsx)(st,{children:g(se.observable$,(function(n){return Object(d.jsx)(Re,{exerciseNumber:Number(n.exercise)},n.exercise)}))})]})}Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(Object(d.jsx)(s.a.StrictMode,{children:Object(d.jsx)(ct,{})}),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(n){n.unregister()})).catch((function(n){console.error(n.message)}))}},[[422,2,3]]]);
//# sourceMappingURL=main.b13a502b.chunk.js.map